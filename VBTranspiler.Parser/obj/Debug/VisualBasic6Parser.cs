//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Projects\Git\VBTranspiler\VBTranspiler.Parser\VisualBasic6.g4 by ANTLR 4.6.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace VBTranspiler.Parser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1")]
[System.CLSCompliant(false)]
public partial class VisualBasic6Parser : Parser {
	public const int
		ACCESS=1, ADDRESSOF=2, ALIAS=3, AND=4, ATTRIBUTE=5, APPACTIVATE=6, APPEND=7, 
		AS=8, BEEP=9, BEGIN=10, BEGINPROPERTY=11, BINARY=12, BOOLEAN=13, BYVAL=14, 
		BYREF=15, BYTE=16, CALL=17, CASE=18, CHDIR=19, CHDRIVE=20, CLASS=21, CLOSE=22, 
		COLLECTION=23, CONST=24, DATE=25, DECLARE=26, DEFBOOL=27, DEFBYTE=28, 
		DEFDATE=29, DEFDBL=30, DEFDEC=31, DEFCUR=32, DEFINT=33, DEFLNG=34, DEFOBJ=35, 
		DEFSNG=36, DEFSTR=37, DEFVAR=38, DELETESETTING=39, DIM=40, DO=41, DOUBLE=42, 
		EACH=43, ELSE=44, ELSEIF=45, END_ENUM=46, END_FUNCTION=47, END_IF=48, 
		END_PROPERTY=49, END_SELECT=50, END_SUB=51, END_TYPE=52, END_WITH=53, 
		END=54, ENDPROPERTY=55, ENUM=56, EQV=57, ERASE=58, ERROR=59, EVENT=60, 
		EXIT_DO=61, EXIT_FOR=62, EXIT_FUNCTION=63, EXIT_PROPERTY=64, EXIT_SUB=65, 
		FALSE=66, FILECOPY=67, FRIEND=68, FOR=69, FUNCTION=70, GET=71, GLOBAL=72, 
		GOSUB=73, GOTO=74, IF=75, IMP=76, IMPLEMENTS=77, IN=78, INPUT=79, IS=80, 
		INTEGER=81, KILL=82, LOAD=83, LOCK=84, LONG=85, LOOP=86, LEN=87, LET=88, 
		LIB=89, LIKE=90, LINE_INPUT=91, LOCK_READ=92, LOCK_WRITE=93, LOCK_READ_WRITE=94, 
		LSET=95, MACRO_IF=96, MACRO_ELSEIF=97, MACRO_ELSE=98, MACRO_END_IF=99, 
		ME=100, MID=101, MKDIR=102, MOD=103, NAME=104, NEXT=105, NEW=106, NOT=107, 
		NOTHING=108, NULL=109, OBJECT=110, ON=111, ON_ERROR=112, ON_LOCAL_ERROR=113, 
		OPEN=114, OPTIONAL=115, OPTION_BASE=116, OPTION_EXPLICIT=117, OPTION_COMPARE=118, 
		OPTION_PRIVATE_MODULE=119, OR=120, OUTPUT=121, PARAMARRAY=122, PRESERVE=123, 
		PRINT=124, PRIVATE=125, PROPERTY_GET=126, PROPERTY_LET=127, PROPERTY_SET=128, 
		PUBLIC=129, PUT=130, RANDOM=131, RANDOMIZE=132, RAISEEVENT=133, READ=134, 
		READ_WRITE=135, REDIM=136, REM=137, RESET=138, RESUME=139, RETURN=140, 
		RMDIR=141, RSET=142, SAVEPICTURE=143, SAVESETTING=144, SEEK=145, SELECT=146, 
		SENDKEYS=147, SET=148, SETATTR=149, SHARED=150, SINGLE=151, SPC=152, STATIC=153, 
		STEP=154, STOP=155, STRING=156, SUB=157, TAB=158, TEXT=159, THEN=160, 
		TIME=161, TO=162, TRUE=163, TYPE=164, TYPEOF=165, UNLOAD=166, UNLOCK=167, 
		UNTIL=168, VARIANT=169, VERSION=170, WEND=171, WHILE=172, WIDTH=173, WITH=174, 
		WITHEVENTS=175, WRITE=176, XOR=177, AMPERSAND=178, ASSIGN=179, AT=180, 
		COLON=181, COMMA=182, DIV=183, DOLLAR=184, DOT=185, EQ=186, EXCLAMATIONMARK=187, 
		GEQ=188, GT=189, HASH=190, LEQ=191, LBRACE=192, LPAREN=193, LT=194, MINUS=195, 
		MINUS_EQ=196, MULT=197, NEQ=198, PERCENT=199, PLUS=200, PLUS_EQ=201, POW=202, 
		RBRACE=203, RPAREN=204, SEMICOLON=205, L_SQUARE_BRACKET=206, R_SQUARE_BRACKET=207, 
		STRINGLITERAL=208, DATELITERAL=209, COLORLITERAL=210, INTEGERLITERAL=211, 
		DOUBLELITERAL=212, FILENUMBER=213, OCTALLITERAL=214, FRX_OFFSET=215, GUID=216, 
		IDENTIFIER=217, LINE_CONTINUATION=218, NEWLINE=219, COMMENT=220, WS=221;
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleReferences = 2, RULE_moduleReference = 3, 
		RULE_moduleReferenceGUID = 4, RULE_moduleReferenceComponent = 5, RULE_moduleHeader = 6, 
		RULE_moduleConfig = 7, RULE_moduleConfigElement = 8, RULE_moduleAttributes = 9, 
		RULE_moduleOptions = 10, RULE_moduleOption = 11, RULE_moduleBody = 12, 
		RULE_moduleBodyElement = 13, RULE_controlProperties = 14, RULE_cp_Properties = 15, 
		RULE_cp_SingleProperty = 16, RULE_cp_PropertyName = 17, RULE_cp_NestedProperty = 18, 
		RULE_cp_ControlType = 19, RULE_cp_ControlIdentifier = 20, RULE_moduleBlock = 21, 
		RULE_attributeStmt = 22, RULE_block = 23, RULE_blockStmt = 24, RULE_appActivateStmt = 25, 
		RULE_beepStmt = 26, RULE_chDirStmt = 27, RULE_chDriveStmt = 28, RULE_closeStmt = 29, 
		RULE_constStmt = 30, RULE_constSubStmt = 31, RULE_dateStmt = 32, RULE_declareStmt = 33, 
		RULE_deftypeStmt = 34, RULE_deleteSettingStmt = 35, RULE_doLoopStmt = 36, 
		RULE_endStmt = 37, RULE_enumerationStmt = 38, RULE_enumerationStmt_Constant = 39, 
		RULE_eraseStmt = 40, RULE_errorStmt = 41, RULE_eventStmt = 42, RULE_exitStmt = 43, 
		RULE_filecopyStmt = 44, RULE_forEachStmt = 45, RULE_forNextStmt = 46, 
		RULE_functionStmt = 47, RULE_getStmt = 48, RULE_goSubStmt = 49, RULE_goToStmt = 50, 
		RULE_ifThenElseStmt = 51, RULE_ifBlockStmt = 52, RULE_ifConditionStmt = 53, 
		RULE_ifElseIfBlockStmt = 54, RULE_ifElseBlockStmt = 55, RULE_implementsStmt = 56, 
		RULE_inputStmt = 57, RULE_killStmt = 58, RULE_letStmt = 59, RULE_lineInputStmt = 60, 
		RULE_loadStmt = 61, RULE_lockStmt = 62, RULE_lsetStmt = 63, RULE_macroIfThenElseStmt = 64, 
		RULE_macroIfBlockStmt = 65, RULE_macroElseIfBlockStmt = 66, RULE_macroElseBlockStmt = 67, 
		RULE_midStmt = 68, RULE_mkdirStmt = 69, RULE_nameStmt = 70, RULE_onErrorStmt = 71, 
		RULE_onGoToStmt = 72, RULE_onGoSubStmt = 73, RULE_openStmt = 74, RULE_outputList = 75, 
		RULE_outputList_Expression = 76, RULE_printStmt = 77, RULE_propertyGetStmt = 78, 
		RULE_propertySetStmt = 79, RULE_propertyLetStmt = 80, RULE_putStmt = 81, 
		RULE_raiseEventStmt = 82, RULE_randomizeStmt = 83, RULE_redimStmt = 84, 
		RULE_redimSubStmt = 85, RULE_resetStmt = 86, RULE_resumeStmt = 87, RULE_returnStmt = 88, 
		RULE_rmdirStmt = 89, RULE_rsetStmt = 90, RULE_savepictureStmt = 91, RULE_saveSettingStmt = 92, 
		RULE_seekStmt = 93, RULE_selectCaseStmt = 94, RULE_sC_Case = 95, RULE_sC_Cond = 96, 
		RULE_sC_CondExpr = 97, RULE_sendkeysStmt = 98, RULE_setattrStmt = 99, 
		RULE_setStmt = 100, RULE_stopStmt = 101, RULE_subStmt = 102, RULE_timeStmt = 103, 
		RULE_typeStmt = 104, RULE_typeStmt_Element = 105, RULE_typeOfStmt = 106, 
		RULE_unloadStmt = 107, RULE_unlockStmt = 108, RULE_valueStmt = 109, RULE_variableStmt = 110, 
		RULE_variableListStmt = 111, RULE_variableSubStmt = 112, RULE_whileWendStmt = 113, 
		RULE_widthStmt = 114, RULE_withStmt = 115, RULE_writeStmt = 116, RULE_explicitCallStmt = 117, 
		RULE_eCS_ProcedureCall = 118, RULE_eCS_MemberProcedureCall = 119, RULE_implicitCallStmt_InBlock = 120, 
		RULE_iCS_B_ProcedureCall = 121, RULE_iCS_B_MemberProcedureCall = 122, 
		RULE_implicitCallStmt_InStmt = 123, RULE_iCS_S_VariableOrProcedureCall = 124, 
		RULE_iCS_S_ProcedureOrArrayCall = 125, RULE_iCS_S_NestedProcedureCall = 126, 
		RULE_iCS_S_MembersCall = 127, RULE_iCS_S_MemberCall = 128, RULE_iCS_S_DictionaryCall = 129, 
		RULE_argsCall = 130, RULE_argCall = 131, RULE_dictionaryCallStmt = 132, 
		RULE_argList = 133, RULE_arg = 134, RULE_argDefaultValue = 135, RULE_subscripts = 136, 
		RULE_subscript = 137, RULE_ambiguousIdentifier = 138, RULE_asTypeClause = 139, 
		RULE_baseType = 140, RULE_certainIdentifier = 141, RULE_comparisonOperator = 142, 
		RULE_complexType = 143, RULE_fieldLength = 144, RULE_letterrange = 145, 
		RULE_lineLabel = 146, RULE_literal = 147, RULE_publicPrivateVisibility = 148, 
		RULE_publicPrivateGlobalVisibility = 149, RULE_type = 150, RULE_typeHint = 151, 
		RULE_visibility = 152, RULE_ambiguousKeyword = 153;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleReferences", "moduleReference", "moduleReferenceGUID", 
		"moduleReferenceComponent", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleOptions", "moduleOption", "moduleBody", "moduleBodyElement", 
		"controlProperties", "cp_Properties", "cp_SingleProperty", "cp_PropertyName", 
		"cp_NestedProperty", "cp_ControlType", "cp_ControlIdentifier", "moduleBlock", 
		"attributeStmt", "block", "blockStmt", "appActivateStmt", "beepStmt", 
		"chDirStmt", "chDriveStmt", "closeStmt", "constStmt", "constSubStmt", 
		"dateStmt", "declareStmt", "deftypeStmt", "deleteSettingStmt", "doLoopStmt", 
		"endStmt", "enumerationStmt", "enumerationStmt_Constant", "eraseStmt", 
		"errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", "forNextStmt", 
		"functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "macroIfThenElseStmt", "macroIfBlockStmt", 
		"macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt", "mkdirStmt", 
		"nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", "outputList", 
		"outputList_Expression", "printStmt", "propertyGetStmt", "propertySetStmt", 
		"propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rmdirStmt", 
		"rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", "selectCaseStmt", 
		"sC_Case", "sC_Cond", "sC_CondExpr", "sendkeysStmt", "setattrStmt", "setStmt", 
		"stopStmt", "subStmt", "timeStmt", "typeStmt", "typeStmt_Element", "typeOfStmt", 
		"unloadStmt", "unlockStmt", "valueStmt", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", "writeStmt", 
		"explicitCallStmt", "eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
		"iCS_B_ProcedureCall", "iCS_B_MemberProcedureCall", "implicitCallStmt_InStmt", 
		"iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_NestedProcedureCall", 
		"iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", 
		"argCall", "dictionaryCallStmt", "argList", "arg", "argDefaultValue", 
		"subscripts", "subscript", "ambiguousIdentifier", "asTypeClause", "baseType", 
		"certainIdentifier", "comparisonOperator", "complexType", "fieldLength", 
		"letterrange", "lineLabel", "literal", "publicPrivateVisibility", "publicPrivateGlobalVisibility", 
		"type", "typeHint", "visibility", "ambiguousKeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'&'", "':='", 
		"'@'", "':'", "','", null, "'$'", "'.'", "'='", "'!'", "'>='", "'>'", 
		"'#'", "'<='", "'{'", "'('", "'<'", "'-'", "'-='", "'*'", "'<>'", "'%'", 
		"'+'", "'+='", "'^'", "'}'", "')'", "';'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", 
		"APPEND", "AS", "BEEP", "BEGIN", "BEGINPROPERTY", "BINARY", "BOOLEAN", 
		"BYVAL", "BYREF", "BYTE", "CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", 
		"CLOSE", "COLLECTION", "CONST", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", 
		"DEFDATE", "DEFDBL", "DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", 
		"DEFSNG", "DEFSTR", "DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", 
		"EACH", "ELSE", "ELSEIF", "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", 
		"END_SELECT", "END_SUB", "END_TYPE", "END_WITH", "END", "ENDPROPERTY", 
		"ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", 
		"EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FILECOPY", "FRIEND", "FOR", "FUNCTION", 
		"GET", "GLOBAL", "GOSUB", "GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", 
		"IS", "INTEGER", "KILL", "LOAD", "LOCK", "LONG", "LOOP", "LEN", "LET", 
		"LIB", "LIKE", "LINE_INPUT", "LOCK_READ", "LOCK_WRITE", "LOCK_READ_WRITE", 
		"LSET", "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", "MACRO_END_IF", "ME", 
		"MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", "NOT", "NOTHING", "NULL", 
		"OBJECT", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", 
		"READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", 
		"RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", 
		"SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
		"SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", 
		"WITH", "WITHEVENTS", "WRITE", "XOR", "AMPERSAND", "ASSIGN", "AT", "COLON", 
		"COMMA", "DIV", "DOLLAR", "DOT", "EQ", "EXCLAMATIONMARK", "GEQ", "GT", 
		"HASH", "LEQ", "LBRACE", "LPAREN", "LT", "MINUS", "MINUS_EQ", "MULT", 
		"NEQ", "PERCENT", "PLUS", "PLUS_EQ", "POW", "RBRACE", "RPAREN", "SEMICOLON", 
		"L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "STRINGLITERAL", "DATELITERAL", 
		"COLORLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", "FILENUMBER", "OCTALLITERAL", 
		"FRX_OFFSET", "GUID", "IDENTIFIER", "LINE_CONTINUATION", "NEWLINE", "COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VisualBasic6.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VisualBasic6Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(VisualBasic6Parser.Eof, 0); }
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; module();
			State = 309; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleReferencesContext moduleReferences() {
			return GetRuleContext<ModuleReferencesContext>(0);
		}
		public ControlPropertiesContext controlProperties() {
			return GetRuleContext<ControlPropertiesContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public ModuleOptionsContext moduleOptions() {
			return GetRuleContext<ModuleOptionsContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 311; Match(WS);
				}
				break;
			}
			State = 317;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 314; Match(NEWLINE);
					}
					} 
				}
				State = 319;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 320; moduleHeader();
				State = 322;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 321; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 324;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 329;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 328; moduleReferences();
				}
				break;
			}
			State = 334;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 331; Match(NEWLINE);
					}
					} 
				}
				State = 336;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 338;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 337; controlProperties();
				}
				break;
			}
			State = 343;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 340; Match(NEWLINE);
					}
					} 
				}
				State = 345;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 347;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 346; moduleConfig();
				}
				break;
			}
			State = 352;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 349; Match(NEWLINE);
					}
					} 
				}
				State = 354;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 356;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 355; moduleAttributes();
				}
				break;
			}
			State = 361;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 358; Match(NEWLINE);
					}
					} 
				}
				State = 363;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			State = 365;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 364; moduleOptions();
				}
				break;
			}
			State = 370;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 367; Match(NEWLINE);
					}
					} 
				}
				State = 372;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			State = 374;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 373; moduleBody();
				}
				break;
			}
			State = 379;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 376; Match(NEWLINE);
				}
				}
				State = 381;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 383;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 382; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferencesContext : ParserRuleContext {
		public ModuleReferenceContext[] moduleReference() {
			return GetRuleContexts<ModuleReferenceContext>();
		}
		public ModuleReferenceContext moduleReference(int i) {
			return GetRuleContext<ModuleReferenceContext>(i);
		}
		public ModuleReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReferences; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReferences(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReferences(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReferences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferencesContext moduleReferences() {
		ModuleReferencesContext _localctx = new ModuleReferencesContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleReferences);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 385; moduleReference();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 388;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferenceContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(VisualBasic6Parser.OBJECT, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ModuleReferenceGUIDContext moduleReferenceGUID() {
			return GetRuleContext<ModuleReferenceGUIDContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(VisualBasic6Parser.SEMICOLON, 0); }
		public ModuleReferenceComponentContext moduleReferenceComponent() {
			return GetRuleContext<ModuleReferenceComponentContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferenceContext moduleReference() {
		ModuleReferenceContext _localctx = new ModuleReferenceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleReference);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(OBJECT);
			State = 392;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 391; Match(WS);
				}
			}

			State = 394; Match(EQ);
			State = 396;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 395; Match(WS);
				}
			}

			State = 398; moduleReferenceGUID();
			State = 399; Match(SEMICOLON);
			State = 401;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 400; Match(WS);
				}
			}

			State = 403; moduleReferenceComponent();
			State = 407;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 404; Match(NEWLINE);
					}
					} 
				}
				State = 409;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferenceGUIDContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(VisualBasic6Parser.STRINGLITERAL, 0); }
		public ModuleReferenceGUIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReferenceGUID; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReferenceGUID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReferenceGUID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReferenceGUID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferenceGUIDContext moduleReferenceGUID() {
		ModuleReferenceGUIDContext _localctx = new ModuleReferenceGUIDContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleReferenceGUID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferenceComponentContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(VisualBasic6Parser.STRINGLITERAL, 0); }
		public ModuleReferenceComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReferenceComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReferenceComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReferenceComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReferenceComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferenceComponentContext moduleReferenceComponent() {
		ModuleReferenceComponentContext _localctx = new ModuleReferenceComponentContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleReferenceComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VisualBasic6Parser.VERSION, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode DOUBLELITERAL() { return GetToken(VisualBasic6Parser.DOUBLELITERAL, 0); }
		public ITerminalNode CLASS() { return GetToken(VisualBasic6Parser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(VERSION);
			State = 415; Match(WS);
			State = 416; Match(DOUBLELITERAL);
			State = 419;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 417; Match(WS);
				State = 418; Match(CLASS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(VisualBasic6Parser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleConfigElementContext[] moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleConfig);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 421; Match(BEGIN);
			State = 423;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 422; Match(NEWLINE);
				}
				}
				State = 425;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 428;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 427; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 430;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 432; Match(END);
			State = 434;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 433; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 436;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(VisualBasic6Parser.NEWLINE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; ambiguousIdentifier();
			State = 440;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 439; Match(WS);
				}
			}

			State = 442; Match(EQ);
			State = 444;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 443; Match(WS);
				}
			}

			State = 446; literal();
			State = 447; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public AttributeStmtContext[] attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 449; attributeStmt();
					State = 451;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 450; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 453;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 457;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionsContext : ParserRuleContext {
		public ModuleOptionContext[] moduleOption() {
			return GetRuleContexts<ModuleOptionContext>();
		}
		public ModuleOptionContext moduleOption(int i) {
			return GetRuleContext<ModuleOptionContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionsContext moduleOptions() {
		ModuleOptionsContext _localctx = new ModuleOptionsContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 459; moduleOption();
					State = 461;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 460; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 463;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 467;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VisualBasic6Parser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VisualBasic6Parser.OPTION_BASE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VisualBasic6Parser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_COMPARE() { return GetToken(VisualBasic6Parser.OPTION_COMPARE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode TEXT() { return GetToken(VisualBasic6Parser.TEXT, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleOption);
		int _la;
		try {
			State = 477;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 469; Match(OPTION_BASE);
				State = 470; Match(WS);
				State = 471; Match(INTEGERLITERAL);
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 472; Match(OPTION_COMPARE);
				State = 473; Match(WS);
				State = 474;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 475; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 476; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public ModuleBodyElementContext[] moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_moduleBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 479; moduleBodyElement();
			State = 488;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 481;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 480; Match(NEWLINE);
						}
						}
						State = 483;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 485; moduleBodyElement();
					}
					} 
				}
				State = 490;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_moduleBodyElement);
		try {
			State = 503;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491; moduleBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 492; moduleOption();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 493; declareStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 494; enumerationStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 495; eventStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 496; functionStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 497; macroIfThenElseStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 498; propertyGetStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 499; propertySetStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 500; propertyLetStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 501; subStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 502; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlPropertiesContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(VisualBasic6Parser.BEGIN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public Cp_ControlTypeContext cp_ControlType() {
			return GetRuleContext<Cp_ControlTypeContext>(0);
		}
		public Cp_ControlIdentifierContext cp_ControlIdentifier() {
			return GetRuleContext<Cp_ControlIdentifierContext>(0);
		}
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public Cp_PropertiesContext[] cp_Properties() {
			return GetRuleContexts<Cp_PropertiesContext>();
		}
		public Cp_PropertiesContext cp_Properties(int i) {
			return GetRuleContext<Cp_PropertiesContext>(i);
		}
		public ControlPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterControlProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitControlProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlPropertiesContext controlProperties() {
		ControlPropertiesContext _localctx = new ControlPropertiesContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_controlProperties);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 505; Match(WS);
				}
			}

			State = 508; Match(BEGIN);
			State = 509; Match(WS);
			State = 510; cp_ControlType();
			State = 511; Match(WS);
			State = 512; cp_ControlIdentifier();
			State = 514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 513; Match(WS);
				}
			}

			State = 517;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 516; Match(NEWLINE);
				}
				}
				State = 519;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 522;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 521; cp_Properties();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 524;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 526; Match(END);
			State = 530;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 527; Match(NEWLINE);
					}
					} 
				}
				State = 532;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_PropertiesContext : ParserRuleContext {
		public Cp_SinglePropertyContext cp_SingleProperty() {
			return GetRuleContext<Cp_SinglePropertyContext>(0);
		}
		public Cp_NestedPropertyContext cp_NestedProperty() {
			return GetRuleContext<Cp_NestedPropertyContext>(0);
		}
		public ControlPropertiesContext controlProperties() {
			return GetRuleContext<ControlPropertiesContext>(0);
		}
		public Cp_PropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_Properties; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_Properties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_Properties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_Properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_PropertiesContext cp_Properties() {
		Cp_PropertiesContext _localctx = new Cp_PropertiesContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_cp_Properties);
		try {
			State = 536;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533; cp_SingleProperty();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 534; cp_NestedProperty();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 535; controlProperties();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_SinglePropertyContext : ParserRuleContext {
		public Cp_PropertyNameContext cp_PropertyName() {
			return GetRuleContext<Cp_PropertyNameContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode DOLLAR() { return GetToken(VisualBasic6Parser.DOLLAR, 0); }
		public ITerminalNode FRX_OFFSET() { return GetToken(VisualBasic6Parser.FRX_OFFSET, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ITerminalNode LBRACE() { return GetToken(VisualBasic6Parser.LBRACE, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(VisualBasic6Parser.RBRACE, 0); }
		public Cp_SinglePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_SingleProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_SingleProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_SingleProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_SingleProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_SinglePropertyContext cp_SingleProperty() {
		Cp_SinglePropertyContext _localctx = new Cp_SinglePropertyContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_cp_SingleProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 538; Match(WS);
				}
			}

			State = 541; cp_PropertyName();
			State = 543;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 542; Match(WS);
				}
			}

			State = 545; Match(EQ);
			State = 547;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 546; Match(WS);
				}
			}

			State = 550;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DOLLAR) {
				{
				State = 549; Match(DOLLAR);
				}
			}

			State = 557;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FALSE:
			case NOTHING:
			case NULL:
			case TRUE:
			case STRINGLITERAL:
			case DATELITERAL:
			case COLORLITERAL:
			case INTEGERLITERAL:
			case DOUBLELITERAL:
			case FILENUMBER:
			case OCTALLITERAL:
				{
				State = 552; literal();
				}
				break;
			case LBRACE:
				{
				{
				State = 553; Match(LBRACE);
				State = 554; ambiguousIdentifier();
				State = 555; Match(RBRACE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 560;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FRX_OFFSET) {
				{
				State = 559; Match(FRX_OFFSET);
				}
			}

			State = 563;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 562; Match(NEWLINE);
				}
				}
				State = 565;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_PropertyNameContext : ParserRuleContext {
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public ITerminalNode OBJECT() { return GetToken(VisualBasic6Parser.OBJECT, 0); }
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public Cp_PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_PropertyName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_PropertyName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_PropertyName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_PropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_PropertyNameContext cp_PropertyName() {
		Cp_PropertyNameContext _localctx = new Cp_PropertyNameContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_cp_PropertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 567; Match(OBJECT);
				State = 568; Match(DOT);
				}
				break;
			}
			State = 571; complexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_NestedPropertyContext : ParserRuleContext {
		public ITerminalNode BEGINPROPERTY() { return GetToken(VisualBasic6Parser.BEGINPROPERTY, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode ENDPROPERTY() { return GetToken(VisualBasic6Parser.ENDPROPERTY, 0); }
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode GUID() { return GetToken(VisualBasic6Parser.GUID, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public Cp_PropertiesContext[] cp_Properties() {
			return GetRuleContexts<Cp_PropertiesContext>();
		}
		public Cp_PropertiesContext cp_Properties(int i) {
			return GetRuleContext<Cp_PropertiesContext>(i);
		}
		public Cp_NestedPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_NestedProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_NestedProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_NestedProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_NestedProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_NestedPropertyContext cp_NestedProperty() {
		Cp_NestedPropertyContext _localctx = new Cp_NestedPropertyContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_cp_NestedProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 573; Match(WS);
				}
			}

			State = 576; Match(BEGINPROPERTY);
			State = 577; Match(WS);
			State = 578; ambiguousIdentifier();
			State = 582;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 579; Match(LPAREN);
				State = 580; Match(INTEGERLITERAL);
				State = 581; Match(RPAREN);
				}
			}

			State = 586;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 584; Match(WS);
				State = 585; Match(GUID);
				}
			}

			State = 589;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 588; Match(NEWLINE);
				}
				}
				State = 591;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 598;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BEGINPROPERTY) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 594;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 593; cp_Properties();
					}
					}
					State = 596;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BEGINPROPERTY) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0) );
				}
			}

			State = 600; Match(ENDPROPERTY);
			State = 602;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 601; Match(NEWLINE);
				}
				}
				State = 604;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_ControlTypeContext : ParserRuleContext {
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public Cp_ControlTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_ControlType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_ControlType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_ControlType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_ControlType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_ControlTypeContext cp_ControlType() {
		Cp_ControlTypeContext _localctx = new Cp_ControlTypeContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_cp_ControlType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; complexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_ControlIdentifierContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public Cp_ControlIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_ControlIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_ControlIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_ControlIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_ControlIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_ControlIdentifierContext cp_ControlIdentifier() {
		Cp_ControlIdentifierContext _localctx = new Cp_ControlIdentifierContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_cp_ControlIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBlockContext moduleBlock() {
		ModuleBlockContext _localctx = new ModuleBlockContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_moduleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(VisualBasic6Parser.ATTRIBUTE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 612; Match(ATTRIBUTE);
			State = 613; Match(WS);
			State = 614; implicitCallStmt_InStmt();
			State = 616;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 615; Match(WS);
				}
			}

			State = 618; Match(EQ);
			State = 620;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 619; Match(WS);
				}
			}

			State = 622; literal();
			State = 633;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,61,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 624;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 623; Match(WS);
						}
					}

					State = 626; Match(COMMA);
					State = 628;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 627; Match(WS);
						}
					}

					State = 630; literal();
					}
					} 
				}
				State = 635;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,61,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStmtContext[] blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 636; blockStmt();
			State = 648;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 638;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 637; Match(NEWLINE);
						}
						}
						State = 640;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 643;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
					case 1:
						{
						State = 642; Match(WS);
						}
						break;
					}
					State = 645; blockStmt();
					}
					} 
				}
				State = 650;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public AppActivateStmtContext appActivateStmt() {
			return GetRuleContext<AppActivateStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public ChDirStmtContext chDirStmt() {
			return GetRuleContext<ChDirStmtContext>(0);
		}
		public ChDriveStmtContext chDriveStmt() {
			return GetRuleContext<ChDriveStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_blockStmt);
		try {
			State = 718;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 651; appActivateStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 652; attributeStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 653; beepStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 654; chDirStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 655; chDriveStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 656; closeStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 657; constStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 658; dateStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 659; deleteSettingStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 660; deftypeStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 661; doLoopStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 662; endStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 663; eraseStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 664; errorStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 665; exitStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 666; explicitCallStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 667; filecopyStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 668; forEachStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 669; forNextStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 670; getStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 671; goSubStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 672; goToStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 673; ifThenElseStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 674; implementsStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 675; inputStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 676; killStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 677; letStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 678; lineInputStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 679; lineLabel();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 680; loadStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 681; lockStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 682; lsetStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 683; macroIfThenElseStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 684; midStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 685; mkdirStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 686; nameStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 687; onErrorStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 688; onGoToStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 689; onGoSubStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 690; openStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 691; printStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 692; putStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 693; raiseEventStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 694; randomizeStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 695; redimStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 696; resetStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 697; resumeStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 698; returnStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 699; rmdirStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 700; rsetStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 701; savepictureStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 702; saveSettingStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 703; seekStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 704; selectCaseStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 705; sendkeysStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 706; setattrStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 707; setStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 708; stopStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 709; timeStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 710; unloadStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 711; unlockStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 712; variableStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 713; whileWendStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 714; widthStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 715; withStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 716; writeStmt();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 717; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppActivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VisualBasic6Parser.APPACTIVATE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public AppActivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appActivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAppActivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAppActivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppActivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppActivateStmtContext appActivateStmt() {
		AppActivateStmtContext _localctx = new AppActivateStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_appActivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720; Match(APPACTIVATE);
			State = 721; Match(WS);
			State = 722; valueStmt(0);
			State = 731;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 724;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 723; Match(WS);
					}
				}

				State = 726; Match(COMMA);
				State = 728;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					State = 727; Match(WS);
					}
					break;
				}
				State = 730; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VisualBasic6Parser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChDirStmtContext : ParserRuleContext {
		public ITerminalNode CHDIR() { return GetToken(VisualBasic6Parser.CHDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ChDirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chDirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterChDirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitChDirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChDirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChDirStmtContext chDirStmt() {
		ChDirStmtContext _localctx = new ChDirStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_chDirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735; Match(CHDIR);
			State = 736; Match(WS);
			State = 737; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChDriveStmtContext : ParserRuleContext {
		public ITerminalNode CHDRIVE() { return GetToken(VisualBasic6Parser.CHDRIVE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ChDriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chDriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterChDriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitChDriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChDriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChDriveStmtContext chDriveStmt() {
		ChDriveStmtContext _localctx = new ChDriveStmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_chDriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; Match(CHDRIVE);
			State = 740; Match(WS);
			State = 741; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(VisualBasic6Parser.CLOSE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 743; Match(CLOSE);
			State = 759;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 744; Match(WS);
				State = 745; valueStmt(0);
				State = 756;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,71,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 747;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 746; Match(WS);
							}
						}

						State = 749; Match(COMMA);
						State = 751;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
						case 1:
							{
							State = 750; Match(WS);
							}
							break;
						}
						State = 753; valueStmt(0);
						}
						} 
					}
					State = 758;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,71,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VisualBasic6Parser.CONST, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ConstSubStmtContext[] constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public PublicPrivateGlobalVisibilityContext publicPrivateGlobalVisibility() {
			return GetRuleContext<PublicPrivateGlobalVisibilityContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (GLOBAL - 72)) | (1L << (PRIVATE - 72)) | (1L << (PUBLIC - 72)))) != 0)) {
				{
				State = 761; publicPrivateGlobalVisibility();
				State = 762; Match(WS);
				}
			}

			State = 766; Match(CONST);
			State = 767; Match(WS);
			State = 768; constSubStmt();
			State = 779;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 770;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 769; Match(WS);
						}
					}

					State = 772; Match(COMMA);
					State = 774;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 773; Match(WS);
						}
					}

					State = 776; constSubStmt();
					}
					} 
				}
				State = 781;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782; ambiguousIdentifier();
			State = 784;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 783; typeHint();
				}
			}

			State = 788;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 786; Match(WS);
				State = 787; asTypeClause();
				}
				break;
			}
			State = 791;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 790; Match(WS);
				}
			}

			State = 793; Match(EQ);
			State = 795;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 794; Match(WS);
				}
				break;
			}
			State = 797; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799; Match(DATE);
			State = 801;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 800; Match(WS);
				}
			}

			State = 803; Match(EQ);
			State = 805;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 804; Match(WS);
				}
				break;
			}
			State = 807; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(VisualBasic6Parser.DECLARE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VisualBasic6Parser.LIB, 0); }
		public ITerminalNode[] STRINGLITERAL() { return GetTokens(VisualBasic6Parser.STRINGLITERAL); }
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VisualBasic6Parser.STRINGLITERAL, i);
		}
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public TypeHintContext[] typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ITerminalNode ALIAS() { return GetToken(VisualBasic6Parser.ALIAS, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 809; visibility();
				State = 810; Match(WS);
				}
			}

			State = 814; Match(DECLARE);
			State = 815; Match(WS);
			State = 821;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FUNCTION:
				{
				State = 816; Match(FUNCTION);
				State = 818;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
					{
					State = 817; typeHint();
					}
				}

				}
				break;
			case SUB:
				{
				State = 820; Match(SUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 823; Match(WS);
			State = 824; ambiguousIdentifier();
			State = 826;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 825; typeHint();
				}
			}

			State = 828; Match(WS);
			State = 829; Match(LIB);
			State = 830; Match(WS);
			State = 831; Match(STRINGLITERAL);
			State = 836;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 832; Match(WS);
				State = 833; Match(ALIAS);
				State = 834; Match(WS);
				State = 835; Match(STRINGLITERAL);
				}
				break;
			}
			State = 842;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 839;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 838; Match(WS);
					}
				}

				State = 841; argList();
				}
				break;
			}
			State = 846;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 844; Match(WS);
				State = 845; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetterrangeContext[] letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFBOOL() { return GetToken(VisualBasic6Parser.DEFBOOL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VisualBasic6Parser.DEFBYTE, 0); }
		public ITerminalNode DEFINT() { return GetToken(VisualBasic6Parser.DEFINT, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VisualBasic6Parser.DEFLNG, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VisualBasic6Parser.DEFCUR, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VisualBasic6Parser.DEFSNG, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VisualBasic6Parser.DEFDBL, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VisualBasic6Parser.DEFDEC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VisualBasic6Parser.DEFDATE, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VisualBasic6Parser.DEFSTR, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VisualBasic6Parser.DEFOBJ, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VisualBasic6Parser.DEFVAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 848;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 849; Match(WS);
			State = 850; letterrange();
			State = 861;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,93,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 852;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 851; Match(WS);
						}
					}

					State = 854; Match(COMMA);
					State = 856;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 855; Match(WS);
						}
					}

					State = 858; letterrange();
					}
					} 
				}
				State = 863;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,93,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public ITerminalNode DELETESETTING() { return GetToken(VisualBasic6Parser.DELETESETTING, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_deleteSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864; Match(DELETESETTING);
			State = 865; Match(WS);
			State = 866; valueStmt(0);
			State = 868;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 867; Match(WS);
				}
			}

			State = 870; Match(COMMA);
			State = 872;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				State = 871; Match(WS);
				}
				break;
			}
			State = 874; valueStmt(0);
			State = 883;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 876;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 875; Match(WS);
					}
				}

				State = 878; Match(COMMA);
				State = 880;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
				case 1:
					{
					State = 879; Match(WS);
					}
					break;
				}
				State = 882; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(VisualBasic6Parser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VisualBasic6Parser.LOOP, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode UNTIL() { return GetToken(VisualBasic6Parser.UNTIL, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_doLoopStmt);
		int _la;
		try {
			State = 938;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 885; Match(DO);
				State = 887;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 886; Match(NEWLINE);
					}
					}
					State = 889;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 897;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					State = 891; block();
					State = 893;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 892; Match(NEWLINE);
						}
						}
						State = 895;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 899; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 900; Match(DO);
				State = 901; Match(WS);
				State = 902;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 903; Match(WS);
				State = 904; valueStmt(0);
				State = 906;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 905; Match(NEWLINE);
					}
					}
					State = 908;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 916;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
				case 1:
					{
					State = 910; block();
					State = 912;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 911; Match(NEWLINE);
						}
						}
						State = 914;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 918; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 920; Match(DO);
				State = 922;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 921; Match(NEWLINE);
					}
					}
					State = 924;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				{
				State = 926; block();
				State = 928;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 927; Match(NEWLINE);
					}
					}
					State = 930;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				State = 932; Match(LOOP);
				State = 933; Match(WS);
				State = 934;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 935; Match(WS);
				State = 936; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(VisualBasic6Parser.ENUM, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_ENUM() { return GetToken(VisualBasic6Parser.END_ENUM, 0); }
		public PublicPrivateVisibilityContext publicPrivateVisibility() {
			return GetRuleContext<PublicPrivateVisibilityContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public EnumerationStmt_ConstantContext[] enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PRIVATE || _la==PUBLIC) {
				{
				State = 942; publicPrivateVisibility();
				State = 943; Match(WS);
				}
			}

			State = 947; Match(ENUM);
			State = 948; Match(WS);
			State = 949; ambiguousIdentifier();
			State = 951;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 950; Match(NEWLINE);
				}
				}
				State = 953;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 958;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 955; enumerationStmt_Constant();
				}
				}
				State = 960;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 961; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963; ambiguousIdentifier();
			State = 972;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==WS) {
				{
				State = 965;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 964; Match(WS);
					}
				}

				State = 967; Match(EQ);
				State = 969;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					State = 968; Match(WS);
					}
					break;
				}
				State = 971; valueStmt(0);
				}
			}

			State = 975;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 974; Match(NEWLINE);
				}
				}
				State = 977;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VisualBasic6Parser.ERASE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 979; Match(ERASE);
			State = 980; Match(WS);
			State = 981; valueStmt(0);
			State = 992;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,117,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 983;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 982; Match(WS);
						}
					}

					State = 985; Match(COMMA);
					State = 987;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
					case 1:
						{
						State = 986; Match(WS);
						}
						break;
					}
					State = 989; valueStmt(0);
					}
					} 
				}
				State = 994;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,117,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VisualBasic6Parser.ERROR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995; Match(ERROR);
			State = 996; Match(WS);
			State = 997; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(VisualBasic6Parser.EVENT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 999; visibility();
				State = 1000; Match(WS);
				}
			}

			State = 1004; Match(EVENT);
			State = 1005; Match(WS);
			State = 1006; ambiguousIdentifier();
			State = 1008;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1007; Match(WS);
				}
			}

			State = 1010; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_DO() { return GetToken(VisualBasic6Parser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VisualBasic6Parser.EXIT_FOR, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VisualBasic6Parser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VisualBasic6Parser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VisualBasic6Parser.EXIT_SUB, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012;
			_la = _input.La(1);
			if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (EXIT_DO - 61)) | (1L << (EXIT_FOR - 61)) | (1L << (EXIT_FUNCTION - 61)) | (1L << (EXIT_PROPERTY - 61)) | (1L << (EXIT_SUB - 61)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public ITerminalNode FILECOPY() { return GetToken(VisualBasic6Parser.FILECOPY, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014; Match(FILECOPY);
			State = 1015; Match(WS);
			State = 1016; valueStmt(0);
			State = 1018;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1017; Match(WS);
				}
			}

			State = 1020; Match(COMMA);
			State = 1022;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				State = 1021; Match(WS);
				}
				break;
			}
			State = 1024; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode EACH() { return GetToken(VisualBasic6Parser.EACH, 0); }
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(VisualBasic6Parser.IN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026; Match(FOR);
			State = 1027; Match(WS);
			State = 1028; Match(EACH);
			State = 1029; Match(WS);
			State = 1030; ambiguousIdentifier();
			State = 1032;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 1031; typeHint();
				}
			}

			State = 1034; Match(WS);
			State = 1035; Match(IN);
			State = 1036; Match(WS);
			State = 1037; valueStmt(0);
			State = 1039;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1038; Match(NEWLINE);
				}
				}
				State = 1041;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1049;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				State = 1043; block();
				State = 1045;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1044; Match(NEWLINE);
					}
					}
					State = 1047;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1051; Match(NEXT);
			State = 1054;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				State = 1052; Match(WS);
				State = 1053; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public TypeHintContext[] typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode STEP() { return GetToken(VisualBasic6Parser.STEP, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056; Match(FOR);
			State = 1057; Match(WS);
			State = 1058; ambiguousIdentifier();
			State = 1060;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 1059; typeHint();
				}
			}

			State = 1064;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				State = 1062; Match(WS);
				State = 1063; asTypeClause();
				}
				break;
			}
			State = 1067;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1066; Match(WS);
				}
			}

			State = 1069; Match(EQ);
			State = 1071;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				State = 1070; Match(WS);
				}
				break;
			}
			State = 1073; valueStmt(0);
			State = 1074; Match(WS);
			State = 1075; Match(TO);
			State = 1076; Match(WS);
			State = 1077; valueStmt(0);
			State = 1082;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1078; Match(WS);
				State = 1079; Match(STEP);
				State = 1080; Match(WS);
				State = 1081; valueStmt(0);
				}
			}

			State = 1085;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1084; Match(NEWLINE);
				}
				}
				State = 1087;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1095;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				State = 1089; block();
				State = 1091;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1090; Match(NEWLINE);
					}
					}
					State = 1093;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1097; Match(NEXT);
			State = 1103;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				State = 1098; Match(WS);
				State = 1099; ambiguousIdentifier();
				State = 1101;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					State = 1100; typeHint();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_FUNCTION() { return GetToken(VisualBasic6Parser.END_FUNCTION, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1108;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 1105; visibility();
				State = 1106; Match(WS);
				}
			}

			State = 1112;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1110; Match(STATIC);
				State = 1111; Match(WS);
				}
			}

			State = 1114; Match(FUNCTION);
			State = 1115; Match(WS);
			State = 1116; ambiguousIdentifier();
			State = 1121;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				State = 1118;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1117; Match(WS);
					}
				}

				State = 1120; argList();
				}
				break;
			}
			State = 1125;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1123; Match(WS);
				State = 1124; asTypeClause();
				}
			}

			State = 1128;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1127; Match(NEWLINE);
				}
				}
				State = 1130;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1138;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1132; block();
				State = 1134;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1133; Match(NEWLINE);
					}
					}
					State = 1136;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1140; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(VisualBasic6Parser.GET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142; Match(GET);
			State = 1143; Match(WS);
			State = 1144; valueStmt(0);
			State = 1146;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1145; Match(WS);
				}
			}

			State = 1148; Match(COMMA);
			State = 1150;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1149; Match(WS);
				}
				break;
			}
			State = 1153;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				State = 1152; valueStmt(0);
				}
				break;
			}
			State = 1156;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1155; Match(WS);
				}
			}

			State = 1158; Match(COMMA);
			State = 1160;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				State = 1159; Match(WS);
				}
				break;
			}
			State = 1162; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1164; Match(GOSUB);
			State = 1165; Match(WS);
			State = 1166; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1168; Match(GOTO);
			State = 1169; Match(WS);
			State = 1170; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public ITerminalNode END_IF() { return GetToken(VisualBasic6Parser.END_IF, 0); }
		public IfElseIfBlockStmtContext[] ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public BlockStmtContext[] blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 1197;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1172; Match(IF);
				State = 1173; Match(WS);
				State = 1174; ifConditionStmt();
				State = 1175; Match(WS);
				State = 1176; Match(THEN);
				State = 1177; Match(WS);
				State = 1178; blockStmt();
				State = 1183;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					State = 1179; Match(WS);
					State = 1180; Match(ELSE);
					State = 1181; Match(WS);
					State = 1182; blockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1185; ifBlockStmt();
				State = 1189;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 1186; ifElseIfBlockStmt();
					}
					}
					State = 1191;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1193;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 1192; ifElseBlockStmt();
					}
				}

				State = 1195; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_ifBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1199; Match(IF);
			State = 1200; Match(WS);
			State = 1201; ifConditionStmt();
			State = 1202; Match(WS);
			State = 1203; Match(THEN);
			State = 1205;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1204; Match(NEWLINE);
				}
				}
				State = 1207;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1215;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				State = 1209; block();
				State = 1211;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1210; Match(NEWLINE);
					}
					}
					State = 1213;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1217; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VisualBasic6Parser.ELSEIF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_ifElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219; Match(ELSEIF);
			State = 1220; Match(WS);
			State = 1221; ifConditionStmt();
			State = 1222; Match(WS);
			State = 1223; Match(THEN);
			State = 1225;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1224; Match(NEWLINE);
				}
				}
				State = 1227;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1235;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1229; block();
				State = 1231;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1230; Match(NEWLINE);
					}
					}
					State = 1233;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_ifElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237; Match(ELSE);
			State = 1239;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1238; Match(NEWLINE);
				}
				}
				State = 1241;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1249;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1243; block();
				State = 1245;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1244; Match(NEWLINE);
					}
					}
					State = 1247;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public ITerminalNode IMPLEMENTS() { return GetToken(VisualBasic6Parser.IMPLEMENTS, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251; Match(IMPLEMENTS);
			State = 1252; Match(WS);
			State = 1253; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255; Match(INPUT);
			State = 1256; Match(WS);
			State = 1257; valueStmt(0);
			State = 1266;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1259;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1258; Match(WS);
						}
					}

					State = 1261; Match(COMMA);
					State = 1263;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
					case 1:
						{
						State = 1262; Match(WS);
						}
						break;
					}
					State = 1265; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1268;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,165,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ITerminalNode KILL() { return GetToken(VisualBasic6Parser.KILL, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1270; Match(KILL);
			State = 1271; Match(WS);
			State = 1272; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode PLUS_EQ() { return GetToken(VisualBasic6Parser.PLUS_EQ, 0); }
		public ITerminalNode MINUS_EQ() { return GetToken(VisualBasic6Parser.MINUS_EQ, 0); }
		public ITerminalNode LET() { return GetToken(VisualBasic6Parser.LET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1276;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				State = 1274; Match(LET);
				State = 1275; Match(WS);
				}
				break;
			}
			State = 1278; implicitCallStmt_InStmt();
			State = 1280;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1279; Match(WS);
				}
			}

			State = 1282;
			_la = _input.La(1);
			if ( !(((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (EQ - 186)) | (1L << (MINUS_EQ - 186)) | (1L << (PLUS_EQ - 186)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1284;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 1283; Match(WS);
				}
				break;
			}
			State = 1286; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public ITerminalNode LINE_INPUT() { return GetToken(VisualBasic6Parser.LINE_INPUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1288; Match(LINE_INPUT);
			State = 1289; Match(WS);
			State = 1290; valueStmt(0);
			State = 1292;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1291; Match(WS);
				}
			}

			State = 1294; Match(COMMA);
			State = 1296;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 1295; Match(WS);
				}
				break;
			}
			State = 1298; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ITerminalNode LOAD() { return GetToken(VisualBasic6Parser.LOAD, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1300; Match(LOAD);
			State = 1301; Match(WS);
			State = 1302; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public ITerminalNode LOCK() { return GetToken(VisualBasic6Parser.LOCK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1304; Match(LOCK);
			State = 1305; Match(WS);
			State = 1306; valueStmt(0);
			State = 1321;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				State = 1308;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1307; Match(WS);
					}
				}

				State = 1310; Match(COMMA);
				State = 1312;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
				case 1:
					{
					State = 1311; Match(WS);
					}
					break;
				}
				State = 1314; valueStmt(0);
				State = 1319;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,173,_ctx) ) {
				case 1:
					{
					State = 1315; Match(WS);
					State = 1316; Match(TO);
					State = 1317; Match(WS);
					State = 1318; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public ITerminalNode LSET() { return GetToken(VisualBasic6Parser.LSET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1323; Match(LSET);
			State = 1324; Match(WS);
			State = 1325; implicitCallStmt_InStmt();
			State = 1327;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1326; Match(WS);
				}
			}

			State = 1329; Match(EQ);
			State = 1331;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 1330; Match(WS);
				}
				break;
			}
			State = 1333; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfThenElseStmtContext : ParserRuleContext {
		public MacroIfBlockStmtContext macroIfBlockStmt() {
			return GetRuleContext<MacroIfBlockStmtContext>(0);
		}
		public ITerminalNode MACRO_END_IF() { return GetToken(VisualBasic6Parser.MACRO_END_IF, 0); }
		public MacroElseIfBlockStmtContext[] macroElseIfBlockStmt() {
			return GetRuleContexts<MacroElseIfBlockStmtContext>();
		}
		public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i) {
			return GetRuleContext<MacroElseIfBlockStmtContext>(i);
		}
		public MacroElseBlockStmtContext macroElseBlockStmt() {
			return GetRuleContext<MacroElseBlockStmtContext>(0);
		}
		public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfThenElseStmtContext macroIfThenElseStmt() {
		MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_macroIfThenElseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335; macroIfBlockStmt();
			State = 1339;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MACRO_ELSEIF) {
				{
				{
				State = 1336; macroElseIfBlockStmt();
				}
				}
				State = 1341;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1343;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MACRO_ELSE) {
				{
				State = 1342; macroElseBlockStmt();
				}
			}

			State = 1345; Match(MACRO_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_IF() { return GetToken(VisualBasic6Parser.MACRO_IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfBlockStmtContext macroIfBlockStmt() {
		MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_macroIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1347; Match(MACRO_IF);
			State = 1348; Match(WS);
			State = 1349; ifConditionStmt();
			State = 1350; Match(WS);
			State = 1351; Match(THEN);
			State = 1353;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1352; Match(NEWLINE);
				}
				}
				State = 1355;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1363;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1357; moduleBody();
				State = 1359;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1358; Match(NEWLINE);
					}
					}
					State = 1361;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_ELSEIF() { return GetToken(VisualBasic6Parser.MACRO_ELSEIF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseIfBlockStmtContext macroElseIfBlockStmt() {
		MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_macroElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365; Match(MACRO_ELSEIF);
			State = 1366; Match(WS);
			State = 1367; ifConditionStmt();
			State = 1368; Match(WS);
			State = 1369; Match(THEN);
			State = 1371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1370; Match(NEWLINE);
				}
				}
				State = 1373;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1381;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1375; moduleBody();
				State = 1377;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1376; Match(NEWLINE);
					}
					}
					State = 1379;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_ELSE() { return GetToken(VisualBasic6Parser.MACRO_ELSE, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseBlockStmtContext macroElseBlockStmt() {
		MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_macroElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1383; Match(MACRO_ELSE);
			State = 1385;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1384; Match(NEWLINE);
				}
				}
				State = 1387;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1395;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1389; moduleBody();
				State = 1391;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1390; Match(NEWLINE);
					}
					}
					State = 1393;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public ITerminalNode MID() { return GetToken(VisualBasic6Parser.MID, 0); }
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1397; Match(MID);
			State = 1399;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1398; Match(WS);
				}
			}

			State = 1401; Match(LPAREN);
			State = 1403;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				State = 1402; Match(WS);
				}
				break;
			}
			State = 1405; argsCall();
			State = 1407;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1406; Match(WS);
				}
			}

			State = 1409; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ITerminalNode MKDIR() { return GetToken(VisualBasic6Parser.MKDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1411; Match(MKDIR);
			State = 1412; Match(WS);
			State = 1413; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(VisualBasic6Parser.NAME, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1415; Match(NAME);
			State = 1416; Match(WS);
			State = 1417; valueStmt(0);
			State = 1418; Match(WS);
			State = 1419; Match(AS);
			State = 1420; Match(WS);
			State = 1421; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VisualBasic6Parser.ON_ERROR, 0); }
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VisualBasic6Parser.ON_LOCAL_ERROR, 0); }
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public ITerminalNode COLON() { return GetToken(VisualBasic6Parser.COLON, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1423;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1424; Match(WS);
			State = 1434;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1425; Match(GOTO);
				State = 1426; Match(WS);
				State = 1427; valueStmt(0);
				State = 1429;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 1428; Match(COLON);
					}
				}

				}
				break;
			case RESUME:
				{
				State = 1431; Match(RESUME);
				State = 1432; Match(WS);
				State = 1433; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436; Match(ON);
			State = 1437; Match(WS);
			State = 1438; valueStmt(0);
			State = 1439; Match(WS);
			State = 1440; Match(GOTO);
			State = 1441; Match(WS);
			State = 1442; valueStmt(0);
			State = 1453;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,195,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1444;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1443; Match(WS);
						}
					}

					State = 1446; Match(COMMA);
					State = 1448;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
					case 1:
						{
						State = 1447; Match(WS);
						}
						break;
					}
					State = 1450; valueStmt(0);
					}
					} 
				}
				State = 1455;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,195,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1456; Match(ON);
			State = 1457; Match(WS);
			State = 1458; valueStmt(0);
			State = 1459; Match(WS);
			State = 1460; Match(GOSUB);
			State = 1461; Match(WS);
			State = 1462; valueStmt(0);
			State = 1473;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,198,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1464;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1463; Match(WS);
						}
					}

					State = 1466; Match(COMMA);
					State = 1468;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
					case 1:
						{
						State = 1467; Match(WS);
						}
						break;
					}
					State = 1470; valueStmt(0);
					}
					} 
				}
				State = 1475;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,198,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(VisualBasic6Parser.OPEN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VisualBasic6Parser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VisualBasic6Parser.OUTPUT, 0); }
		public ITerminalNode RANDOM() { return GetToken(VisualBasic6Parser.RANDOM, 0); }
		public ITerminalNode ACCESS() { return GetToken(VisualBasic6Parser.ACCESS, 0); }
		public ITerminalNode LEN() { return GetToken(VisualBasic6Parser.LEN, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode READ() { return GetToken(VisualBasic6Parser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VisualBasic6Parser.READ_WRITE, 0); }
		public ITerminalNode SHARED() { return GetToken(VisualBasic6Parser.SHARED, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VisualBasic6Parser.LOCK_READ, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VisualBasic6Parser.LOCK_WRITE, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VisualBasic6Parser.LOCK_READ_WRITE, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1476; Match(OPEN);
			State = 1477; Match(WS);
			State = 1478; valueStmt(0);
			State = 1479; Match(WS);
			State = 1480; Match(FOR);
			State = 1481; Match(WS);
			State = 1482;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INPUT - 79)) | (1L << (OUTPUT - 79)) | (1L << (RANDOM - 79)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1487;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				State = 1483; Match(WS);
				State = 1484; Match(ACCESS);
				State = 1485; Match(WS);
				State = 1486;
				_la = _input.La(1);
				if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (READ - 134)) | (1L << (READ_WRITE - 134)) | (1L << (WRITE - 134)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 1491;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				State = 1489; Match(WS);
				State = 1490;
				_la = _input.La(1);
				if ( !(((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (LOCK_READ - 92)) | (1L << (LOCK_WRITE - 92)) | (1L << (LOCK_READ_WRITE - 92)) | (1L << (SHARED - 92)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 1493; Match(WS);
			State = 1494; Match(AS);
			State = 1495; Match(WS);
			State = 1496; valueStmt(0);
			State = 1507;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				State = 1497; Match(WS);
				State = 1498; Match(LEN);
				State = 1500;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1499; Match(WS);
					}
				}

				State = 1502; Match(EQ);
				State = 1504;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
				case 1:
					{
					State = 1503; Match(WS);
					}
					break;
				}
				State = 1506; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public OutputList_ExpressionContext[] outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(VisualBasic6Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VisualBasic6Parser.SEMICOLON, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1542;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1509; outputList_Expression();
				State = 1522;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,207,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1511;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1510; Match(WS);
							}
						}

						State = 1513;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1515;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
						case 1:
							{
							State = 1514; Match(WS);
							}
							break;
						}
						State = 1518;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
						case 1:
							{
							State = 1517; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1524;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,207,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1526;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					State = 1525; outputList_Expression();
					}
					break;
				}
				State = 1538;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1529;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1528; Match(WS);
							}
						}

						State = 1531;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1533;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
						case 1:
							{
							State = 1532; Match(WS);
							}
							break;
						}
						State = 1536;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
						case 1:
							{
							State = 1535; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1540;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,212,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode SPC() { return GetToken(VisualBasic6Parser.SPC, 0); }
		public ITerminalNode TAB() { return GetToken(VisualBasic6Parser.TAB, 0); }
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_outputList_Expression);
		int _la;
		try {
			State = 1561;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1544; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1545;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1559;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,217,_ctx) ) {
				case 1:
					{
					State = 1547;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1546; Match(WS);
						}
					}

					State = 1549; Match(LPAREN);
					State = 1551;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
					case 1:
						{
						State = 1550; Match(WS);
						}
						break;
					}
					State = 1553; argsCall();
					State = 1555;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1554; Match(WS);
						}
					}

					State = 1557; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VisualBasic6Parser.PRINT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1563; Match(PRINT);
			State = 1564; Match(WS);
			State = 1565; valueStmt(0);
			State = 1567;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1566; Match(WS);
				}
			}

			State = 1569; Match(COMMA);
			State = 1574;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				State = 1571;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					State = 1570; Match(WS);
					}
					break;
				}
				State = 1573; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_GET() { return GetToken(VisualBasic6Parser.PROPERTY_GET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1579;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 1576; visibility();
				State = 1577; Match(WS);
				}
			}

			State = 1583;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1581; Match(STATIC);
				State = 1582; Match(WS);
				}
			}

			State = 1585; Match(PROPERTY_GET);
			State = 1586; Match(WS);
			State = 1587; ambiguousIdentifier();
			State = 1589;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 1588; typeHint();
				}
			}

			State = 1595;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				State = 1592;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1591; Match(WS);
					}
				}

				State = 1594; argList();
				}
				break;
			}
			State = 1599;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1597; Match(WS);
				State = 1598; asTypeClause();
				}
			}

			State = 1602;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1601; Match(NEWLINE);
				}
				}
				State = 1604;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1612;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1606; block();
				State = 1608;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1607; Match(NEWLINE);
					}
					}
					State = 1610;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1614; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_SET() { return GetToken(VisualBasic6Parser.PROPERTY_SET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1619;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 1616; visibility();
				State = 1617; Match(WS);
				}
			}

			State = 1623;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1621; Match(STATIC);
				State = 1622; Match(WS);
				}
			}

			State = 1625; Match(PROPERTY_SET);
			State = 1626; Match(WS);
			State = 1627; ambiguousIdentifier();
			State = 1632;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1629;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1628; Match(WS);
					}
				}

				State = 1631; argList();
				}
			}

			State = 1635;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1634; Match(NEWLINE);
				}
				}
				State = 1637;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1645;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1639; block();
				State = 1641;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1640; Match(NEWLINE);
					}
					}
					State = 1643;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1647; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VisualBasic6Parser.PROPERTY_LET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1652;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 1649; visibility();
				State = 1650; Match(WS);
				}
			}

			State = 1656;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1654; Match(STATIC);
				State = 1655; Match(WS);
				}
			}

			State = 1658; Match(PROPERTY_LET);
			State = 1659; Match(WS);
			State = 1660; ambiguousIdentifier();
			State = 1665;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1662;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1661; Match(WS);
					}
				}

				State = 1664; argList();
				}
			}

			State = 1668;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1667; Match(NEWLINE);
				}
				}
				State = 1670;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1678;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1672; block();
				State = 1674;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1673; Match(NEWLINE);
					}
					}
					State = 1676;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1680; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public ITerminalNode PUT() { return GetToken(VisualBasic6Parser.PUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1682; Match(PUT);
			State = 1683; Match(WS);
			State = 1684; valueStmt(0);
			State = 1686;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1685; Match(WS);
				}
			}

			State = 1688; Match(COMMA);
			State = 1690;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				State = 1689; Match(WS);
				}
				break;
			}
			State = 1693;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				State = 1692; valueStmt(0);
				}
				break;
			}
			State = 1696;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1695; Match(WS);
				}
			}

			State = 1698; Match(COMMA);
			State = 1700;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
			case 1:
				{
				State = 1699; Match(WS);
				}
				break;
			}
			State = 1702; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public ITerminalNode RAISEEVENT() { return GetToken(VisualBasic6Parser.RAISEEVENT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704; Match(RAISEEVENT);
			State = 1705; Match(WS);
			State = 1706; ambiguousIdentifier();
			State = 1721;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				State = 1708;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1707; Match(WS);
					}
				}

				State = 1710; Match(LPAREN);
				State = 1712;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					State = 1711; Match(WS);
					}
					break;
				}
				State = 1718;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)) | (1L << (COMMA - 130)) | (1L << (DOT - 130)) | (1L << (EXCLAMATIONMARK - 130)) | (1L << (LPAREN - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MINUS - 195)) | (1L << (PLUS - 195)) | (1L << (SEMICOLON - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (OCTALLITERAL - 195)) | (1L << (IDENTIFIER - 195)) | (1L << (WS - 195)))) != 0)) {
					{
					State = 1714; argsCall();
					State = 1716;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1715; Match(WS);
						}
					}

					}
				}

				State = 1720; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ITerminalNode RANDOMIZE() { return GetToken(VisualBasic6Parser.RANDOMIZE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1723; Match(RANDOMIZE);
			State = 1726;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				State = 1724; Match(WS);
				State = 1725; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public ITerminalNode REDIM() { return GetToken(VisualBasic6Parser.REDIM, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public RedimSubStmtContext[] redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public ITerminalNode PRESERVE() { return GetToken(VisualBasic6Parser.PRESERVE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728; Match(REDIM);
			State = 1729; Match(WS);
			State = 1732;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
			case 1:
				{
				State = 1730; Match(PRESERVE);
				State = 1731; Match(WS);
				}
				break;
			}
			State = 1734; redimSubStmt();
			State = 1745;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,259,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1736;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1735; Match(WS);
						}
					}

					State = 1738; Match(COMMA);
					State = 1740;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
					case 1:
						{
						State = 1739; Match(WS);
						}
						break;
					}
					State = 1742; redimSubStmt();
					}
					} 
				}
				State = 1747;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,259,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1748; implicitCallStmt_InStmt();
			State = 1750;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1749; Match(WS);
				}
			}

			State = 1752; Match(LPAREN);
			State = 1754;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				State = 1753; Match(WS);
				}
				break;
			}
			State = 1756; subscripts();
			State = 1758;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1757; Match(WS);
				}
			}

			State = 1760; Match(RPAREN);
			State = 1763;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				State = 1761; Match(WS);
				State = 1762; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VisualBasic6Parser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767; Match(RESUME);
			State = 1773;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
			case 1:
				{
				State = 1768; Match(WS);
				State = 1771;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					State = 1769; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1770; ambiguousIdentifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VisualBasic6Parser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1775; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ITerminalNode RMDIR() { return GetToken(VisualBasic6Parser.RMDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777; Match(RMDIR);
			State = 1778; Match(WS);
			State = 1779; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public ITerminalNode RSET() { return GetToken(VisualBasic6Parser.RSET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1781; Match(RSET);
			State = 1782; Match(WS);
			State = 1783; implicitCallStmt_InStmt();
			State = 1785;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1784; Match(WS);
				}
			}

			State = 1787; Match(EQ);
			State = 1789;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				State = 1788; Match(WS);
				}
				break;
			}
			State = 1791; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public ITerminalNode SAVEPICTURE() { return GetToken(VisualBasic6Parser.SAVEPICTURE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1793; Match(SAVEPICTURE);
			State = 1794; Match(WS);
			State = 1795; valueStmt(0);
			State = 1797;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1796; Match(WS);
				}
			}

			State = 1799; Match(COMMA);
			State = 1801;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				State = 1800; Match(WS);
				}
				break;
			}
			State = 1803; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public ITerminalNode SAVESETTING() { return GetToken(VisualBasic6Parser.SAVESETTING, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1805; Match(SAVESETTING);
			State = 1806; Match(WS);
			State = 1807; valueStmt(0);
			State = 1809;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1808; Match(WS);
				}
			}

			State = 1811; Match(COMMA);
			State = 1813;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				State = 1812; Match(WS);
				}
				break;
			}
			State = 1815; valueStmt(0);
			State = 1817;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1816; Match(WS);
				}
			}

			State = 1819; Match(COMMA);
			State = 1821;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				State = 1820; Match(WS);
				}
				break;
			}
			State = 1823; valueStmt(0);
			State = 1825;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1824; Match(WS);
				}
			}

			State = 1827; Match(COMMA);
			State = 1829;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				State = 1828; Match(WS);
				}
				break;
			}
			State = 1831; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public ITerminalNode SEEK() { return GetToken(VisualBasic6Parser.SEEK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1833; Match(SEEK);
			State = 1834; Match(WS);
			State = 1835; valueStmt(0);
			State = 1837;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1836; Match(WS);
				}
			}

			State = 1839; Match(COMMA);
			State = 1841;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
			case 1:
				{
				State = 1840; Match(WS);
				}
				break;
			}
			State = 1843; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(VisualBasic6Parser.SELECT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode END_SELECT() { return GetToken(VisualBasic6Parser.END_SELECT, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SC_CaseContext[] sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845; Match(SELECT);
			State = 1846; Match(WS);
			State = 1847; Match(CASE);
			State = 1848; Match(WS);
			State = 1849; valueStmt(0);
			State = 1851;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1850; Match(NEWLINE);
				}
				}
				State = 1853;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1858;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1855; sC_Case();
				}
				}
				State = 1860;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1862;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1861; Match(WS);
				}
			}

			State = 1864; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VisualBasic6Parser.COLON, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_sC_Case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1866; Match(CASE);
			State = 1867; Match(WS);
			State = 1868; sC_Cond();
			State = 1870;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				State = 1869; Match(WS);
				}
				break;
			}
			State = 1886;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				State = 1873;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 1872; Match(COLON);
					}
				}

				State = 1878;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 1875; Match(NEWLINE);
					}
					}
					State = 1880;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 1882;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1881; Match(NEWLINE);
					}
					}
					State = 1884;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1894;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				State = 1888; block();
				State = 1890;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1889; Match(NEWLINE);
					}
					}
					State = 1892;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondExprContext : SC_CondContext {
		public SC_CondExprContext[] sC_CondExpr() {
			return GetRuleContexts<SC_CondExprContext>();
		}
		public SC_CondExprContext sC_CondExpr(int i) {
			return GetRuleContext<SC_CondExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public CaseCondExprContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1911;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1896; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1897; sC_CondExpr();
				State = 1908;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,290,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1899;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1898; Match(WS);
							}
						}

						State = 1901; Match(COMMA);
						State = 1903;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
						case 1:
							{
							State = 1902; Match(WS);
							}
							break;
						}
						State = 1905; sC_CondExpr();
						}
						} 
					}
					State = 1910;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,290,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondExprContext : ParserRuleContext {
		public SC_CondExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_CondExpr; } }
	 
		public SC_CondExprContext() { }
		public virtual void CopyFrom(SC_CondExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondExprValueContext : SC_CondExprContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public CaseCondExprValueContext(SC_CondExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExprValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExprValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExprValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondExprIsContext : SC_CondExprContext {
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public CaseCondExprIsContext(SC_CondExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExprIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExprIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExprIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondExprToContext : SC_CondExprContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public CaseCondExprToContext(SC_CondExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExprTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExprTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExprTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondExprContext sC_CondExpr() {
		SC_CondExprContext _localctx = new SC_CondExprContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_sC_CondExpr);
		int _la;
		try {
			State = 1930;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
			case 1:
				_localctx = new CaseCondExprIsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1913; Match(IS);
				State = 1915;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1914; Match(WS);
					}
				}

				State = 1917; comparisonOperator();
				State = 1919;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					State = 1918; Match(WS);
					}
					break;
				}
				State = 1921; valueStmt(0);
				}
				break;

			case 2:
				_localctx = new CaseCondExprValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1923; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondExprToContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1924; valueStmt(0);
				State = 1925; Match(WS);
				State = 1926; Match(TO);
				State = 1927; Match(WS);
				State = 1928; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public ITerminalNode SENDKEYS() { return GetToken(VisualBasic6Parser.SENDKEYS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1932; Match(SENDKEYS);
			State = 1933; Match(WS);
			State = 1934; valueStmt(0);
			State = 1943;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 1936;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1935; Match(WS);
					}
				}

				State = 1938; Match(COMMA);
				State = 1940;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					State = 1939; Match(WS);
					}
					break;
				}
				State = 1942; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public ITerminalNode SETATTR() { return GetToken(VisualBasic6Parser.SETATTR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1945; Match(SETATTR);
			State = 1946; Match(WS);
			State = 1947; valueStmt(0);
			State = 1949;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1948; Match(WS);
				}
			}

			State = 1951; Match(COMMA);
			State = 1953;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				State = 1952; Match(WS);
				}
				break;
			}
			State = 1955; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(VisualBasic6Parser.SET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1957; Match(SET);
			State = 1958; Match(WS);
			State = 1959; implicitCallStmt_InStmt();
			State = 1961;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1960; Match(WS);
				}
			}

			State = 1963; Match(EQ);
			State = 1965;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				State = 1964; Match(WS);
				}
				break;
			}
			State = 1967; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VisualBasic6Parser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1969; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_SUB() { return GetToken(VisualBasic6Parser.END_SUB, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 1971; visibility();
				State = 1972; Match(WS);
				}
			}

			State = 1978;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1976; Match(STATIC);
				State = 1977; Match(WS);
				}
			}

			State = 1980; Match(SUB);
			State = 1981; Match(WS);
			State = 1982; ambiguousIdentifier();
			State = 1987;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1984;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1983; Match(WS);
					}
				}

				State = 1986; argList();
				}
			}

			State = 1990;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1989; Match(NEWLINE);
				}
				}
				State = 1992;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2000;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1994; block();
				State = 1996;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1995; Match(NEWLINE);
					}
					}
					State = 1998;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 2002; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public ITerminalNode TIME() { return GetToken(VisualBasic6Parser.TIME, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2004; Match(TIME);
			State = 2006;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2005; Match(WS);
				}
			}

			State = 2008; Match(EQ);
			State = 2010;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				State = 2009; Match(WS);
				}
				break;
			}
			State = 2012; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(VisualBasic6Parser.TYPE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VisualBasic6Parser.END_TYPE, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public TypeStmt_ElementContext[] typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 2014; visibility();
				State = 2015; Match(WS);
				}
			}

			State = 2019; Match(TYPE);
			State = 2020; Match(WS);
			State = 2021; ambiguousIdentifier();
			State = 2023;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2022; Match(NEWLINE);
				}
				}
				State = 2025;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2030;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 2027; typeStmt_Element();
				}
				}
				State = 2032;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2033; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2035; ambiguousIdentifier();
			State = 2050;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				State = 2037;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2036; Match(WS);
					}
				}

				State = 2039; Match(LPAREN);
				State = 2044;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					State = 2041;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
					case 1:
						{
						State = 2040; Match(WS);
						}
						break;
					}
					State = 2043; subscripts();
					}
					break;
				}
				State = 2047;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2046; Match(WS);
					}
				}

				State = 2049; Match(RPAREN);
				}
				break;
			}
			State = 2054;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2052; Match(WS);
				State = 2053; asTypeClause();
				}
			}

			State = 2057;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2056; Match(NEWLINE);
				}
				}
				State = 2059;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public ITerminalNode TYPEOF() { return GetToken(VisualBasic6Parser.TYPEOF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2061; Match(TYPEOF);
			State = 2062; Match(WS);
			State = 2063; valueStmt(0);
			State = 2068;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				State = 2064; Match(WS);
				State = 2065; Match(IS);
				State = 2066; Match(WS);
				State = 2067; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ITerminalNode UNLOAD() { return GetToken(VisualBasic6Parser.UNLOAD, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2070; Match(UNLOAD);
			State = 2071; Match(WS);
			State = 2072; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public ITerminalNode UNLOCK() { return GetToken(VisualBasic6Parser.UNLOCK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074; Match(UNLOCK);
			State = 2075; Match(WS);
			State = 2076; valueStmt(0);
			State = 2091;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				State = 2078;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2077; Match(WS);
					}
				}

				State = 2080; Match(COMMA);
				State = 2082;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					State = 2081; Match(WS);
					}
					break;
				}
				State = 2084; valueStmt(0);
				State = 2089;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					State = 2085; Match(WS);
					State = 2086; Match(TO);
					State = 2087; Match(WS);
					State = 2088; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(VisualBasic6Parser.PLUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLtContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode LT() { return GetToken(VisualBasic6Parser.LT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsLtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ITerminalNode ADDRESSOF() { return GetToken(VisualBasic6Parser.ADDRESSOF, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(VisualBasic6Parser.MULT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VisualBasic6Parser.ASSIGN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLikeContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public VsLikeContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLike(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsDivContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VisualBasic6Parser.DIV, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPlusContext : ValueStmtContext {
		public ITerminalNode PLUS() { return GetToken(VisualBasic6Parser.PLUS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public VsPlusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GEQ() { return GetToken(VisualBasic6Parser.GEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsGeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsGeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsGeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VisualBasic6Parser.NOT, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode NEQ() { return GetToken(VisualBasic6Parser.NEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsNeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VisualBasic6Parser.XOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode AND() { return GetToken(VisualBasic6Parser.AND, 0); }
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(VisualBasic6Parser.LEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsLeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VisualBasic6Parser.POW, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIsContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public VsIsContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VisualBasic6Parser.MOD, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode AMPERSAND() { return GetToken(VisualBasic6Parser.AMPERSAND, 0); }
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode OR() { return GetToken(VisualBasic6Parser.OR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMinusContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsMinusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode EQV() { return GetToken(VisualBasic6Parser.EQV, 0); }
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode IMP() { return GetToken(VisualBasic6Parser.IMP, 0); }
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGtContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GT() { return GetToken(VisualBasic6Parser.GT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsGtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsGt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsGt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsEqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 218;
		EnterRecursionRule(_localctx, 218, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2150;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2094; literal();
				}
				break;

			case 2:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2095; implicitCallStmt_InStmt();
				}
				break;

			case 3:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2096; Match(LPAREN);
				State = 2098;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					State = 2097; Match(WS);
					}
					break;
				}
				State = 2100; valueStmt(0);
				State = 2111;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,329,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2102;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2101; Match(WS);
							}
						}

						State = 2104; Match(COMMA);
						State = 2106;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
						case 1:
							{
							State = 2105; Match(WS);
							}
							break;
						}
						State = 2108; valueStmt(0);
						}
						} 
					}
					State = 2113;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,329,_ctx);
				}
				State = 2115;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2114; Match(WS);
					}
				}

				State = 2117; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2119; Match(NEW);
				State = 2120; Match(WS);
				State = 2121; valueStmt(28);
				}
				break;

			case 5:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2122; typeOfStmt();
				}
				break;

			case 6:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2123; midStmt();
				}
				break;

			case 7:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2124; Match(ADDRESSOF);
				State = 2125; Match(WS);
				State = 2126; valueStmt(25);
				}
				break;

			case 8:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2127; implicitCallStmt_InStmt();
				State = 2129;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2128; Match(WS);
					}
				}

				State = 2131; Match(ASSIGN);
				State = 2133;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					State = 2132; Match(WS);
					}
					break;
				}
				State = 2135; valueStmt(24);
				}
				break;

			case 9:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2137; Match(MINUS);
				State = 2139;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,333,_ctx) ) {
				case 1:
					{
					State = 2138; Match(WS);
					}
					break;
				}
				State = 2141; valueStmt(14);
				}
				break;

			case 10:
				{
				_localctx = new VsPlusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2142; Match(PLUS);
				State = 2144;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					State = 2143; Match(WS);
					}
					break;
				}
				State = 2146; valueStmt(13);
				}
				break;

			case 11:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2147; Match(NOT);
				State = 2148; Match(WS);
				State = 2149; valueStmt(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2310;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,365,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2308;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
					case 1:
						{
						_localctx = new VsIsContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2152;
						if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
						State = 2153; Match(WS);
						State = 2154; Match(IS);
						State = 2155; Match(WS);
						State = 2156; valueStmt(24);
						}
						break;

					case 2:
						{
						_localctx = new VsLikeContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2157;
						if (!(Precpred(_ctx, 22))) throw new FailedPredicateException(this, "Precpred(_ctx, 22)");
						State = 2158; Match(WS);
						State = 2159; Match(LIKE);
						State = 2160; Match(WS);
						State = 2161; valueStmt(23);
						}
						break;

					case 3:
						{
						_localctx = new VsGeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2162;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 2164;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2163; Match(WS);
							}
						}

						State = 2166; Match(GEQ);
						State = 2168;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
						case 1:
							{
							State = 2167; Match(WS);
							}
							break;
						}
						State = 2170; valueStmt(22);
						}
						break;

					case 4:
						{
						_localctx = new VsLeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2171;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 2173;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2172; Match(WS);
							}
						}

						State = 2175; Match(LEQ);
						State = 2177;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
						case 1:
							{
							State = 2176; Match(WS);
							}
							break;
						}
						State = 2179; valueStmt(21);
						}
						break;

					case 5:
						{
						_localctx = new VsGtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2180;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 2182;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2181; Match(WS);
							}
						}

						State = 2184; Match(GT);
						State = 2186;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
						case 1:
							{
							State = 2185; Match(WS);
							}
							break;
						}
						State = 2188; valueStmt(20);
						}
						break;

					case 6:
						{
						_localctx = new VsLtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2189;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2191;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2190; Match(WS);
							}
						}

						State = 2193; Match(LT);
						State = 2195;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
						case 1:
							{
							State = 2194; Match(WS);
							}
							break;
						}
						State = 2197; valueStmt(19);
						}
						break;

					case 7:
						{
						_localctx = new VsNeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2198;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2200;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2199; Match(WS);
							}
						}

						State = 2202; Match(NEQ);
						State = 2204;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
						case 1:
							{
							State = 2203; Match(WS);
							}
							break;
						}
						State = 2206; valueStmt(18);
						}
						break;

					case 8:
						{
						_localctx = new VsEqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2207;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2209;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2208; Match(WS);
							}
						}

						State = 2211; Match(EQ);
						State = 2213;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
						case 1:
							{
							State = 2212; Match(WS);
							}
							break;
						}
						State = 2215; valueStmt(17);
						}
						break;

					case 9:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2216;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2217; Match(WS);
						State = 2218; Match(AMPERSAND);
						State = 2219; Match(WS);
						State = 2220; valueStmt(16);
						}
						break;

					case 10:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2221;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2223;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2222; Match(WS);
							}
						}

						State = 2225; Match(PLUS);
						State = 2227;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
						case 1:
							{
							State = 2226; Match(WS);
							}
							break;
						}
						State = 2229; valueStmt(13);
						}
						break;

					case 11:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2230;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2232;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2231; Match(WS);
							}
						}

						State = 2234; Match(MOD);
						State = 2236;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
						case 1:
							{
							State = 2235; Match(WS);
							}
							break;
						}
						State = 2238; valueStmt(12);
						}
						break;

					case 12:
						{
						_localctx = new VsDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2239;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2241;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2240; Match(WS);
							}
						}

						State = 2243; Match(DIV);
						State = 2245;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
						case 1:
							{
							State = 2244; Match(WS);
							}
							break;
						}
						State = 2247; valueStmt(11);
						}
						break;

					case 13:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2248;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2250;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2249; Match(WS);
							}
						}

						State = 2252; Match(MULT);
						State = 2254;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
						case 1:
							{
							State = 2253; Match(WS);
							}
							break;
						}
						State = 2256; valueStmt(10);
						}
						break;

					case 14:
						{
						_localctx = new VsMinusContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2257;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2259;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2258; Match(WS);
							}
						}

						State = 2261; Match(MINUS);
						State = 2263;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
						case 1:
							{
							State = 2262; Match(WS);
							}
							break;
						}
						State = 2265; valueStmt(9);
						}
						break;

					case 15:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2266;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2268;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2267; Match(WS);
							}
						}

						State = 2270; Match(POW);
						State = 2272;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,359,_ctx) ) {
						case 1:
							{
							State = 2271; Match(WS);
							}
							break;
						}
						State = 2274; valueStmt(8);
						}
						break;

					case 16:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2275;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2276; Match(WS);
						State = 2277; Match(IMP);
						State = 2278; Match(WS);
						State = 2279; valueStmt(7);
						}
						break;

					case 17:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2280;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2281; Match(WS);
						State = 2282; Match(EQV);
						State = 2283; Match(WS);
						State = 2284; valueStmt(6);
						}
						break;

					case 18:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2285;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2287;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2286; Match(WS);
							}
						}

						State = 2289; Match(XOR);
						State = 2291;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
						case 1:
							{
							State = 2290; Match(WS);
							}
							break;
						}
						State = 2293; valueStmt(5);
						}
						break;

					case 19:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2294;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2296;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2295; Match(WS);
							}
						}

						State = 2298; Match(OR);
						State = 2300;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
						case 1:
							{
							State = 2299; Match(WS);
							}
							break;
						}
						State = 2302; valueStmt(4);
						}
						break;

					case 20:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2303;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2304; Match(WS);
						State = 2305; Match(AND);
						State = 2306; Match(WS);
						State = 2307; valueStmt(3);
						}
						break;
					}
					} 
				}
				State = 2312;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,365,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public ITerminalNode DIM() { return GetToken(VisualBasic6Parser.DIM, 0); }
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VisualBasic6Parser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2316;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DIM:
				{
				State = 2313; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2314; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2315; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2318; Match(WS);
			State = 2321;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				State = 2319; Match(WITHEVENTS);
				State = 2320; Match(WS);
				}
				break;
			}
			State = 2323; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public VariableSubStmtContext[] variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2325; variableSubStmt();
			State = 2336;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2327;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2326; Match(WS);
						}
					}

					State = 2329; Match(COMMA);
					State = 2331;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2330; Match(WS);
						}
					}

					State = 2333; variableSubStmt();
					}
					} 
				}
				State = 2338;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2339; ambiguousIdentifier();
			State = 2357;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				State = 2341;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2340; Match(WS);
					}
				}

				State = 2343; Match(LPAREN);
				State = 2345;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					State = 2344; Match(WS);
					}
					break;
				}
				State = 2351;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)) | (1L << (DOT - 130)) | (1L << (EXCLAMATIONMARK - 130)) | (1L << (LPAREN - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MINUS - 195)) | (1L << (PLUS - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (OCTALLITERAL - 195)) | (1L << (IDENTIFIER - 195)) | (1L << (WS - 195)))) != 0)) {
					{
					State = 2347; subscripts();
					State = 2349;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2348; Match(WS);
						}
					}

					}
				}

				State = 2353; Match(RPAREN);
				State = 2355;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					State = 2354; Match(WS);
					}
					break;
				}
				}
				break;
			}
			State = 2360;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				State = 2359; typeHint();
				}
				break;
			}
			State = 2364;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				State = 2362; Match(WS);
				State = 2363; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VisualBasic6Parser.WEND, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_whileWendStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2366; Match(WHILE);
			State = 2367; Match(WS);
			State = 2368; valueStmt(0);
			State = 2370;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2369; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2372;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,379,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2377;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,380,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2374; block();
					}
					} 
				}
				State = 2379;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,380,_ctx);
			}
			State = 2383;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 2380; Match(NEWLINE);
				}
				}
				State = 2385;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2386; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public ITerminalNode WIDTH() { return GetToken(VisualBasic6Parser.WIDTH, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2388; Match(WIDTH);
			State = 2389; Match(WS);
			State = 2390; valueStmt(0);
			State = 2392;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2391; Match(WS);
				}
			}

			State = 2394; Match(COMMA);
			State = 2396;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				State = 2395; Match(WS);
				}
				break;
			}
			State = 2398; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VisualBasic6Parser.WITH, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode END_WITH() { return GetToken(VisualBasic6Parser.END_WITH, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2400; Match(WITH);
			State = 2401; Match(WS);
			State = 2402; implicitCallStmt_InStmt();
			State = 2404;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2403; Match(NEWLINE);
				}
				}
				State = 2406;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2414;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 2408; block();
				State = 2410;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2409; Match(NEWLINE);
					}
					}
					State = 2412;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 2416; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2418; Match(WRITE);
			State = 2419; Match(WS);
			State = 2420; valueStmt(0);
			State = 2422;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2421; Match(WS);
				}
			}

			State = 2424; Match(COMMA);
			State = 2429;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2426;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
				case 1:
					{
					State = 2425; Match(WS);
					}
					break;
				}
				State = 2428; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext eCS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_explicitCallStmt);
		try {
			State = 2433;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2431; eCS_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2432; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_eCS_ProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2435; Match(CALL);
			State = 2436; Match(WS);
			State = 2437; ambiguousIdentifier();
			State = 2439;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				State = 2438; typeHint();
				}
				break;
			}
			State = 2454;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				State = 2442;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2441; Match(WS);
					}
				}

				State = 2444; Match(LPAREN);
				State = 2446;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					State = 2445; Match(WS);
					}
					break;
				}
				State = 2448; argsCall();
				State = 2450;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2449; Match(WS);
					}
				}

				State = 2452; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2456; Match(CALL);
			State = 2457; Match(WS);
			State = 2459;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				State = 2458; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2461; Match(DOT);
			State = 2463;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2462; Match(WS);
				}
			}

			State = 2465; ambiguousIdentifier();
			State = 2467;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				State = 2466; typeHint();
				}
				break;
			}
			State = 2482;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				State = 2470;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2469; Match(WS);
					}
				}

				State = 2472; Match(LPAREN);
				State = 2474;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					State = 2473; Match(WS);
					}
					break;
				}
				State = 2476; argsCall();
				State = 2478;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2477; Match(WS);
					}
				}

				State = 2480; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_implicitCallStmt_InBlock);
		try {
			State = 2486;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2484; iCS_B_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2485; iCS_B_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public CertainIdentifierContext certainIdentifier() {
			return GetRuleContext<CertainIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_iCS_B_ProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2488; certainIdentifier();
			State = 2491;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				State = 2489; Match(WS);
				State = 2490; argsCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_iCS_B_MemberProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2494;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				State = 2493; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2496; Match(DOT);
			State = 2497; ambiguousIdentifier();
			State = 2499;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				State = 2498; typeHint();
				}
				break;
			}
			State = 2503;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				State = 2501; Match(WS);
				State = 2502; argsCall();
				}
				break;
			}
			State = 2506;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				State = 2505; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_implicitCallStmt_InStmt);
		try {
			State = 2512;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2508; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2509; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2510; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2511; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_iCS_S_VariableOrProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2514; ambiguousIdentifier();
			State = 2516;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				State = 2515; typeHint();
				}
				break;
			}
			State = 2519;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				State = 2518; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ICS_S_NestedProcedureCallContext iCS_S_NestedProcedureCall() {
			return GetRuleContext<ICS_S_NestedProcedureCallContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2524;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 2521; ambiguousIdentifier();
				}
				break;

			case 2:
				{
				State = 2522; baseType();
				}
				break;

			case 3:
				{
				State = 2523; iCS_S_NestedProcedureCall();
				}
				break;
			}
			State = 2527;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 2526; typeHint();
				}
			}

			State = 2530;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2529; Match(WS);
				}
			}

			State = 2532; Match(LPAREN);
			State = 2534;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				State = 2533; Match(WS);
				}
				break;
			}
			State = 2540;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)) | (1L << (COMMA - 130)) | (1L << (DOT - 130)) | (1L << (EXCLAMATIONMARK - 130)) | (1L << (LPAREN - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MINUS - 195)) | (1L << (PLUS - 195)) | (1L << (SEMICOLON - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (OCTALLITERAL - 195)) | (1L << (IDENTIFIER - 195)) | (1L << (WS - 195)))) != 0)) {
				{
				State = 2536; argsCall();
				State = 2538;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2537; Match(WS);
					}
				}

				}
			}

			State = 2542; Match(RPAREN);
			State = 2544;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				State = 2543; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_NestedProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ICS_S_NestedProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_NestedProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_NestedProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_NestedProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_NestedProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_NestedProcedureCallContext iCS_S_NestedProcedureCall() {
		ICS_S_NestedProcedureCallContext _localctx = new ICS_S_NestedProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_iCS_S_NestedProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2546; ambiguousIdentifier();
			State = 2548;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 2547; typeHint();
				}
			}

			State = 2551;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2550; Match(WS);
				}
			}

			State = 2553; Match(LPAREN);
			State = 2555;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				State = 2554; Match(WS);
				}
				break;
			}
			State = 2561;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)) | (1L << (COMMA - 130)) | (1L << (DOT - 130)) | (1L << (EXCLAMATIONMARK - 130)) | (1L << (LPAREN - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MINUS - 195)) | (1L << (PLUS - 195)) | (1L << (SEMICOLON - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (OCTALLITERAL - 195)) | (1L << (IDENTIFIER - 195)) | (1L << (WS - 195)))) != 0)) {
				{
				State = 2557; argsCall();
				State = 2559;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2558; Match(WS);
					}
				}

				}
			}

			State = 2563; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MemberCallContext[] iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_iCS_S_MembersCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2567;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				State = 2565; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2566; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2570;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2569; iCS_S_MemberCall();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2572;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,425,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2575;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				State = 2574; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_iCS_S_MemberCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2578;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2577; Match(WS);
				}
			}

			State = 2580; Match(DOT);
			State = 2583;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				State = 2581; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2582; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_iCS_S_DictionaryCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2585; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public ArgCallContext[] argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(VisualBasic6Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VisualBasic6Parser.SEMICOLON, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2599;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,432,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2588;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
					case 1:
						{
						State = 2587; argCall();
						}
						break;
					}
					State = 2591;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2590; Match(WS);
						}
					}

					State = 2593;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2595;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
					case 1:
						{
						State = 2594; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 2601;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,432,_ctx);
			}
			State = 2602; argCall();
			State = 2615;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,436,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2604;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2603; Match(WS);
						}
					}

					State = 2606;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2608;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,434,_ctx) ) {
					case 1:
						{
						State = 2607; Match(WS);
						}
						break;
					}
					State = 2611;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,435,_ctx) ) {
					case 1:
						{
						State = 2610; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2617;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,436,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2620;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				State = 2618;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2619; Match(WS);
				}
				break;
			}
			State = 2622; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public ITerminalNode EXCLAMATIONMARK() { return GetToken(VisualBasic6Parser.EXCLAMATIONMARK, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_dictionaryCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2624; Match(EXCLAMATIONMARK);
			State = 2625; ambiguousIdentifier();
			State = 2627;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				State = 2626; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2629; Match(LPAREN);
			State = 2647;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				State = 2631;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2630; Match(WS);
					}
				}

				State = 2633; arg();
				State = 2644;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,442,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2635;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2634; Match(WS);
							}
						}

						State = 2637; Match(COMMA);
						State = 2639;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2638; Match(WS);
							}
						}

						State = 2641; arg();
						}
						} 
					}
					State = 2646;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,442,_ctx);
				}
				}
				break;
			}
			State = 2650;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2649; Match(WS);
				}
			}

			State = 2652; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VisualBasic6Parser.OPTIONAL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2656;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				State = 2654; Match(OPTIONAL);
				State = 2655; Match(WS);
				}
				break;
			}
			State = 2660;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				State = 2658;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2659; Match(WS);
				}
				break;
			}
			State = 2664;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				State = 2662; Match(PARAMARRAY);
				State = 2663; Match(WS);
				}
				break;
			}
			State = 2666; ambiguousIdentifier();
			State = 2668;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 2667; typeHint();
				}
			}

			State = 2678;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				State = 2671;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2670; Match(WS);
					}
				}

				State = 2673; Match(LPAREN);
				State = 2675;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2674; Match(WS);
					}
				}

				State = 2677; Match(RPAREN);
				}
				break;
			}
			State = 2682;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				State = 2680; Match(WS);
				State = 2681; asTypeClause();
				}
				break;
			}
			State = 2688;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				State = 2685;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2684; Match(WS);
					}
				}

				State = 2687; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_argDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2690; Match(EQ);
			State = 2692;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2691; Match(WS);
				}
			}

			State = 2696;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				State = 2694; literal();
				}
				break;

			case 2:
				{
				State = 2695; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2698; subscript();
			State = 2709;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,459,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2700;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2699; Match(WS);
						}
					}

					State = 2702; Match(COMMA);
					State = 2704;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,458,_ctx) ) {
					case 1:
						{
						State = 2703; Match(WS);
						}
						break;
					}
					State = 2706; subscript();
					}
					} 
				}
				State = 2711;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,459,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2717;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,460,_ctx) ) {
			case 1:
				{
				State = 2712; valueStmt(0);
				State = 2713; Match(WS);
				State = 2714; Match(TO);
				State = 2715; Match(WS);
				}
				break;
			}
			State = 2719; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(VisualBasic6Parser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VisualBasic6Parser.IDENTIFIER, i);
		}
		public AmbiguousKeywordContext[] ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VisualBasic6Parser.L_SQUARE_BRACKET, 0); }
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VisualBasic6Parser.R_SQUARE_BRACKET, 0); }
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext ambiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_ambiguousIdentifier);
		int _la;
		try {
			int _alt;
			State = 2735;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEEP:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2723;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2723;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case IDENTIFIER:
							{
							State = 2721; Match(IDENTIFIER);
							}
							break;
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEEP:
						case BEGIN:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case OBJECT:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2722; ambiguousKeyword();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2725;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,462,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2727; Match(L_SQUARE_BRACKET);
				State = 2730;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2730;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 2728; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEEP:
					case BEGIN:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case OBJECT:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2729; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2732;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || _la==IDENTIFIER );
				State = 2734; Match(R_SQUARE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_asTypeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2737; Match(AS);
			State = 2738; Match(WS);
			State = 2741;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				State = 2739; Match(NEW);
				State = 2740; Match(WS);
				}
				break;
			}
			State = 2743; type();
			State = 2746;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				State = 2744; Match(WS);
				State = 2745; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(VisualBasic6Parser.BOOLEAN, 0); }
		public ITerminalNode BYTE() { return GetToken(VisualBasic6Parser.BYTE, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VisualBasic6Parser.COLLECTION, 0); }
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VisualBasic6Parser.DOUBLE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VisualBasic6Parser.INTEGER, 0); }
		public ITerminalNode LONG() { return GetToken(VisualBasic6Parser.LONG, 0); }
		public ITerminalNode OBJECT() { return GetToken(VisualBasic6Parser.OBJECT, 0); }
		public ITerminalNode SINGLE() { return GetToken(VisualBasic6Parser.SINGLE, 0); }
		public ITerminalNode STRING() { return GetToken(VisualBasic6Parser.STRING, 0); }
		public ITerminalNode VARIANT() { return GetToken(VisualBasic6Parser.VARIANT, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2748;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (INTEGER - 81)) | (1L << (LONG - 81)) | (1L << (OBJECT - 81)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (SINGLE - 151)) | (1L << (STRING - 151)) | (1L << (VARIANT - 151)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CertainIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(VisualBasic6Parser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VisualBasic6Parser.IDENTIFIER, i);
		}
		public AmbiguousKeywordContext[] ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_certainIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCertainIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCertainIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CertainIdentifierContext certainIdentifier() {
		CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_certainIdentifier);
		try {
			int _alt;
			State = 2765;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2750; Match(IDENTIFIER);
				State = 2755;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,469,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 2753;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEEP:
						case BEGIN:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case OBJECT:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2751; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2752; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 2757;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,469,_ctx);
				}
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEEP:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2758; ambiguousKeyword();
				State = 2761;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2761;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEEP:
						case BEGIN:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case OBJECT:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2759; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2760; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2763;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,471,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(VisualBasic6Parser.LT, 0); }
		public ITerminalNode LEQ() { return GetToken(VisualBasic6Parser.LEQ, 0); }
		public ITerminalNode GT() { return GetToken(VisualBasic6Parser.GT, 0); }
		public ITerminalNode GEQ() { return GetToken(VisualBasic6Parser.GEQ, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VisualBasic6Parser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2767;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (EQ - 186)) | (1L << (GEQ - 186)) | (1L << (GT - 186)) | (1L << (LEQ - 186)) | (1L << (LT - 186)) | (1L << (NEQ - 186)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(VisualBasic6Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(VisualBasic6Parser.DOT, i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_complexType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2769; ambiguousIdentifier();
			State = 2774;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,473,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2770; Match(DOT);
					State = 2771; ambiguousIdentifier();
					}
					} 
				}
				State = 2776;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,473,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(VisualBasic6Parser.MULT, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2777; Match(MULT);
			State = 2779;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2778; Match(WS);
				}
			}

			State = 2783;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGERLITERAL:
				{
				State = 2781; Match(INTEGERLITERAL);
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEEP:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2782; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public CertainIdentifierContext[] certainIdentifier() {
			return GetRuleContexts<CertainIdentifierContext>();
		}
		public CertainIdentifierContext certainIdentifier(int i) {
			return GetRuleContext<CertainIdentifierContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2785; certainIdentifier();
			State = 2794;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				State = 2787;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2786; Match(WS);
					}
				}

				State = 2789; Match(MINUS);
				State = 2791;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2790; Match(WS);
					}
				}

				State = 2793; certainIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VisualBasic6Parser.COLON, 0); }
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2796; ambiguousIdentifier();
			State = 2797; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode COLORLITERAL() { return GetToken(VisualBasic6Parser.COLORLITERAL, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VisualBasic6Parser.DATELITERAL, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VisualBasic6Parser.DOUBLELITERAL, 0); }
		public ITerminalNode FILENUMBER() { return GetToken(VisualBasic6Parser.FILENUMBER, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public ITerminalNode OCTALLITERAL() { return GetToken(VisualBasic6Parser.OCTALLITERAL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VisualBasic6Parser.STRINGLITERAL, 0); }
		public ITerminalNode TRUE() { return GetToken(VisualBasic6Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(VisualBasic6Parser.FALSE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VisualBasic6Parser.NOTHING, 0); }
		public ITerminalNode NULL() { return GetToken(VisualBasic6Parser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2799;
			_la = _input.La(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TRUE - 163)) | (1L << (STRINGLITERAL - 163)) | (1L << (DATELITERAL - 163)) | (1L << (COLORLITERAL - 163)) | (1L << (INTEGERLITERAL - 163)) | (1L << (DOUBLELITERAL - 163)) | (1L << (FILENUMBER - 163)) | (1L << (OCTALLITERAL - 163)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublicPrivateVisibilityContext : ParserRuleContext {
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public PublicPrivateVisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publicPrivateVisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPublicPrivateVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPublicPrivateVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublicPrivateVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublicPrivateVisibilityContext publicPrivateVisibility() {
		PublicPrivateVisibilityContext _localctx = new PublicPrivateVisibilityContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_publicPrivateVisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2801;
			_la = _input.La(1);
			if ( !(_la==PRIVATE || _la==PUBLIC) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublicPrivateGlobalVisibilityContext : ParserRuleContext {
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VisualBasic6Parser.GLOBAL, 0); }
		public PublicPrivateGlobalVisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publicPrivateGlobalVisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPublicPrivateGlobalVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPublicPrivateGlobalVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublicPrivateGlobalVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublicPrivateGlobalVisibilityContext publicPrivateGlobalVisibility() {
		PublicPrivateGlobalVisibilityContext _localctx = new PublicPrivateGlobalVisibilityContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_publicPrivateGlobalVisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2803;
			_la = _input.La(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (GLOBAL - 72)) | (1L << (PRIVATE - 72)) | (1L << (PUBLIC - 72)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2807;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				State = 2805; baseType();
				}
				break;

			case 2:
				{
				State = 2806; complexType();
				}
				break;
			}
			State = 2817;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				State = 2810;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2809; Match(WS);
					}
				}

				State = 2812; Match(LPAREN);
				State = 2814;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2813; Match(WS);
					}
				}

				State = 2816; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AMPERSAND() { return GetToken(VisualBasic6Parser.AMPERSAND, 0); }
		public ITerminalNode AT() { return GetToken(VisualBasic6Parser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VisualBasic6Parser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONMARK() { return GetToken(VisualBasic6Parser.EXCLAMATIONMARK, 0); }
		public ITerminalNode HASH() { return GetToken(VisualBasic6Parser.HASH, 0); }
		public ITerminalNode PERCENT() { return GetToken(VisualBasic6Parser.PERCENT, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2819;
			_la = _input.La(1);
			if ( !(((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public ITerminalNode FRIEND() { return GetToken(VisualBasic6Parser.FRIEND, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VisualBasic6Parser.GLOBAL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2821;
			_la = _input.La(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode ACCESS() { return GetToken(VisualBasic6Parser.ACCESS, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VisualBasic6Parser.ADDRESSOF, 0); }
		public ITerminalNode ALIAS() { return GetToken(VisualBasic6Parser.ALIAS, 0); }
		public ITerminalNode AND() { return GetToken(VisualBasic6Parser.AND, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VisualBasic6Parser.ATTRIBUTE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VisualBasic6Parser.APPACTIVATE, 0); }
		public ITerminalNode APPEND() { return GetToken(VisualBasic6Parser.APPEND, 0); }
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode BEEP() { return GetToken(VisualBasic6Parser.BEEP, 0); }
		public ITerminalNode BEGIN() { return GetToken(VisualBasic6Parser.BEGIN, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VisualBasic6Parser.BOOLEAN, 0); }
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ITerminalNode BYTE() { return GetToken(VisualBasic6Parser.BYTE, 0); }
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ITerminalNode CLASS() { return GetToken(VisualBasic6Parser.CLASS, 0); }
		public ITerminalNode CLOSE() { return GetToken(VisualBasic6Parser.CLOSE, 0); }
		public ITerminalNode CHDIR() { return GetToken(VisualBasic6Parser.CHDIR, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VisualBasic6Parser.CHDRIVE, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VisualBasic6Parser.COLLECTION, 0); }
		public ITerminalNode CONST() { return GetToken(VisualBasic6Parser.CONST, 0); }
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VisualBasic6Parser.DECLARE, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VisualBasic6Parser.DEFBOOL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VisualBasic6Parser.DEFBYTE, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VisualBasic6Parser.DEFCUR, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VisualBasic6Parser.DEFDBL, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VisualBasic6Parser.DEFDATE, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VisualBasic6Parser.DEFDEC, 0); }
		public ITerminalNode DEFINT() { return GetToken(VisualBasic6Parser.DEFINT, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VisualBasic6Parser.DEFLNG, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VisualBasic6Parser.DEFOBJ, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VisualBasic6Parser.DEFSNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VisualBasic6Parser.DEFSTR, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VisualBasic6Parser.DEFVAR, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VisualBasic6Parser.DELETESETTING, 0); }
		public ITerminalNode DIM() { return GetToken(VisualBasic6Parser.DIM, 0); }
		public ITerminalNode DO() { return GetToken(VisualBasic6Parser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VisualBasic6Parser.DOUBLE, 0); }
		public ITerminalNode EACH() { return GetToken(VisualBasic6Parser.EACH, 0); }
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VisualBasic6Parser.ELSEIF, 0); }
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public ITerminalNode ENUM() { return GetToken(VisualBasic6Parser.ENUM, 0); }
		public ITerminalNode EQV() { return GetToken(VisualBasic6Parser.EQV, 0); }
		public ITerminalNode ERASE() { return GetToken(VisualBasic6Parser.ERASE, 0); }
		public ITerminalNode ERROR() { return GetToken(VisualBasic6Parser.ERROR, 0); }
		public ITerminalNode EVENT() { return GetToken(VisualBasic6Parser.EVENT, 0); }
		public ITerminalNode FALSE() { return GetToken(VisualBasic6Parser.FALSE, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VisualBasic6Parser.FILECOPY, 0); }
		public ITerminalNode FRIEND() { return GetToken(VisualBasic6Parser.FRIEND, 0); }
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode GET() { return GetToken(VisualBasic6Parser.GET, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VisualBasic6Parser.GLOBAL, 0); }
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode IMP() { return GetToken(VisualBasic6Parser.IMP, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VisualBasic6Parser.IMPLEMENTS, 0); }
		public ITerminalNode IN() { return GetToken(VisualBasic6Parser.IN, 0); }
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ITerminalNode INTEGER() { return GetToken(VisualBasic6Parser.INTEGER, 0); }
		public ITerminalNode KILL() { return GetToken(VisualBasic6Parser.KILL, 0); }
		public ITerminalNode LOAD() { return GetToken(VisualBasic6Parser.LOAD, 0); }
		public ITerminalNode LOCK() { return GetToken(VisualBasic6Parser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(VisualBasic6Parser.LONG, 0); }
		public ITerminalNode LOOP() { return GetToken(VisualBasic6Parser.LOOP, 0); }
		public ITerminalNode LEN() { return GetToken(VisualBasic6Parser.LEN, 0); }
		public ITerminalNode LET() { return GetToken(VisualBasic6Parser.LET, 0); }
		public ITerminalNode LIB() { return GetToken(VisualBasic6Parser.LIB, 0); }
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public ITerminalNode LSET() { return GetToken(VisualBasic6Parser.LSET, 0); }
		public ITerminalNode ME() { return GetToken(VisualBasic6Parser.ME, 0); }
		public ITerminalNode MID() { return GetToken(VisualBasic6Parser.MID, 0); }
		public ITerminalNode MKDIR() { return GetToken(VisualBasic6Parser.MKDIR, 0); }
		public ITerminalNode MOD() { return GetToken(VisualBasic6Parser.MOD, 0); }
		public ITerminalNode NAME() { return GetToken(VisualBasic6Parser.NAME, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public ITerminalNode NOT() { return GetToken(VisualBasic6Parser.NOT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VisualBasic6Parser.NOTHING, 0); }
		public ITerminalNode NULL() { return GetToken(VisualBasic6Parser.NULL, 0); }
		public ITerminalNode OBJECT() { return GetToken(VisualBasic6Parser.OBJECT, 0); }
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode OPEN() { return GetToken(VisualBasic6Parser.OPEN, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VisualBasic6Parser.OPTIONAL, 0); }
		public ITerminalNode OR() { return GetToken(VisualBasic6Parser.OR, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VisualBasic6Parser.OUTPUT, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VisualBasic6Parser.PRESERVE, 0); }
		public ITerminalNode PRINT() { return GetToken(VisualBasic6Parser.PRINT, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public ITerminalNode PUT() { return GetToken(VisualBasic6Parser.PUT, 0); }
		public ITerminalNode RANDOM() { return GetToken(VisualBasic6Parser.RANDOM, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VisualBasic6Parser.RANDOMIZE, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VisualBasic6Parser.RAISEEVENT, 0); }
		public ITerminalNode READ() { return GetToken(VisualBasic6Parser.READ, 0); }
		public ITerminalNode REDIM() { return GetToken(VisualBasic6Parser.REDIM, 0); }
		public ITerminalNode REM() { return GetToken(VisualBasic6Parser.REM, 0); }
		public ITerminalNode RESET() { return GetToken(VisualBasic6Parser.RESET, 0); }
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode RETURN() { return GetToken(VisualBasic6Parser.RETURN, 0); }
		public ITerminalNode RMDIR() { return GetToken(VisualBasic6Parser.RMDIR, 0); }
		public ITerminalNode RSET() { return GetToken(VisualBasic6Parser.RSET, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VisualBasic6Parser.SAVEPICTURE, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VisualBasic6Parser.SAVESETTING, 0); }
		public ITerminalNode SEEK() { return GetToken(VisualBasic6Parser.SEEK, 0); }
		public ITerminalNode SELECT() { return GetToken(VisualBasic6Parser.SELECT, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VisualBasic6Parser.SENDKEYS, 0); }
		public ITerminalNode SET() { return GetToken(VisualBasic6Parser.SET, 0); }
		public ITerminalNode SETATTR() { return GetToken(VisualBasic6Parser.SETATTR, 0); }
		public ITerminalNode SHARED() { return GetToken(VisualBasic6Parser.SHARED, 0); }
		public ITerminalNode SINGLE() { return GetToken(VisualBasic6Parser.SINGLE, 0); }
		public ITerminalNode SPC() { return GetToken(VisualBasic6Parser.SPC, 0); }
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ITerminalNode STEP() { return GetToken(VisualBasic6Parser.STEP, 0); }
		public ITerminalNode STOP() { return GetToken(VisualBasic6Parser.STOP, 0); }
		public ITerminalNode STRING() { return GetToken(VisualBasic6Parser.STRING, 0); }
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public ITerminalNode TAB() { return GetToken(VisualBasic6Parser.TAB, 0); }
		public ITerminalNode TEXT() { return GetToken(VisualBasic6Parser.TEXT, 0); }
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode TIME() { return GetToken(VisualBasic6Parser.TIME, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public ITerminalNode TRUE() { return GetToken(VisualBasic6Parser.TRUE, 0); }
		public ITerminalNode TYPE() { return GetToken(VisualBasic6Parser.TYPE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VisualBasic6Parser.TYPEOF, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VisualBasic6Parser.UNLOAD, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VisualBasic6Parser.UNLOCK, 0); }
		public ITerminalNode UNTIL() { return GetToken(VisualBasic6Parser.UNTIL, 0); }
		public ITerminalNode VARIANT() { return GetToken(VisualBasic6Parser.VARIANT, 0); }
		public ITerminalNode VERSION() { return GetToken(VisualBasic6Parser.VERSION, 0); }
		public ITerminalNode WEND() { return GetToken(VisualBasic6Parser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode WIDTH() { return GetToken(VisualBasic6Parser.WIDTH, 0); }
		public ITerminalNode WITH() { return GetToken(VisualBasic6Parser.WITH, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VisualBasic6Parser.WITHEVENTS, 0); }
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode XOR() { return GetToken(VisualBasic6Parser.XOR, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2823;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 109: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 23);

		case 1: return Precpred(_ctx, 22);

		case 2: return Precpred(_ctx, 21);

		case 3: return Precpred(_ctx, 20);

		case 4: return Precpred(_ctx, 19);

		case 5: return Precpred(_ctx, 18);

		case 6: return Precpred(_ctx, 17);

		case 7: return Precpred(_ctx, 16);

		case 8: return Precpred(_ctx, 15);

		case 9: return Precpred(_ctx, 12);

		case 10: return Precpred(_ctx, 11);

		case 11: return Precpred(_ctx, 10);

		case 12: return Precpred(_ctx, 9);

		case 13: return Precpred(_ctx, 8);

		case 14: return Precpred(_ctx, 7);

		case 15: return Precpred(_ctx, 6);

		case 16: return Precpred(_ctx, 5);

		case 17: return Precpred(_ctx, 4);

		case 18: return Precpred(_ctx, 3);

		case 19: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xDF\xB0C\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x3\x2\x3\x2\x3\x2\x3\x3"+
		"\x5\x3\x13B\n\x3\x3\x3\a\x3\x13E\n\x3\f\x3\xE\x3\x141\v\x3\x3\x3\x3\x3"+
		"\x6\x3\x145\n\x3\r\x3\xE\x3\x146\x5\x3\x149\n\x3\x3\x3\x5\x3\x14C\n\x3"+
		"\x3\x3\a\x3\x14F\n\x3\f\x3\xE\x3\x152\v\x3\x3\x3\x5\x3\x155\n\x3\x3\x3"+
		"\a\x3\x158\n\x3\f\x3\xE\x3\x15B\v\x3\x3\x3\x5\x3\x15E\n\x3\x3\x3\a\x3"+
		"\x161\n\x3\f\x3\xE\x3\x164\v\x3\x3\x3\x5\x3\x167\n\x3\x3\x3\a\x3\x16A"+
		"\n\x3\f\x3\xE\x3\x16D\v\x3\x3\x3\x5\x3\x170\n\x3\x3\x3\a\x3\x173\n\x3"+
		"\f\x3\xE\x3\x176\v\x3\x3\x3\x5\x3\x179\n\x3\x3\x3\a\x3\x17C\n\x3\f\x3"+
		"\xE\x3\x17F\v\x3\x3\x3\x5\x3\x182\n\x3\x3\x4\x6\x4\x185\n\x4\r\x4\xE\x4"+
		"\x186\x3\x5\x3\x5\x5\x5\x18B\n\x5\x3\x5\x3\x5\x5\x5\x18F\n\x5\x3\x5\x3"+
		"\x5\x3\x5\x5\x5\x194\n\x5\x3\x5\x3\x5\a\x5\x198\n\x5\f\x5\xE\x5\x19B\v"+
		"\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x1A6\n\b\x3\t"+
		"\x3\t\x6\t\x1AA\n\t\r\t\xE\t\x1AB\x3\t\x6\t\x1AF\n\t\r\t\xE\t\x1B0\x3"+
		"\t\x3\t\x6\t\x1B5\n\t\r\t\xE\t\x1B6\x3\n\x3\n\x5\n\x1BB\n\n\x3\n\x3\n"+
		"\x5\n\x1BF\n\n\x3\n\x3\n\x3\n\x3\v\x3\v\x6\v\x1C6\n\v\r\v\xE\v\x1C7\x6"+
		"\v\x1CA\n\v\r\v\xE\v\x1CB\x3\f\x3\f\x6\f\x1D0\n\f\r\f\xE\f\x1D1\x6\f\x1D4"+
		"\n\f\r\f\xE\f\x1D5\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x1E0\n"+
		"\r\x3\xE\x3\xE\x6\xE\x1E4\n\xE\r\xE\xE\xE\x1E5\x3\xE\a\xE\x1E9\n\xE\f"+
		"\xE\xE\xE\x1EC\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x5\xF\x1FA\n\xF\x3\x10\x5\x10\x1FD\n\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x205\n\x10\x3\x10\x6\x10\x208"+
		"\n\x10\r\x10\xE\x10\x209\x3\x10\x6\x10\x20D\n\x10\r\x10\xE\x10\x20E\x3"+
		"\x10\x3\x10\a\x10\x213\n\x10\f\x10\xE\x10\x216\v\x10\x3\x11\x3\x11\x3"+
		"\x11\x5\x11\x21B\n\x11\x3\x12\x5\x12\x21E\n\x12\x3\x12\x3\x12\x5\x12\x222"+
		"\n\x12\x3\x12\x3\x12\x5\x12\x226\n\x12\x3\x12\x5\x12\x229\n\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x230\n\x12\x3\x12\x5\x12\x233\n\x12"+
		"\x3\x12\x6\x12\x236\n\x12\r\x12\xE\x12\x237\x3\x13\x3\x13\x5\x13\x23C"+
		"\n\x13\x3\x13\x3\x13\x3\x14\x5\x14\x241\n\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x5\x14\x249\n\x14\x3\x14\x3\x14\x5\x14\x24D\n\x14\x3"+
		"\x14\x6\x14\x250\n\x14\r\x14\xE\x14\x251\x3\x14\x6\x14\x255\n\x14\r\x14"+
		"\xE\x14\x256\x5\x14\x259\n\x14\x3\x14\x3\x14\x6\x14\x25D\n\x14\r\x14\xE"+
		"\x14\x25E\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x5\x18\x26B\n\x18\x3\x18\x3\x18\x5\x18\x26F\n\x18\x3\x18\x3\x18"+
		"\x5\x18\x273\n\x18\x3\x18\x3\x18\x5\x18\x277\n\x18\x3\x18\a\x18\x27A\n"+
		"\x18\f\x18\xE\x18\x27D\v\x18\x3\x19\x3\x19\x6\x19\x281\n\x19\r\x19\xE"+
		"\x19\x282\x3\x19\x5\x19\x286\n\x19\x3\x19\a\x19\x289\n\x19\f\x19\xE\x19"+
		"\x28C\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2D1"+
		"\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2D7\n\x1B\x3\x1B\x3\x1B\x5"+
		"\x1B\x2DB\n\x1B\x3\x1B\x5\x1B\x2DE\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5"+
		"\x1F\x2EE\n\x1F\x3\x1F\x3\x1F\x5\x1F\x2F2\n\x1F\x3\x1F\a\x1F\x2F5\n\x1F"+
		"\f\x1F\xE\x1F\x2F8\v\x1F\x5\x1F\x2FA\n\x1F\x3 \x3 \x3 \x5 \x2FF\n \x3"+
		" \x3 \x3 \x3 \x5 \x305\n \x3 \x3 \x5 \x309\n \x3 \a \x30C\n \f \xE \x30F"+
		"\v \x3!\x3!\x5!\x313\n!\x3!\x3!\x5!\x317\n!\x3!\x5!\x31A\n!\x3!\x3!\x5"+
		"!\x31E\n!\x3!\x3!\x3\"\x3\"\x5\"\x324\n\"\x3\"\x3\"\x5\"\x328\n\"\x3\""+
		"\x3\"\x3#\x3#\x3#\x5#\x32F\n#\x3#\x3#\x3#\x3#\x5#\x335\n#\x3#\x5#\x338"+
		"\n#\x3#\x3#\x3#\x5#\x33D\n#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x347\n"+
		"#\x3#\x5#\x34A\n#\x3#\x5#\x34D\n#\x3#\x3#\x5#\x351\n#\x3$\x3$\x3$\x3$"+
		"\x5$\x357\n$\x3$\x3$\x5$\x35B\n$\x3$\a$\x35E\n$\f$\xE$\x361\v$\x3%\x3"+
		"%\x3%\x3%\x5%\x367\n%\x3%\x3%\x5%\x36B\n%\x3%\x3%\x5%\x36F\n%\x3%\x3%"+
		"\x5%\x373\n%\x3%\x5%\x376\n%\x3&\x3&\x6&\x37A\n&\r&\xE&\x37B\x3&\x3&\x6"+
		"&\x380\n&\r&\xE&\x381\x5&\x384\n&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x6&\x38D"+
		"\n&\r&\xE&\x38E\x3&\x3&\x6&\x393\n&\r&\xE&\x394\x5&\x397\n&\x3&\x3&\x3"+
		"&\x3&\x6&\x39D\n&\r&\xE&\x39E\x3&\x3&\x6&\x3A3\n&\r&\xE&\x3A4\x3&\x3&"+
		"\x3&\x3&\x3&\x3&\x5&\x3AD\n&\x3\'\x3\'\x3(\x3(\x3(\x5(\x3B4\n(\x3(\x3"+
		"(\x3(\x3(\x6(\x3BA\n(\r(\xE(\x3BB\x3(\a(\x3BF\n(\f(\xE(\x3C2\v(\x3(\x3"+
		"(\x3)\x3)\x5)\x3C8\n)\x3)\x3)\x5)\x3CC\n)\x3)\x5)\x3CF\n)\x3)\x6)\x3D2"+
		"\n)\r)\xE)\x3D3\x3*\x3*\x3*\x3*\x5*\x3DA\n*\x3*\x3*\x5*\x3DE\n*\x3*\a"+
		"*\x3E1\n*\f*\xE*\x3E4\v*\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x5,\x3ED\n,\x3,\x3"+
		",\x3,\x3,\x5,\x3F3\n,\x3,\x3,\x3-\x3-\x3.\x3.\x3.\x3.\x5.\x3FD\n.\x3."+
		"\x3.\x5.\x401\n.\x3.\x3.\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x40B\n/\x3/\x3/\x3"+
		"/\x3/\x3/\x6/\x412\n/\r/\xE/\x413\x3/\x3/\x6/\x418\n/\r/\xE/\x419\x5/"+
		"\x41C\n/\x3/\x3/\x3/\x5/\x421\n/\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x427"+
		"\n\x30\x3\x30\x3\x30\x5\x30\x42B\n\x30\x3\x30\x5\x30\x42E\n\x30\x3\x30"+
		"\x3\x30\x5\x30\x432\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\x5\x30\x43D\n\x30\x3\x30\x6\x30\x440\n\x30\r\x30\xE"+
		"\x30\x441\x3\x30\x3\x30\x6\x30\x446\n\x30\r\x30\xE\x30\x447\x5\x30\x44A"+
		"\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x450\n\x30\x5\x30\x452\n\x30"+
		"\x3\x31\x3\x31\x3\x31\x5\x31\x457\n\x31\x3\x31\x3\x31\x5\x31\x45B\n\x31"+
		"\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x461\n\x31\x3\x31\x5\x31\x464\n\x31"+
		"\x3\x31\x3\x31\x5\x31\x468\n\x31\x3\x31\x6\x31\x46B\n\x31\r\x31\xE\x31"+
		"\x46C\x3\x31\x3\x31\x6\x31\x471\n\x31\r\x31\xE\x31\x472\x5\x31\x475\n"+
		"\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x47D\n\x32\x3\x32"+
		"\x3\x32\x5\x32\x481\n\x32\x3\x32\x5\x32\x484\n\x32\x3\x32\x5\x32\x487"+
		"\n\x32\x3\x32\x3\x32\x5\x32\x48B\n\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3"+
		"\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x4A2\n\x35\x3\x35"+
		"\x3\x35\a\x35\x4A6\n\x35\f\x35\xE\x35\x4A9\v\x35\x3\x35\x5\x35\x4AC\n"+
		"\x35\x3\x35\x3\x35\x5\x35\x4B0\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36"+
		"\x3\x36\x6\x36\x4B8\n\x36\r\x36\xE\x36\x4B9\x3\x36\x3\x36\x6\x36\x4BE"+
		"\n\x36\r\x36\xE\x36\x4BF\x5\x36\x4C2\n\x36\x3\x37\x3\x37\x3\x38\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x6\x38\x4CC\n\x38\r\x38\xE\x38\x4CD\x3\x38"+
		"\x3\x38\x6\x38\x4D2\n\x38\r\x38\xE\x38\x4D3\x5\x38\x4D6\n\x38\x3\x39\x3"+
		"\x39\x6\x39\x4DA\n\x39\r\x39\xE\x39\x4DB\x3\x39\x3\x39\x6\x39\x4E0\n\x39"+
		"\r\x39\xE\x39\x4E1\x5\x39\x4E4\n\x39\x3:\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x5"+
		";\x4EE\n;\x3;\x3;\x5;\x4F2\n;\x3;\x6;\x4F5\n;\r;\xE;\x4F6\x3<\x3<\x3<"+
		"\x3<\x3=\x3=\x5=\x4FF\n=\x3=\x3=\x5=\x503\n=\x3=\x3=\x5=\x507\n=\x3=\x3"+
		"=\x3>\x3>\x3>\x3>\x5>\x50F\n>\x3>\x3>\x5>\x513\n>\x3>\x3>\x3?\x3?\x3?"+
		"\x3?\x3@\x3@\x3@\x3@\x5@\x51F\n@\x3@\x3@\x5@\x523\n@\x3@\x3@\x3@\x3@\x3"+
		"@\x5@\x52A\n@\x5@\x52C\n@\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x532\n\x41"+
		"\x3\x41\x3\x41\x5\x41\x536\n\x41\x3\x41\x3\x41\x3\x42\x3\x42\a\x42\x53C"+
		"\n\x42\f\x42\xE\x42\x53F\v\x42\x3\x42\x5\x42\x542\n\x42\x3\x42\x3\x42"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x6\x43\x54C\n\x43\r\x43\xE"+
		"\x43\x54D\x3\x43\x3\x43\x6\x43\x552\n\x43\r\x43\xE\x43\x553\x5\x43\x556"+
		"\n\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x6\x44\x55E\n\x44\r\x44"+
		"\xE\x44\x55F\x3\x44\x3\x44\x6\x44\x564\n\x44\r\x44\xE\x44\x565\x5\x44"+
		"\x568\n\x44\x3\x45\x3\x45\x6\x45\x56C\n\x45\r\x45\xE\x45\x56D\x3\x45\x3"+
		"\x45\x6\x45\x572\n\x45\r\x45\xE\x45\x573\x5\x45\x576\n\x45\x3\x46\x3\x46"+
		"\x5\x46\x57A\n\x46\x3\x46\x3\x46\x5\x46\x57E\n\x46\x3\x46\x3\x46\x5\x46"+
		"\x582\n\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3H\x3H\x3H\x3H\x3H\x3H\x3H"+
		"\x3H\x3I\x3I\x3I\x3I\x3I\x3I\x5I\x598\nI\x3I\x3I\x3I\x5I\x59D\nI\x3J\x3"+
		"J\x3J\x3J\x3J\x3J\x3J\x3J\x5J\x5A7\nJ\x3J\x3J\x5J\x5AB\nJ\x3J\aJ\x5AE"+
		"\nJ\fJ\xEJ\x5B1\vJ\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x5K\x5BB\nK\x3K\x3"+
		"K\x5K\x5BF\nK\x3K\aK\x5C2\nK\fK\xEK\x5C5\vK\x3L\x3L\x3L\x3L\x3L\x3L\x3"+
		"L\x3L\x3L\x3L\x3L\x5L\x5D2\nL\x3L\x3L\x5L\x5D6\nL\x3L\x3L\x3L\x3L\x3L"+
		"\x3L\x3L\x5L\x5DF\nL\x3L\x3L\x5L\x5E3\nL\x3L\x5L\x5E6\nL\x3M\x3M\x5M\x5EA"+
		"\nM\x3M\x3M\x5M\x5EE\nM\x3M\x5M\x5F1\nM\aM\x5F3\nM\fM\xEM\x5F6\vM\x3M"+
		"\x5M\x5F9\nM\x3M\x5M\x5FC\nM\x3M\x3M\x5M\x600\nM\x3M\x5M\x603\nM\x6M\x605"+
		"\nM\rM\xEM\x606\x5M\x609\nM\x3N\x3N\x3N\x5N\x60E\nN\x3N\x3N\x5N\x612\n"+
		"N\x3N\x3N\x5N\x616\nN\x3N\x3N\x5N\x61A\nN\x5N\x61C\nN\x3O\x3O\x3O\x3O"+
		"\x5O\x622\nO\x3O\x3O\x5O\x626\nO\x3O\x5O\x629\nO\x3P\x3P\x3P\x5P\x62E"+
		"\nP\x3P\x3P\x5P\x632\nP\x3P\x3P\x3P\x3P\x5P\x638\nP\x3P\x5P\x63B\nP\x3"+
		"P\x5P\x63E\nP\x3P\x3P\x5P\x642\nP\x3P\x6P\x645\nP\rP\xEP\x646\x3P\x3P"+
		"\x6P\x64B\nP\rP\xEP\x64C\x5P\x64F\nP\x3P\x3P\x3Q\x3Q\x3Q\x5Q\x656\nQ\x3"+
		"Q\x3Q\x5Q\x65A\nQ\x3Q\x3Q\x3Q\x3Q\x5Q\x660\nQ\x3Q\x5Q\x663\nQ\x3Q\x6Q"+
		"\x666\nQ\rQ\xEQ\x667\x3Q\x3Q\x6Q\x66C\nQ\rQ\xEQ\x66D\x5Q\x670\nQ\x3Q\x3"+
		"Q\x3R\x3R\x3R\x5R\x677\nR\x3R\x3R\x5R\x67B\nR\x3R\x3R\x3R\x3R\x5R\x681"+
		"\nR\x3R\x5R\x684\nR\x3R\x6R\x687\nR\rR\xER\x688\x3R\x3R\x6R\x68D\nR\r"+
		"R\xER\x68E\x5R\x691\nR\x3R\x3R\x3S\x3S\x3S\x3S\x5S\x699\nS\x3S\x3S\x5"+
		"S\x69D\nS\x3S\x5S\x6A0\nS\x3S\x5S\x6A3\nS\x3S\x3S\x5S\x6A7\nS\x3S\x3S"+
		"\x3T\x3T\x3T\x3T\x5T\x6AF\nT\x3T\x3T\x5T\x6B3\nT\x3T\x3T\x5T\x6B7\nT\x5"+
		"T\x6B9\nT\x3T\x5T\x6BC\nT\x3U\x3U\x3U\x5U\x6C1\nU\x3V\x3V\x3V\x3V\x5V"+
		"\x6C7\nV\x3V\x3V\x5V\x6CB\nV\x3V\x3V\x5V\x6CF\nV\x3V\aV\x6D2\nV\fV\xE"+
		"V\x6D5\vV\x3W\x3W\x5W\x6D9\nW\x3W\x3W\x5W\x6DD\nW\x3W\x3W\x5W\x6E1\nW"+
		"\x3W\x3W\x3W\x5W\x6E6\nW\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x5Y\x6EE\nY\x5Y\x6F0"+
		"\nY\x3Z\x3Z\x3[\x3[\x3[\x3[\x3\\\x3\\\x3\\\x3\\\x5\\\x6FC\n\\\x3\\\x3"+
		"\\\x5\\\x700\n\\\x3\\\x3\\\x3]\x3]\x3]\x3]\x5]\x708\n]\x3]\x3]\x5]\x70C"+
		"\n]\x3]\x3]\x3^\x3^\x3^\x3^\x5^\x714\n^\x3^\x3^\x5^\x718\n^\x3^\x3^\x5"+
		"^\x71C\n^\x3^\x3^\x5^\x720\n^\x3^\x3^\x5^\x724\n^\x3^\x3^\x5^\x728\n^"+
		"\x3^\x3^\x3_\x3_\x3_\x3_\x5_\x730\n_\x3_\x3_\x5_\x734\n_\x3_\x3_\x3`\x3"+
		"`\x3`\x3`\x3`\x3`\x6`\x73E\n`\r`\xE`\x73F\x3`\a`\x743\n`\f`\xE`\x746\v"+
		"`\x3`\x5`\x749\n`\x3`\x3`\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x751\n\x61"+
		"\x3\x61\x5\x61\x754\n\x61\x3\x61\a\x61\x757\n\x61\f\x61\xE\x61\x75A\v"+
		"\x61\x3\x61\x6\x61\x75D\n\x61\r\x61\xE\x61\x75E\x5\x61\x761\n\x61\x3\x61"+
		"\x3\x61\x6\x61\x765\n\x61\r\x61\xE\x61\x766\x5\x61\x769\n\x61\x3\x62\x3"+
		"\x62\x3\x62\x5\x62\x76E\n\x62\x3\x62\x3\x62\x5\x62\x772\n\x62\x3\x62\a"+
		"\x62\x775\n\x62\f\x62\xE\x62\x778\v\x62\x5\x62\x77A\n\x62\x3\x63\x3\x63"+
		"\x5\x63\x77E\n\x63\x3\x63\x3\x63\x5\x63\x782\n\x63\x3\x63\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x78D\n\x63\x3\x64\x3"+
		"\x64\x3\x64\x3\x64\x5\x64\x793\n\x64\x3\x64\x3\x64\x5\x64\x797\n\x64\x3"+
		"\x64\x5\x64\x79A\n\x64\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7A0\n\x65\x3"+
		"\x65\x3\x65\x5\x65\x7A4\n\x65\x3\x65\x3\x65\x3\x66\x3\x66\x3\x66\x3\x66"+
		"\x5\x66\x7AC\n\x66\x3\x66\x3\x66\x5\x66\x7B0\n\x66\x3\x66\x3\x66\x3g\x3"+
		"g\x3h\x3h\x3h\x5h\x7B9\nh\x3h\x3h\x5h\x7BD\nh\x3h\x3h\x3h\x3h\x5h\x7C3"+
		"\nh\x3h\x5h\x7C6\nh\x3h\x6h\x7C9\nh\rh\xEh\x7CA\x3h\x3h\x6h\x7CF\nh\r"+
		"h\xEh\x7D0\x5h\x7D3\nh\x3h\x3h\x3i\x3i\x5i\x7D9\ni\x3i\x3i\x5i\x7DD\n"+
		"i\x3i\x3i\x3j\x3j\x3j\x5j\x7E4\nj\x3j\x3j\x3j\x3j\x6j\x7EA\nj\rj\xEj\x7EB"+
		"\x3j\aj\x7EF\nj\fj\xEj\x7F2\vj\x3j\x3j\x3k\x3k\x5k\x7F8\nk\x3k\x3k\x5"+
		"k\x7FC\nk\x3k\x5k\x7FF\nk\x3k\x5k\x802\nk\x3k\x5k\x805\nk\x3k\x3k\x5k"+
		"\x809\nk\x3k\x6k\x80C\nk\rk\xEk\x80D\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x5l\x817"+
		"\nl\x3m\x3m\x3m\x3m\x3n\x3n\x3n\x3n\x5n\x821\nn\x3n\x3n\x5n\x825\nn\x3"+
		"n\x3n\x3n\x3n\x3n\x5n\x82C\nn\x5n\x82E\nn\x3o\x3o\x3o\x3o\x3o\x5o\x835"+
		"\no\x3o\x3o\x5o\x839\no\x3o\x3o\x5o\x83D\no\x3o\ao\x840\no\fo\xEo\x843"+
		"\vo\x3o\x5o\x846\no\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x5"+
		"o\x854\no\x3o\x3o\x5o\x858\no\x3o\x3o\x3o\x3o\x5o\x85E\no\x3o\x3o\x3o"+
		"\x5o\x863\no\x3o\x3o\x3o\x3o\x5o\x869\no\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3"+
		"o\x3o\x3o\x3o\x3o\x5o\x877\no\x3o\x3o\x5o\x87B\no\x3o\x3o\x3o\x5o\x880"+
		"\no\x3o\x3o\x5o\x884\no\x3o\x3o\x3o\x5o\x889\no\x3o\x3o\x5o\x88D\no\x3"+
		"o\x3o\x3o\x5o\x892\no\x3o\x3o\x5o\x896\no\x3o\x3o\x3o\x5o\x89B\no\x3o"+
		"\x3o\x5o\x89F\no\x3o\x3o\x3o\x5o\x8A4\no\x3o\x3o\x5o\x8A8\no\x3o\x3o\x3"+
		"o\x3o\x3o\x3o\x3o\x3o\x5o\x8B2\no\x3o\x3o\x5o\x8B6\no\x3o\x3o\x3o\x5o"+
		"\x8BB\no\x3o\x3o\x5o\x8BF\no\x3o\x3o\x3o\x5o\x8C4\no\x3o\x3o\x5o\x8C8"+
		"\no\x3o\x3o\x3o\x5o\x8CD\no\x3o\x3o\x5o\x8D1\no\x3o\x3o\x3o\x5o\x8D6\n"+
		"o\x3o\x3o\x5o\x8DA\no\x3o\x3o\x3o\x5o\x8DF\no\x3o\x3o\x5o\x8E3\no\x3o"+
		"\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x3o\x5o\x8F2\no\x3o\x3o\x5"+
		"o\x8F6\no\x3o\x3o\x3o\x5o\x8FB\no\x3o\x3o\x5o\x8FF\no\x3o\x3o\x3o\x3o"+
		"\x3o\x3o\ao\x907\no\fo\xEo\x90A\vo\x3p\x3p\x3p\x5p\x90F\np\x3p\x3p\x3"+
		"p\x5p\x914\np\x3p\x3p\x3q\x3q\x5q\x91A\nq\x3q\x3q\x5q\x91E\nq\x3q\aq\x921"+
		"\nq\fq\xEq\x924\vq\x3r\x3r\x5r\x928\nr\x3r\x3r\x5r\x92C\nr\x3r\x3r\x5"+
		"r\x930\nr\x5r\x932\nr\x3r\x3r\x5r\x936\nr\x5r\x938\nr\x3r\x5r\x93B\nr"+
		"\x3r\x3r\x5r\x93F\nr\x3s\x3s\x3s\x3s\x6s\x945\ns\rs\xEs\x946\x3s\as\x94A"+
		"\ns\fs\xEs\x94D\vs\x3s\as\x950\ns\fs\xEs\x953\vs\x3s\x3s\x3t\x3t\x3t\x3"+
		"t\x5t\x95B\nt\x3t\x3t\x5t\x95F\nt\x3t\x3t\x3u\x3u\x3u\x3u\x6u\x967\nu"+
		"\ru\xEu\x968\x3u\x3u\x6u\x96D\nu\ru\xEu\x96E\x5u\x971\nu\x3u\x3u\x3v\x3"+
		"v\x3v\x3v\x5v\x979\nv\x3v\x3v\x5v\x97D\nv\x3v\x5v\x980\nv\x3w\x3w\x5w"+
		"\x984\nw\x3x\x3x\x3x\x3x\x5x\x98A\nx\x3x\x5x\x98D\nx\x3x\x3x\x5x\x991"+
		"\nx\x3x\x3x\x5x\x995\nx\x3x\x3x\x5x\x999\nx\x3y\x3y\x3y\x5y\x99E\ny\x3"+
		"y\x3y\x5y\x9A2\ny\x3y\x3y\x5y\x9A6\ny\x3y\x5y\x9A9\ny\x3y\x3y\x5y\x9AD"+
		"\ny\x3y\x3y\x5y\x9B1\ny\x3y\x3y\x5y\x9B5\ny\x3z\x3z\x5z\x9B9\nz\x3{\x3"+
		"{\x3{\x5{\x9BE\n{\x3|\x5|\x9C1\n|\x3|\x3|\x3|\x5|\x9C6\n|\x3|\x3|\x5|"+
		"\x9CA\n|\x3|\x5|\x9CD\n|\x3}\x3}\x3}\x3}\x5}\x9D3\n}\x3~\x3~\x5~\x9D7"+
		"\n~\x3~\x5~\x9DA\n~\x3\x7F\x3\x7F\x3\x7F\x5\x7F\x9DF\n\x7F\x3\x7F\x5\x7F"+
		"\x9E2\n\x7F\x3\x7F\x5\x7F\x9E5\n\x7F\x3\x7F\x3\x7F\x5\x7F\x9E9\n\x7F\x3"+
		"\x7F\x3\x7F\x5\x7F\x9ED\n\x7F\x5\x7F\x9EF\n\x7F\x3\x7F\x3\x7F\x5\x7F\x9F3"+
		"\n\x7F\x3\x80\x3\x80\x5\x80\x9F7\n\x80\x3\x80\x5\x80\x9FA\n\x80\x3\x80"+
		"\x3\x80\x5\x80\x9FE\n\x80\x3\x80\x3\x80\x5\x80\xA02\n\x80\x5\x80\xA04"+
		"\n\x80\x3\x80\x3\x80\x3\x81\x3\x81\x5\x81\xA0A\n\x81\x3\x81\x6\x81\xA0D"+
		"\n\x81\r\x81\xE\x81\xA0E\x3\x81\x5\x81\xA12\n\x81\x3\x82\x5\x82\xA15\n"+
		"\x82\x3\x82\x3\x82\x3\x82\x5\x82\xA1A\n\x82\x3\x83\x3\x83\x3\x84\x5\x84"+
		"\xA1F\n\x84\x3\x84\x5\x84\xA22\n\x84\x3\x84\x3\x84\x5\x84\xA26\n\x84\a"+
		"\x84\xA28\n\x84\f\x84\xE\x84\xA2B\v\x84\x3\x84\x3\x84\x5\x84\xA2F\n\x84"+
		"\x3\x84\x3\x84\x5\x84\xA33\n\x84\x3\x84\x5\x84\xA36\n\x84\a\x84\xA38\n"+
		"\x84\f\x84\xE\x84\xA3B\v\x84\x3\x85\x3\x85\x5\x85\xA3F\n\x85\x3\x85\x3"+
		"\x85\x3\x86\x3\x86\x3\x86\x5\x86\xA46\n\x86\x3\x87\x3\x87\x5\x87\xA4A"+
		"\n\x87\x3\x87\x3\x87\x5\x87\xA4E\n\x87\x3\x87\x3\x87\x5\x87\xA52\n\x87"+
		"\x3\x87\a\x87\xA55\n\x87\f\x87\xE\x87\xA58\v\x87\x5\x87\xA5A\n\x87\x3"+
		"\x87\x5\x87\xA5D\n\x87\x3\x87\x3\x87\x3\x88\x3\x88\x5\x88\xA63\n\x88\x3"+
		"\x88\x3\x88\x5\x88\xA67\n\x88\x3\x88\x3\x88\x5\x88\xA6B\n\x88\x3\x88\x3"+
		"\x88\x5\x88\xA6F\n\x88\x3\x88\x5\x88\xA72\n\x88\x3\x88\x3\x88\x5\x88\xA76"+
		"\n\x88\x3\x88\x5\x88\xA79\n\x88\x3\x88\x3\x88\x5\x88\xA7D\n\x88\x3\x88"+
		"\x5\x88\xA80\n\x88\x3\x88\x5\x88\xA83\n\x88\x3\x89\x3\x89\x5\x89\xA87"+
		"\n\x89\x3\x89\x3\x89\x5\x89\xA8B\n\x89\x3\x8A\x3\x8A\x5\x8A\xA8F\n\x8A"+
		"\x3\x8A\x3\x8A\x5\x8A\xA93\n\x8A\x3\x8A\a\x8A\xA96\n\x8A\f\x8A\xE\x8A"+
		"\xA99\v\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x5\x8B\xAA0\n\x8B\x3\x8B"+
		"\x3\x8B\x3\x8C\x3\x8C\x6\x8C\xAA6\n\x8C\r\x8C\xE\x8C\xAA7\x3\x8C\x3\x8C"+
		"\x3\x8C\x6\x8C\xAAD\n\x8C\r\x8C\xE\x8C\xAAE\x3\x8C\x5\x8C\xAB2\n\x8C\x3"+
		"\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D\xAB8\n\x8D\x3\x8D\x3\x8D\x3\x8D\x5\x8D"+
		"\xABD\n\x8D\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x8F\a\x8F\xAC4\n\x8F\f\x8F"+
		"\xE\x8F\xAC7\v\x8F\x3\x8F\x3\x8F\x3\x8F\x6\x8F\xACC\n\x8F\r\x8F\xE\x8F"+
		"\xACD\x5\x8F\xAD0\n\x8F\x3\x90\x3\x90\x3\x91\x3\x91\x3\x91\a\x91\xAD7"+
		"\n\x91\f\x91\xE\x91\xADA\v\x91\x3\x92\x3\x92\x5\x92\xADE\n\x92\x3\x92"+
		"\x3\x92\x5\x92\xAE2\n\x92\x3\x93\x3\x93\x5\x93\xAE6\n\x93\x3\x93\x3\x93"+
		"\x5\x93\xAEA\n\x93\x3\x93\x5\x93\xAED\n\x93\x3\x94\x3\x94\x3\x94\x3\x95"+
		"\x3\x95\x3\x96\x3\x96\x3\x97\x3\x97\x3\x98\x3\x98\x5\x98\xAFA\n\x98\x3"+
		"\x98\x5\x98\xAFD\n\x98\x3\x98\x3\x98\x5\x98\xB01\n\x98\x3\x98\x5\x98\xB04"+
		"\n\x98\x3\x99\x3\x99\x3\x9A\x3\x9A\x3\x9B\x3\x9B\x3\x9B\x2\x2\x3\xDC\x9C"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2"+
		"N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2"+
		"l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88"+
		"\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C"+
		"\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0"+
		"\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4"+
		"\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8"+
		"\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC"+
		"\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100"+
		"\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112"+
		"\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124"+
		"\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x2"+
		"\x17\x4\x2\xE\xE\xA1\xA1\x3\x2\x1D(\x4\x2\xAA\xAA\xAE\xAE\x3\x2?\x43\x5"+
		"\x2\xBC\xBC\xC6\xC6\xCB\xCB\x3\x2rs\a\x2\t\t\xE\xEQQ{{\x85\x85\x4\x2\x88"+
		"\x89\xB2\xB2\x4\x2^`\x98\x98\x4\x2\xB8\xB8\xCF\xCF\x4\x2\x9A\x9A\xA0\xA0"+
		"\x4\x2\x10\x11||\x3\x2\x10\x11\r\x2\xF\xF\x12\x12\x19\x19\x1B\x1B,,SS"+
		"WWpp\x99\x99\x9E\x9E\xAB\xAB\t\x2RR\\\\\xBC\xBC\xBE\xBF\xC1\xC1\xC4\xC4"+
		"\xC8\xC8\x6\x2\x44\x44no\xA5\xA5\xD2\xD8\x4\x2\x7F\x7F\x83\x83\x5\x2J"+
		"J\x7F\x7F\x83\x83\b\x2\xB4\xB4\xB6\xB6\xBA\xBA\xBD\xBD\xC0\xC0\xC9\xC9"+
		"\x6\x2\x46\x46JJ\x7F\x7F\x83\x83\r\x2\x3\f\xE/\x38\x38:>\x44\\\x61\x61"+
		"\x66qtuz\x7F\x83\x88\x8A\xB3\xCC4\x2\x136\x3\x2\x2\x2\x4\x13A\x3\x2\x2"+
		"\x2\x6\x184\x3\x2\x2\x2\b\x188\x3\x2\x2\x2\n\x19C\x3\x2\x2\x2\f\x19E\x3"+
		"\x2\x2\x2\xE\x1A0\x3\x2\x2\x2\x10\x1A7\x3\x2\x2\x2\x12\x1B8\x3\x2\x2\x2"+
		"\x14\x1C9\x3\x2\x2\x2\x16\x1D3\x3\x2\x2\x2\x18\x1DF\x3\x2\x2\x2\x1A\x1E1"+
		"\x3\x2\x2\x2\x1C\x1F9\x3\x2\x2\x2\x1E\x1FC\x3\x2\x2\x2 \x21A\x3\x2\x2"+
		"\x2\"\x21D\x3\x2\x2\x2$\x23B\x3\x2\x2\x2&\x240\x3\x2\x2\x2(\x260\x3\x2"+
		"\x2\x2*\x262\x3\x2\x2\x2,\x264\x3\x2\x2\x2.\x266\x3\x2\x2\x2\x30\x27E"+
		"\x3\x2\x2\x2\x32\x2D0\x3\x2\x2\x2\x34\x2D2\x3\x2\x2\x2\x36\x2DF\x3\x2"+
		"\x2\x2\x38\x2E1\x3\x2\x2\x2:\x2E5\x3\x2\x2\x2<\x2E9\x3\x2\x2\x2>\x2FE"+
		"\x3\x2\x2\x2@\x310\x3\x2\x2\x2\x42\x321\x3\x2\x2\x2\x44\x32E\x3\x2\x2"+
		"\x2\x46\x352\x3\x2\x2\x2H\x362\x3\x2\x2\x2J\x3AC\x3\x2\x2\x2L\x3AE\x3"+
		"\x2\x2\x2N\x3B3\x3\x2\x2\x2P\x3C5\x3\x2\x2\x2R\x3D5\x3\x2\x2\x2T\x3E5"+
		"\x3\x2\x2\x2V\x3EC\x3\x2\x2\x2X\x3F6\x3\x2\x2\x2Z\x3F8\x3\x2\x2\x2\\\x404"+
		"\x3\x2\x2\x2^\x422\x3\x2\x2\x2`\x456\x3\x2\x2\x2\x62\x478\x3\x2\x2\x2"+
		"\x64\x48E\x3\x2\x2\x2\x66\x492\x3\x2\x2\x2h\x4AF\x3\x2\x2\x2j\x4B1\x3"+
		"\x2\x2\x2l\x4C3\x3\x2\x2\x2n\x4C5\x3\x2\x2\x2p\x4D7\x3\x2\x2\x2r\x4E5"+
		"\x3\x2\x2\x2t\x4E9\x3\x2\x2\x2v\x4F8\x3\x2\x2\x2x\x4FE\x3\x2\x2\x2z\x50A"+
		"\x3\x2\x2\x2|\x516\x3\x2\x2\x2~\x51A\x3\x2\x2\x2\x80\x52D\x3\x2\x2\x2"+
		"\x82\x539\x3\x2\x2\x2\x84\x545\x3\x2\x2\x2\x86\x557\x3\x2\x2\x2\x88\x569"+
		"\x3\x2\x2\x2\x8A\x577\x3\x2\x2\x2\x8C\x585\x3\x2\x2\x2\x8E\x589\x3\x2"+
		"\x2\x2\x90\x591\x3\x2\x2\x2\x92\x59E\x3\x2\x2\x2\x94\x5B2\x3\x2\x2\x2"+
		"\x96\x5C6\x3\x2\x2\x2\x98\x608\x3\x2\x2\x2\x9A\x61B\x3\x2\x2\x2\x9C\x61D"+
		"\x3\x2\x2\x2\x9E\x62D\x3\x2\x2\x2\xA0\x655\x3\x2\x2\x2\xA2\x676\x3\x2"+
		"\x2\x2\xA4\x694\x3\x2\x2\x2\xA6\x6AA\x3\x2\x2\x2\xA8\x6BD\x3\x2\x2\x2"+
		"\xAA\x6C2\x3\x2\x2\x2\xAC\x6D6\x3\x2\x2\x2\xAE\x6E7\x3\x2\x2\x2\xB0\x6E9"+
		"\x3\x2\x2\x2\xB2\x6F1\x3\x2\x2\x2\xB4\x6F3\x3\x2\x2\x2\xB6\x6F7\x3\x2"+
		"\x2\x2\xB8\x703\x3\x2\x2\x2\xBA\x70F\x3\x2\x2\x2\xBC\x72B\x3\x2\x2\x2"+
		"\xBE\x737\x3\x2\x2\x2\xC0\x74C\x3\x2\x2\x2\xC2\x779\x3\x2\x2\x2\xC4\x78C"+
		"\x3\x2\x2\x2\xC6\x78E\x3\x2\x2\x2\xC8\x79B\x3\x2\x2\x2\xCA\x7A7\x3\x2"+
		"\x2\x2\xCC\x7B3\x3\x2\x2\x2\xCE\x7B8\x3\x2\x2\x2\xD0\x7D6\x3\x2\x2\x2"+
		"\xD2\x7E3\x3\x2\x2\x2\xD4\x7F5\x3\x2\x2\x2\xD6\x80F\x3\x2\x2\x2\xD8\x818"+
		"\x3\x2\x2\x2\xDA\x81C\x3\x2\x2\x2\xDC\x868\x3\x2\x2\x2\xDE\x90E\x3\x2"+
		"\x2\x2\xE0\x917\x3\x2\x2\x2\xE2\x925\x3\x2\x2\x2\xE4\x940\x3\x2\x2\x2"+
		"\xE6\x956\x3\x2\x2\x2\xE8\x962\x3\x2\x2\x2\xEA\x974\x3\x2\x2\x2\xEC\x983"+
		"\x3\x2\x2\x2\xEE\x985\x3\x2\x2\x2\xF0\x99A\x3\x2\x2\x2\xF2\x9B8\x3\x2"+
		"\x2\x2\xF4\x9BA\x3\x2\x2\x2\xF6\x9C0\x3\x2\x2\x2\xF8\x9D2\x3\x2\x2\x2"+
		"\xFA\x9D4\x3\x2\x2\x2\xFC\x9DE\x3\x2\x2\x2\xFE\x9F4\x3\x2\x2\x2\x100\xA09"+
		"\x3\x2\x2\x2\x102\xA14\x3\x2\x2\x2\x104\xA1B\x3\x2\x2\x2\x106\xA29\x3"+
		"\x2\x2\x2\x108\xA3E\x3\x2\x2\x2\x10A\xA42\x3\x2\x2\x2\x10C\xA47\x3\x2"+
		"\x2\x2\x10E\xA62\x3\x2\x2\x2\x110\xA84\x3\x2\x2\x2\x112\xA8C\x3\x2\x2"+
		"\x2\x114\xA9F\x3\x2\x2\x2\x116\xAB1\x3\x2\x2\x2\x118\xAB3\x3\x2\x2\x2"+
		"\x11A\xABE\x3\x2\x2\x2\x11C\xACF\x3\x2\x2\x2\x11E\xAD1\x3\x2\x2\x2\x120"+
		"\xAD3\x3\x2\x2\x2\x122\xADB\x3\x2\x2\x2\x124\xAE3\x3\x2\x2\x2\x126\xAEE"+
		"\x3\x2\x2\x2\x128\xAF1\x3\x2\x2\x2\x12A\xAF3\x3\x2\x2\x2\x12C\xAF5\x3"+
		"\x2\x2\x2\x12E\xAF9\x3\x2\x2\x2\x130\xB05\x3\x2\x2\x2\x132\xB07\x3\x2"+
		"\x2\x2\x134\xB09\x3\x2\x2\x2\x136\x137\x5\x4\x3\x2\x137\x138\a\x2\x2\x3"+
		"\x138\x3\x3\x2\x2\x2\x139\x13B\a\xDF\x2\x2\x13A\x139\x3\x2\x2\x2\x13A"+
		"\x13B\x3\x2\x2\x2\x13B\x13F\x3\x2\x2\x2\x13C\x13E\a\xDD\x2\x2\x13D\x13C"+
		"\x3\x2\x2\x2\x13E\x141\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2\x13F\x140\x3"+
		"\x2\x2\x2\x140\x148\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x142\x144\x5\xE"+
		"\b\x2\x143\x145\a\xDD\x2\x2\x144\x143\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2"+
		"\x146\x144\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x149\x3\x2\x2\x2\x148"+
		"\x142\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14B\x3\x2\x2\x2\x14A\x14C"+
		"\x5\x6\x4\x2\x14B\x14A\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x150\x3"+
		"\x2\x2\x2\x14D\x14F\a\xDD\x2\x2\x14E\x14D\x3\x2\x2\x2\x14F\x152\x3\x2"+
		"\x2\x2\x150\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x154\x3\x2\x2"+
		"\x2\x152\x150\x3\x2\x2\x2\x153\x155\x5\x1E\x10\x2\x154\x153\x3\x2\x2\x2"+
		"\x154\x155\x3\x2\x2\x2\x155\x159\x3\x2\x2\x2\x156\x158\a\xDD\x2\x2\x157"+
		"\x156\x3\x2\x2\x2\x158\x15B\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x159\x15A"+
		"\x3\x2\x2\x2\x15A\x15D\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15C\x15E\x5"+
		"\x10\t\x2\x15D\x15C\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x162\x3\x2"+
		"\x2\x2\x15F\x161\a\xDD\x2\x2\x160\x15F\x3\x2\x2\x2\x161\x164\x3\x2\x2"+
		"\x2\x162\x160\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163\x166\x3\x2\x2\x2"+
		"\x164\x162\x3\x2\x2\x2\x165\x167\x5\x14\v\x2\x166\x165\x3\x2\x2\x2\x166"+
		"\x167\x3\x2\x2\x2\x167\x16B\x3\x2\x2\x2\x168\x16A\a\xDD\x2\x2\x169\x168"+
		"\x3\x2\x2\x2\x16A\x16D\x3\x2\x2\x2\x16B\x169\x3\x2\x2\x2\x16B\x16C\x3"+
		"\x2\x2\x2\x16C\x16F\x3\x2\x2\x2\x16D\x16B\x3\x2\x2\x2\x16E\x170\x5\x16"+
		"\f\x2\x16F\x16E\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2\x170\x174\x3\x2\x2\x2"+
		"\x171\x173\a\xDD\x2\x2\x172\x171\x3\x2\x2\x2\x173\x176\x3\x2\x2\x2\x174"+
		"\x172\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x178\x3\x2\x2\x2\x176\x174"+
		"\x3\x2\x2\x2\x177\x179\x5\x1A\xE\x2\x178\x177\x3\x2\x2\x2\x178\x179\x3"+
		"\x2\x2\x2\x179\x17D\x3\x2\x2\x2\x17A\x17C\a\xDD\x2\x2\x17B\x17A\x3\x2"+
		"\x2\x2\x17C\x17F\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17D\x17E\x3\x2\x2"+
		"\x2\x17E\x181\x3\x2\x2\x2\x17F\x17D\x3\x2\x2\x2\x180\x182\a\xDF\x2\x2"+
		"\x181\x180\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x5\x3\x2\x2\x2\x183"+
		"\x185\x5\b\x5\x2\x184\x183\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186\x184"+
		"\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\a\x3\x2\x2\x2\x188\x18A\ap\x2"+
		"\x2\x189\x18B\a\xDF\x2\x2\x18A\x189\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2"+
		"\x18B\x18C\x3\x2\x2\x2\x18C\x18E\a\xBC\x2\x2\x18D\x18F\a\xDF\x2\x2\x18E"+
		"\x18D\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2\x190\x191"+
		"\x5\n\x6\x2\x191\x193\a\xCF\x2\x2\x192\x194\a\xDF\x2\x2\x193\x192\x3\x2"+
		"\x2\x2\x193\x194\x3\x2\x2\x2\x194\x195\x3\x2\x2\x2\x195\x199\x5\f\a\x2"+
		"\x196\x198\a\xDD\x2\x2\x197\x196\x3\x2\x2\x2\x198\x19B\x3\x2\x2\x2\x199"+
		"\x197\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A\t\x3\x2\x2\x2\x19B\x199\x3"+
		"\x2\x2\x2\x19C\x19D\a\xD2\x2\x2\x19D\v\x3\x2\x2\x2\x19E\x19F\a\xD2\x2"+
		"\x2\x19F\r\x3\x2\x2\x2\x1A0\x1A1\a\xAC\x2\x2\x1A1\x1A2\a\xDF\x2\x2\x1A2"+
		"\x1A5\a\xD6\x2\x2\x1A3\x1A4\a\xDF\x2\x2\x1A4\x1A6\a\x17\x2\x2\x1A5\x1A3"+
		"\x3\x2\x2\x2\x1A5\x1A6\x3\x2\x2\x2\x1A6\xF\x3\x2\x2\x2\x1A7\x1A9\a\f\x2"+
		"\x2\x1A8\x1AA\a\xDD\x2\x2\x1A9\x1A8\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2"+
		"\x1AB\x1A9\x3\x2\x2\x2\x1AB\x1AC\x3\x2\x2\x2\x1AC\x1AE\x3\x2\x2\x2\x1AD"+
		"\x1AF\x5\x12\n\x2\x1AE\x1AD\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1AE"+
		"\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B2\x3\x2\x2\x2\x1B2\x1B4\a\x38"+
		"\x2\x2\x1B3\x1B5\a\xDD\x2\x2\x1B4\x1B3\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2"+
		"\x2\x1B6\x1B4\x3\x2\x2\x2\x1B6\x1B7\x3\x2\x2\x2\x1B7\x11\x3\x2\x2\x2\x1B8"+
		"\x1BA\x5\x116\x8C\x2\x1B9\x1BB\a\xDF\x2\x2\x1BA\x1B9\x3\x2\x2\x2\x1BA"+
		"\x1BB\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BE\a\xBC\x2\x2\x1BD\x1BF"+
		"\a\xDF\x2\x2\x1BE\x1BD\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C0\x3"+
		"\x2\x2\x2\x1C0\x1C1\x5\x128\x95\x2\x1C1\x1C2\a\xDD\x2\x2\x1C2\x13\x3\x2"+
		"\x2\x2\x1C3\x1C5\x5.\x18\x2\x1C4\x1C6\a\xDD\x2\x2\x1C5\x1C4\x3\x2\x2\x2"+
		"\x1C6\x1C7\x3\x2\x2\x2\x1C7\x1C5\x3\x2\x2\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8"+
		"\x1CA\x3\x2\x2\x2\x1C9\x1C3\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1C9"+
		"\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC\x15\x3\x2\x2\x2\x1CD\x1CF\x5\x18"+
		"\r\x2\x1CE\x1D0\a\xDD\x2\x2\x1CF\x1CE\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2"+
		"\x1D1\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2\x1D4\x3\x2\x2\x2\x1D3"+
		"\x1CD\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D3\x3\x2\x2\x2\x1D5\x1D6"+
		"\x3\x2\x2\x2\x1D6\x17\x3\x2\x2\x2\x1D7\x1D8\av\x2\x2\x1D8\x1D9\a\xDF\x2"+
		"\x2\x1D9\x1E0\a\xD5\x2\x2\x1DA\x1DB\ax\x2\x2\x1DB\x1DC\a\xDF\x2\x2\x1DC"+
		"\x1E0\t\x2\x2\x2\x1DD\x1E0\aw\x2\x2\x1DE\x1E0\ay\x2\x2\x1DF\x1D7\x3\x2"+
		"\x2\x2\x1DF\x1DA\x3\x2\x2\x2\x1DF\x1DD\x3\x2\x2\x2\x1DF\x1DE\x3\x2\x2"+
		"\x2\x1E0\x19\x3\x2\x2\x2\x1E1\x1EA\x5\x1C\xF\x2\x1E2\x1E4\a\xDD\x2\x2"+
		"\x1E3\x1E2\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2\x2\x1E5"+
		"\x1E6\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1E9\x5\x1C\xF\x2\x1E8\x1E3"+
		"\x3\x2\x2\x2\x1E9\x1EC\x3\x2\x2\x2\x1EA\x1E8\x3\x2\x2\x2\x1EA\x1EB\x3"+
		"\x2\x2\x2\x1EB\x1B\x3\x2\x2\x2\x1EC\x1EA\x3\x2\x2\x2\x1ED\x1FA\x5,\x17"+
		"\x2\x1EE\x1FA\x5\x18\r\x2\x1EF\x1FA\x5\x44#\x2\x1F0\x1FA\x5N(\x2\x1F1"+
		"\x1FA\x5V,\x2\x1F2\x1FA\x5`\x31\x2\x1F3\x1FA\x5\x82\x42\x2\x1F4\x1FA\x5"+
		"\x9EP\x2\x1F5\x1FA\x5\xA0Q\x2\x1F6\x1FA\x5\xA2R\x2\x1F7\x1FA\x5\xCEh\x2"+
		"\x1F8\x1FA\x5\xD2j\x2\x1F9\x1ED\x3\x2\x2\x2\x1F9\x1EE\x3\x2\x2\x2\x1F9"+
		"\x1EF\x3\x2\x2\x2\x1F9\x1F0\x3\x2\x2\x2\x1F9\x1F1\x3\x2\x2\x2\x1F9\x1F2"+
		"\x3\x2\x2\x2\x1F9\x1F3\x3\x2\x2\x2\x1F9\x1F4\x3\x2\x2\x2\x1F9\x1F5\x3"+
		"\x2\x2\x2\x1F9\x1F6\x3\x2\x2\x2\x1F9\x1F7\x3\x2\x2\x2\x1F9\x1F8\x3\x2"+
		"\x2\x2\x1FA\x1D\x3\x2\x2\x2\x1FB\x1FD\a\xDF\x2\x2\x1FC\x1FB\x3\x2\x2\x2"+
		"\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x1FF\a\f\x2\x2\x1FF"+
		"\x200\a\xDF\x2\x2\x200\x201\x5(\x15\x2\x201\x202\a\xDF\x2\x2\x202\x204"+
		"\x5*\x16\x2\x203\x205\a\xDF\x2\x2\x204\x203\x3\x2\x2\x2\x204\x205\x3\x2"+
		"\x2\x2\x205\x207\x3\x2\x2\x2\x206\x208\a\xDD\x2\x2\x207\x206\x3\x2\x2"+
		"\x2\x208\x209\x3\x2\x2\x2\x209\x207\x3\x2\x2\x2\x209\x20A\x3\x2\x2\x2"+
		"\x20A\x20C\x3\x2\x2\x2\x20B\x20D\x5 \x11\x2\x20C\x20B\x3\x2\x2\x2\x20D"+
		"\x20E\x3\x2\x2\x2\x20E\x20C\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2\x20F\x210"+
		"\x3\x2\x2\x2\x210\x214\a\x38\x2\x2\x211\x213\a\xDD\x2\x2\x212\x211\x3"+
		"\x2\x2\x2\x213\x216\x3\x2\x2\x2\x214\x212\x3\x2\x2\x2\x214\x215\x3\x2"+
		"\x2\x2\x215\x1F\x3\x2\x2\x2\x216\x214\x3\x2\x2\x2\x217\x21B\x5\"\x12\x2"+
		"\x218\x21B\x5&\x14\x2\x219\x21B\x5\x1E\x10\x2\x21A\x217\x3\x2\x2\x2\x21A"+
		"\x218\x3\x2\x2\x2\x21A\x219\x3\x2\x2\x2\x21B!\x3\x2\x2\x2\x21C\x21E\a"+
		"\xDF\x2\x2\x21D\x21C\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x21F\x3\x2"+
		"\x2\x2\x21F\x221\x5$\x13\x2\x220\x222\a\xDF\x2\x2\x221\x220\x3\x2\x2\x2"+
		"\x221\x222\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2\x223\x225\a\xBC\x2\x2\x224"+
		"\x226\a\xDF\x2\x2\x225\x224\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x228"+
		"\x3\x2\x2\x2\x227\x229\a\xBA\x2\x2\x228\x227\x3\x2\x2\x2\x228\x229\x3"+
		"\x2\x2\x2\x229\x22F\x3\x2\x2\x2\x22A\x230\x5\x128\x95\x2\x22B\x22C\a\xC2"+
		"\x2\x2\x22C\x22D\x5\x116\x8C\x2\x22D\x22E\a\xCD\x2\x2\x22E\x230\x3\x2"+
		"\x2\x2\x22F\x22A\x3\x2\x2\x2\x22F\x22B\x3\x2\x2\x2\x230\x232\x3\x2\x2"+
		"\x2\x231\x233\a\xD9\x2\x2\x232\x231\x3\x2\x2\x2\x232\x233\x3\x2\x2\x2"+
		"\x233\x235\x3\x2\x2\x2\x234\x236\a\xDD\x2\x2\x235\x234\x3\x2\x2\x2\x236"+
		"\x237\x3\x2\x2\x2\x237\x235\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238#\x3"+
		"\x2\x2\x2\x239\x23A\ap\x2\x2\x23A\x23C\a\xBB\x2\x2\x23B\x239\x3\x2\x2"+
		"\x2\x23B\x23C\x3\x2\x2\x2\x23C\x23D\x3\x2\x2\x2\x23D\x23E\x5\x120\x91"+
		"\x2\x23E%\x3\x2\x2\x2\x23F\x241\a\xDF\x2\x2\x240\x23F\x3\x2\x2\x2\x240"+
		"\x241\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2\x242\x243\a\r\x2\x2\x243\x244"+
		"\a\xDF\x2\x2\x244\x248\x5\x116\x8C\x2\x245\x246\a\xC3\x2\x2\x246\x247"+
		"\a\xD5\x2\x2\x247\x249\a\xCE\x2\x2\x248\x245\x3\x2\x2\x2\x248\x249\x3"+
		"\x2\x2\x2\x249\x24C\x3\x2\x2\x2\x24A\x24B\a\xDF\x2\x2\x24B\x24D\a\xDA"+
		"\x2\x2\x24C\x24A\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x24F\x3\x2\x2"+
		"\x2\x24E\x250\a\xDD\x2\x2\x24F\x24E\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2"+
		"\x251\x24F\x3\x2\x2\x2\x251\x252\x3\x2\x2\x2\x252\x258\x3\x2\x2\x2\x253"+
		"\x255\x5 \x11\x2\x254\x253\x3\x2\x2\x2\x255\x256\x3\x2\x2\x2\x256\x254"+
		"\x3\x2\x2\x2\x256\x257\x3\x2\x2\x2\x257\x259\x3\x2\x2\x2\x258\x254\x3"+
		"\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25C\a\x39"+
		"\x2\x2\x25B\x25D\a\xDD\x2\x2\x25C\x25B\x3\x2\x2\x2\x25D\x25E\x3\x2\x2"+
		"\x2\x25E\x25C\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\'\x3\x2\x2\x2\x260"+
		"\x261\x5\x120\x91\x2\x261)\x3\x2\x2\x2\x262\x263\x5\x116\x8C\x2\x263+"+
		"\x3\x2\x2\x2\x264\x265\x5\x30\x19\x2\x265-\x3\x2\x2\x2\x266\x267\a\a\x2"+
		"\x2\x267\x268\a\xDF\x2\x2\x268\x26A\x5\xF8}\x2\x269\x26B\a\xDF\x2\x2\x26A"+
		"\x269\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2\x26C\x26E"+
		"\a\xBC\x2\x2\x26D\x26F\a\xDF\x2\x2\x26E\x26D\x3\x2\x2\x2\x26E\x26F\x3"+
		"\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x27B\x5\x128\x95\x2\x271\x273\a\xDF"+
		"\x2\x2\x272\x271\x3\x2\x2\x2\x272\x273\x3\x2\x2\x2\x273\x274\x3\x2\x2"+
		"\x2\x274\x276\a\xB8\x2\x2\x275\x277\a\xDF\x2\x2\x276\x275\x3\x2\x2\x2"+
		"\x276\x277\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278\x27A\x5\x128\x95\x2"+
		"\x279\x272\x3\x2\x2\x2\x27A\x27D\x3\x2\x2\x2\x27B\x279\x3\x2\x2\x2\x27B"+
		"\x27C\x3\x2\x2\x2\x27C/\x3\x2\x2\x2\x27D\x27B\x3\x2\x2\x2\x27E\x28A\x5"+
		"\x32\x1A\x2\x27F\x281\a\xDD\x2\x2\x280\x27F\x3\x2\x2\x2\x281\x282\x3\x2"+
		"\x2\x2\x282\x280\x3\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x285\x3\x2\x2"+
		"\x2\x284\x286\a\xDF\x2\x2\x285\x284\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2"+
		"\x286\x287\x3\x2\x2\x2\x287\x289\x5\x32\x1A\x2\x288\x280\x3\x2\x2\x2\x289"+
		"\x28C\x3\x2\x2\x2\x28A\x288\x3\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28B\x31"+
		"\x3\x2\x2\x2\x28C\x28A\x3\x2\x2\x2\x28D\x2D1\x5\x34\x1B\x2\x28E\x2D1\x5"+
		".\x18\x2\x28F\x2D1\x5\x36\x1C\x2\x290\x2D1\x5\x38\x1D\x2\x291\x2D1\x5"+
		":\x1E\x2\x292\x2D1\x5<\x1F\x2\x293\x2D1\x5> \x2\x294\x2D1\x5\x42\"\x2"+
		"\x295\x2D1\x5H%\x2\x296\x2D1\x5\x46$\x2\x297\x2D1\x5J&\x2\x298\x2D1\x5"+
		"L\'\x2\x299\x2D1\x5R*\x2\x29A\x2D1\x5T+\x2\x29B\x2D1\x5X-\x2\x29C\x2D1"+
		"\x5\xECw\x2\x29D\x2D1\x5Z.\x2\x29E\x2D1\x5\\/\x2\x29F\x2D1\x5^\x30\x2"+
		"\x2A0\x2D1\x5\x62\x32\x2\x2A1\x2D1\x5\x64\x33\x2\x2A2\x2D1\x5\x66\x34"+
		"\x2\x2A3\x2D1\x5h\x35\x2\x2A4\x2D1\x5r:\x2\x2A5\x2D1\x5t;\x2\x2A6\x2D1"+
		"\x5v<\x2\x2A7\x2D1\x5x=\x2\x2A8\x2D1\x5z>\x2\x2A9\x2D1\x5\x126\x94\x2"+
		"\x2AA\x2D1\x5|?\x2\x2AB\x2D1\x5~@\x2\x2AC\x2D1\x5\x80\x41\x2\x2AD\x2D1"+
		"\x5\x82\x42\x2\x2AE\x2D1\x5\x8A\x46\x2\x2AF\x2D1\x5\x8CG\x2\x2B0\x2D1"+
		"\x5\x8EH\x2\x2B1\x2D1\x5\x90I\x2\x2B2\x2D1\x5\x92J\x2\x2B3\x2D1\x5\x94"+
		"K\x2\x2B4\x2D1\x5\x96L\x2\x2B5\x2D1\x5\x9CO\x2\x2B6\x2D1\x5\xA4S\x2\x2B7"+
		"\x2D1\x5\xA6T\x2\x2B8\x2D1\x5\xA8U\x2\x2B9\x2D1\x5\xAAV\x2\x2BA\x2D1\x5"+
		"\xAEX\x2\x2BB\x2D1\x5\xB0Y\x2\x2BC\x2D1\x5\xB2Z\x2\x2BD\x2D1\x5\xB4[\x2"+
		"\x2BE\x2D1\x5\xB6\\\x2\x2BF\x2D1\x5\xB8]\x2\x2C0\x2D1\x5\xBA^\x2\x2C1"+
		"\x2D1\x5\xBC_\x2\x2C2\x2D1\x5\xBE`\x2\x2C3\x2D1\x5\xC6\x64\x2\x2C4\x2D1"+
		"\x5\xC8\x65\x2\x2C5\x2D1\x5\xCA\x66\x2\x2C6\x2D1\x5\xCCg\x2\x2C7\x2D1"+
		"\x5\xD0i\x2\x2C8\x2D1\x5\xD8m\x2\x2C9\x2D1\x5\xDAn\x2\x2CA\x2D1\x5\xDE"+
		"p\x2\x2CB\x2D1\x5\xE4s\x2\x2CC\x2D1\x5\xE6t\x2\x2CD\x2D1\x5\xE8u\x2\x2CE"+
		"\x2D1\x5\xEAv\x2\x2CF\x2D1\x5\xF2z\x2\x2D0\x28D\x3\x2\x2\x2\x2D0\x28E"+
		"\x3\x2\x2\x2\x2D0\x28F\x3\x2\x2\x2\x2D0\x290\x3\x2\x2\x2\x2D0\x291\x3"+
		"\x2\x2\x2\x2D0\x292\x3\x2\x2\x2\x2D0\x293\x3\x2\x2\x2\x2D0\x294\x3\x2"+
		"\x2\x2\x2D0\x295\x3\x2\x2\x2\x2D0\x296\x3\x2\x2\x2\x2D0\x297\x3\x2\x2"+
		"\x2\x2D0\x298\x3\x2\x2\x2\x2D0\x299\x3\x2\x2\x2\x2D0\x29A\x3\x2\x2\x2"+
		"\x2D0\x29B\x3\x2\x2\x2\x2D0\x29C\x3\x2\x2\x2\x2D0\x29D\x3\x2\x2\x2\x2D0"+
		"\x29E\x3\x2\x2\x2\x2D0\x29F\x3\x2\x2\x2\x2D0\x2A0\x3\x2\x2\x2\x2D0\x2A1"+
		"\x3\x2\x2\x2\x2D0\x2A2\x3\x2\x2\x2\x2D0\x2A3\x3\x2\x2\x2\x2D0\x2A4\x3"+
		"\x2\x2\x2\x2D0\x2A5\x3\x2\x2\x2\x2D0\x2A6\x3\x2\x2\x2\x2D0\x2A7\x3\x2"+
		"\x2\x2\x2D0\x2A8\x3\x2\x2\x2\x2D0\x2A9\x3\x2\x2\x2\x2D0\x2AA\x3\x2\x2"+
		"\x2\x2D0\x2AB\x3\x2\x2\x2\x2D0\x2AC\x3\x2\x2\x2\x2D0\x2AD\x3\x2\x2\x2"+
		"\x2D0\x2AE\x3\x2\x2\x2\x2D0\x2AF\x3\x2\x2\x2\x2D0\x2B0\x3\x2\x2\x2\x2D0"+
		"\x2B1\x3\x2\x2\x2\x2D0\x2B2\x3\x2\x2\x2\x2D0\x2B3\x3\x2\x2\x2\x2D0\x2B4"+
		"\x3\x2\x2\x2\x2D0\x2B5\x3\x2\x2\x2\x2D0\x2B6\x3\x2\x2\x2\x2D0\x2B7\x3"+
		"\x2\x2\x2\x2D0\x2B8\x3\x2\x2\x2\x2D0\x2B9\x3\x2\x2\x2\x2D0\x2BA\x3\x2"+
		"\x2\x2\x2D0\x2BB\x3\x2\x2\x2\x2D0\x2BC\x3\x2\x2\x2\x2D0\x2BD\x3\x2\x2"+
		"\x2\x2D0\x2BE\x3\x2\x2\x2\x2D0\x2BF\x3\x2\x2\x2\x2D0\x2C0\x3\x2\x2\x2"+
		"\x2D0\x2C1\x3\x2\x2\x2\x2D0\x2C2\x3\x2\x2\x2\x2D0\x2C3\x3\x2\x2\x2\x2D0"+
		"\x2C4\x3\x2\x2\x2\x2D0\x2C5\x3\x2\x2\x2\x2D0\x2C6\x3\x2\x2\x2\x2D0\x2C7"+
		"\x3\x2\x2\x2\x2D0\x2C8\x3\x2\x2\x2\x2D0\x2C9\x3\x2\x2\x2\x2D0\x2CA\x3"+
		"\x2\x2\x2\x2D0\x2CB\x3\x2\x2\x2\x2D0\x2CC\x3\x2\x2\x2\x2D0\x2CD\x3\x2"+
		"\x2\x2\x2D0\x2CE\x3\x2\x2\x2\x2D0\x2CF\x3\x2\x2\x2\x2D1\x33\x3\x2\x2\x2"+
		"\x2D2\x2D3\a\b\x2\x2\x2D3\x2D4\a\xDF\x2\x2\x2D4\x2DD\x5\xDCo\x2\x2D5\x2D7"+
		"\a\xDF\x2\x2\x2D6\x2D5\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D8\x3"+
		"\x2\x2\x2\x2D8\x2DA\a\xB8\x2\x2\x2D9\x2DB\a\xDF\x2\x2\x2DA\x2D9\x3\x2"+
		"\x2\x2\x2DA\x2DB\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DE\x5\xDCo\x2"+
		"\x2DD\x2D6\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2\x2DE\x35\x3\x2\x2\x2\x2DF"+
		"\x2E0\a\v\x2\x2\x2E0\x37\x3\x2\x2\x2\x2E1\x2E2\a\x15\x2\x2\x2E2\x2E3\a"+
		"\xDF\x2\x2\x2E3\x2E4\x5\xDCo\x2\x2E4\x39\x3\x2\x2\x2\x2E5\x2E6\a\x16\x2"+
		"\x2\x2E6\x2E7\a\xDF\x2\x2\x2E7\x2E8\x5\xDCo\x2\x2E8;\x3\x2\x2\x2\x2E9"+
		"\x2F9\a\x18\x2\x2\x2EA\x2EB\a\xDF\x2\x2\x2EB\x2F6\x5\xDCo\x2\x2EC\x2EE"+
		"\a\xDF\x2\x2\x2ED\x2EC\x3\x2\x2\x2\x2ED\x2EE\x3\x2\x2\x2\x2EE\x2EF\x3"+
		"\x2\x2\x2\x2EF\x2F1\a\xB8\x2\x2\x2F0\x2F2\a\xDF\x2\x2\x2F1\x2F0\x3\x2"+
		"\x2\x2\x2F1\x2F2\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x2F5\x5\xDCo\x2"+
		"\x2F4\x2ED\x3\x2\x2\x2\x2F5\x2F8\x3\x2\x2\x2\x2F6\x2F4\x3\x2\x2\x2\x2F6"+
		"\x2F7\x3\x2\x2\x2\x2F7\x2FA\x3\x2\x2\x2\x2F8\x2F6\x3\x2\x2\x2\x2F9\x2EA"+
		"\x3\x2\x2\x2\x2F9\x2FA\x3\x2\x2\x2\x2FA=\x3\x2\x2\x2\x2FB\x2FC\x5\x12C"+
		"\x97\x2\x2FC\x2FD\a\xDF\x2\x2\x2FD\x2FF\x3\x2\x2\x2\x2FE\x2FB\x3\x2\x2"+
		"\x2\x2FE\x2FF\x3\x2\x2\x2\x2FF\x300\x3\x2\x2\x2\x300\x301\a\x1A\x2\x2"+
		"\x301\x302\a\xDF\x2\x2\x302\x30D\x5@!\x2\x303\x305\a\xDF\x2\x2\x304\x303"+
		"\x3\x2\x2\x2\x304\x305\x3\x2\x2\x2\x305\x306\x3\x2\x2\x2\x306\x308\a\xB8"+
		"\x2\x2\x307\x309\a\xDF\x2\x2\x308\x307\x3\x2\x2\x2\x308\x309\x3\x2\x2"+
		"\x2\x309\x30A\x3\x2\x2\x2\x30A\x30C\x5@!\x2\x30B\x304\x3\x2\x2\x2\x30C"+
		"\x30F\x3\x2\x2\x2\x30D\x30B\x3\x2\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E?\x3"+
		"\x2\x2\x2\x30F\x30D\x3\x2\x2\x2\x310\x312\x5\x116\x8C\x2\x311\x313\x5"+
		"\x130\x99\x2\x312\x311\x3\x2\x2\x2\x312\x313\x3\x2\x2\x2\x313\x316\x3"+
		"\x2\x2\x2\x314\x315\a\xDF\x2\x2\x315\x317\x5\x118\x8D\x2\x316\x314\x3"+
		"\x2\x2\x2\x316\x317\x3\x2\x2\x2\x317\x319\x3\x2\x2\x2\x318\x31A\a\xDF"+
		"\x2\x2\x319\x318\x3\x2\x2\x2\x319\x31A\x3\x2\x2\x2\x31A\x31B\x3\x2\x2"+
		"\x2\x31B\x31D\a\xBC\x2\x2\x31C\x31E\a\xDF\x2\x2\x31D\x31C\x3\x2\x2\x2"+
		"\x31D\x31E\x3\x2\x2\x2\x31E\x31F\x3\x2\x2\x2\x31F\x320\x5\xDCo\x2\x320"+
		"\x41\x3\x2\x2\x2\x321\x323\a\x1B\x2\x2\x322\x324\a\xDF\x2\x2\x323\x322"+
		"\x3\x2\x2\x2\x323\x324\x3\x2\x2\x2\x324\x325\x3\x2\x2\x2\x325\x327\a\xBC"+
		"\x2\x2\x326\x328\a\xDF\x2\x2\x327\x326\x3\x2\x2\x2\x327\x328\x3\x2\x2"+
		"\x2\x328\x329\x3\x2\x2\x2\x329\x32A\x5\xDCo\x2\x32A\x43\x3\x2\x2\x2\x32B"+
		"\x32C\x5\x132\x9A\x2\x32C\x32D\a\xDF\x2\x2\x32D\x32F\x3\x2\x2\x2\x32E"+
		"\x32B\x3\x2\x2\x2\x32E\x32F\x3\x2\x2\x2\x32F\x330\x3\x2\x2\x2\x330\x331"+
		"\a\x1C\x2\x2\x331\x337\a\xDF\x2\x2\x332\x334\aH\x2\x2\x333\x335\x5\x130"+
		"\x99\x2\x334\x333\x3\x2\x2\x2\x334\x335\x3\x2\x2\x2\x335\x338\x3\x2\x2"+
		"\x2\x336\x338\a\x9F\x2\x2\x337\x332\x3\x2\x2\x2\x337\x336\x3\x2\x2\x2"+
		"\x338\x339\x3\x2\x2\x2\x339\x33A\a\xDF\x2\x2\x33A\x33C\x5\x116\x8C\x2"+
		"\x33B\x33D\x5\x130\x99\x2\x33C\x33B\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2"+
		"\x33D\x33E\x3\x2\x2\x2\x33E\x33F\a\xDF\x2\x2\x33F\x340\a[\x2\x2\x340\x341"+
		"\a\xDF\x2\x2\x341\x346\a\xD2\x2\x2\x342\x343\a\xDF\x2\x2\x343\x344\a\x5"+
		"\x2\x2\x344\x345\a\xDF\x2\x2\x345\x347\a\xD2\x2\x2\x346\x342\x3\x2\x2"+
		"\x2\x346\x347\x3\x2\x2\x2\x347\x34C\x3\x2\x2\x2\x348\x34A\a\xDF\x2\x2"+
		"\x349\x348\x3\x2\x2\x2\x349\x34A\x3\x2\x2\x2\x34A\x34B\x3\x2\x2\x2\x34B"+
		"\x34D\x5\x10C\x87\x2\x34C\x349\x3\x2\x2\x2\x34C\x34D\x3\x2\x2\x2\x34D"+
		"\x350\x3\x2\x2\x2\x34E\x34F\a\xDF\x2\x2\x34F\x351\x5\x118\x8D\x2\x350"+
		"\x34E\x3\x2\x2\x2\x350\x351\x3\x2\x2\x2\x351\x45\x3\x2\x2\x2\x352\x353"+
		"\t\x3\x2\x2\x353\x354\a\xDF\x2\x2\x354\x35F\x5\x124\x93\x2\x355\x357\a"+
		"\xDF\x2\x2\x356\x355\x3\x2\x2\x2\x356\x357\x3\x2\x2\x2\x357\x358\x3\x2"+
		"\x2\x2\x358\x35A\a\xB8\x2\x2\x359\x35B\a\xDF\x2\x2\x35A\x359\x3\x2\x2"+
		"\x2\x35A\x35B\x3\x2\x2\x2\x35B\x35C\x3\x2\x2\x2\x35C\x35E\x5\x124\x93"+
		"\x2\x35D\x356\x3\x2\x2\x2\x35E\x361\x3\x2\x2\x2\x35F\x35D\x3\x2\x2\x2"+
		"\x35F\x360\x3\x2\x2\x2\x360G\x3\x2\x2\x2\x361\x35F\x3\x2\x2\x2\x362\x363"+
		"\a)\x2\x2\x363\x364\a\xDF\x2\x2\x364\x366\x5\xDCo\x2\x365\x367\a\xDF\x2"+
		"\x2\x366\x365\x3\x2\x2\x2\x366\x367\x3\x2\x2\x2\x367\x368\x3\x2\x2\x2"+
		"\x368\x36A\a\xB8\x2\x2\x369\x36B\a\xDF\x2\x2\x36A\x369\x3\x2\x2\x2\x36A"+
		"\x36B\x3\x2\x2\x2\x36B\x36C\x3\x2\x2\x2\x36C\x375\x5\xDCo\x2\x36D\x36F"+
		"\a\xDF\x2\x2\x36E\x36D\x3\x2\x2\x2\x36E\x36F\x3\x2\x2\x2\x36F\x370\x3"+
		"\x2\x2\x2\x370\x372\a\xB8\x2\x2\x371\x373\a\xDF\x2\x2\x372\x371\x3\x2"+
		"\x2\x2\x372\x373\x3\x2\x2\x2\x373\x374\x3\x2\x2\x2\x374\x376\x5\xDCo\x2"+
		"\x375\x36E\x3\x2\x2\x2\x375\x376\x3\x2\x2\x2\x376I\x3\x2\x2\x2\x377\x379"+
		"\a+\x2\x2\x378\x37A\a\xDD\x2\x2\x379\x378\x3\x2\x2\x2\x37A\x37B\x3\x2"+
		"\x2\x2\x37B\x379\x3\x2\x2\x2\x37B\x37C\x3\x2\x2\x2\x37C\x383\x3\x2\x2"+
		"\x2\x37D\x37F\x5\x30\x19\x2\x37E\x380\a\xDD\x2\x2\x37F\x37E\x3\x2\x2\x2"+
		"\x380\x381\x3\x2\x2\x2\x381\x37F\x3\x2\x2\x2\x381\x382\x3\x2\x2\x2\x382"+
		"\x384\x3\x2\x2\x2\x383\x37D\x3\x2\x2\x2\x383\x384\x3\x2\x2\x2\x384\x385"+
		"\x3\x2\x2\x2\x385\x3AD\aX\x2\x2\x386\x387\a+\x2\x2\x387\x388\a\xDF\x2"+
		"\x2\x388\x389\t\x4\x2\x2\x389\x38A\a\xDF\x2\x2\x38A\x38C\x5\xDCo\x2\x38B"+
		"\x38D\a\xDD\x2\x2\x38C\x38B\x3\x2\x2\x2\x38D\x38E\x3\x2\x2\x2\x38E\x38C"+
		"\x3\x2\x2\x2\x38E\x38F\x3\x2\x2\x2\x38F\x396\x3\x2\x2\x2\x390\x392\x5"+
		"\x30\x19\x2\x391\x393\a\xDD\x2\x2\x392\x391\x3\x2\x2\x2\x393\x394\x3\x2"+
		"\x2\x2\x394\x392\x3\x2\x2\x2\x394\x395\x3\x2\x2\x2\x395\x397\x3\x2\x2"+
		"\x2\x396\x390\x3\x2\x2\x2\x396\x397\x3\x2\x2\x2\x397\x398\x3\x2\x2\x2"+
		"\x398\x399\aX\x2\x2\x399\x3AD\x3\x2\x2\x2\x39A\x39C\a+\x2\x2\x39B\x39D"+
		"\a\xDD\x2\x2\x39C\x39B\x3\x2\x2\x2\x39D\x39E\x3\x2\x2\x2\x39E\x39C\x3"+
		"\x2\x2\x2\x39E\x39F\x3\x2\x2\x2\x39F\x3A0\x3\x2\x2\x2\x3A0\x3A2\x5\x30"+
		"\x19\x2\x3A1\x3A3\a\xDD\x2\x2\x3A2\x3A1\x3\x2\x2\x2\x3A3\x3A4\x3\x2\x2"+
		"\x2\x3A4\x3A2\x3\x2\x2\x2\x3A4\x3A5\x3\x2\x2\x2\x3A5\x3A6\x3\x2\x2\x2"+
		"\x3A6\x3A7\aX\x2\x2\x3A7\x3A8\a\xDF\x2\x2\x3A8\x3A9\t\x4\x2\x2\x3A9\x3AA"+
		"\a\xDF\x2\x2\x3AA\x3AB\x5\xDCo\x2\x3AB\x3AD\x3\x2\x2\x2\x3AC\x377\x3\x2"+
		"\x2\x2\x3AC\x386\x3\x2\x2\x2\x3AC\x39A\x3\x2\x2\x2\x3ADK\x3\x2\x2\x2\x3AE"+
		"\x3AF\a\x38\x2\x2\x3AFM\x3\x2\x2\x2\x3B0\x3B1\x5\x12A\x96\x2\x3B1\x3B2"+
		"\a\xDF\x2\x2\x3B2\x3B4\x3\x2\x2\x2\x3B3\x3B0\x3\x2\x2\x2\x3B3\x3B4\x3"+
		"\x2\x2\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3B6\a:\x2\x2\x3B6\x3B7\a\xDF\x2"+
		"\x2\x3B7\x3B9\x5\x116\x8C\x2\x3B8\x3BA\a\xDD\x2\x2\x3B9\x3B8\x3\x2\x2"+
		"\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB\x3B9\x3\x2\x2\x2\x3BB\x3BC\x3\x2\x2\x2"+
		"\x3BC\x3C0\x3\x2\x2\x2\x3BD\x3BF\x5P)\x2\x3BE\x3BD\x3\x2\x2\x2\x3BF\x3C2"+
		"\x3\x2\x2\x2\x3C0\x3BE\x3\x2\x2\x2\x3C0\x3C1\x3\x2\x2\x2\x3C1\x3C3\x3"+
		"\x2\x2\x2\x3C2\x3C0\x3\x2\x2\x2\x3C3\x3C4\a\x30\x2\x2\x3C4O\x3\x2\x2\x2"+
		"\x3C5\x3CE\x5\x116\x8C\x2\x3C6\x3C8\a\xDF\x2\x2\x3C7\x3C6\x3\x2\x2\x2"+
		"\x3C7\x3C8\x3\x2\x2\x2\x3C8\x3C9\x3\x2\x2\x2\x3C9\x3CB\a\xBC\x2\x2\x3CA"+
		"\x3CC\a\xDF\x2\x2\x3CB\x3CA\x3\x2\x2\x2\x3CB\x3CC\x3\x2\x2\x2\x3CC\x3CD"+
		"\x3\x2\x2\x2\x3CD\x3CF\x5\xDCo\x2\x3CE\x3C7\x3\x2\x2\x2\x3CE\x3CF\x3\x2"+
		"\x2\x2\x3CF\x3D1\x3\x2\x2\x2\x3D0\x3D2\a\xDD\x2\x2\x3D1\x3D0\x3\x2\x2"+
		"\x2\x3D2\x3D3\x3\x2\x2\x2\x3D3\x3D1\x3\x2\x2\x2\x3D3\x3D4\x3\x2\x2\x2"+
		"\x3D4Q\x3\x2\x2\x2\x3D5\x3D6\a<\x2\x2\x3D6\x3D7\a\xDF\x2\x2\x3D7\x3E2"+
		"\x5\xDCo\x2\x3D8\x3DA\a\xDF\x2\x2\x3D9\x3D8\x3\x2\x2\x2\x3D9\x3DA\x3\x2"+
		"\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DB\x3DD\a\xB8\x2\x2\x3DC\x3DE\a\xDF\x2"+
		"\x2\x3DD\x3DC\x3\x2\x2\x2\x3DD\x3DE\x3\x2\x2\x2\x3DE\x3DF\x3\x2\x2\x2"+
		"\x3DF\x3E1\x5\xDCo\x2\x3E0\x3D9\x3\x2\x2\x2\x3E1\x3E4\x3\x2\x2\x2\x3E2"+
		"\x3E0\x3\x2\x2\x2\x3E2\x3E3\x3\x2\x2\x2\x3E3S\x3\x2\x2\x2\x3E4\x3E2\x3"+
		"\x2\x2\x2\x3E5\x3E6\a=\x2\x2\x3E6\x3E7\a\xDF\x2\x2\x3E7\x3E8\x5\xDCo\x2"+
		"\x3E8U\x3\x2\x2\x2\x3E9\x3EA\x5\x132\x9A\x2\x3EA\x3EB\a\xDF\x2\x2\x3EB"+
		"\x3ED\x3\x2\x2\x2\x3EC\x3E9\x3\x2\x2\x2\x3EC\x3ED\x3\x2\x2\x2\x3ED\x3EE"+
		"\x3\x2\x2\x2\x3EE\x3EF\a>\x2\x2\x3EF\x3F0\a\xDF\x2\x2\x3F0\x3F2\x5\x116"+
		"\x8C\x2\x3F1\x3F3\a\xDF\x2\x2\x3F2\x3F1\x3\x2\x2\x2\x3F2\x3F3\x3\x2\x2"+
		"\x2\x3F3\x3F4\x3\x2\x2\x2\x3F4\x3F5\x5\x10C\x87\x2\x3F5W\x3\x2\x2\x2\x3F6"+
		"\x3F7\t\x5\x2\x2\x3F7Y\x3\x2\x2\x2\x3F8\x3F9\a\x45\x2\x2\x3F9\x3FA\a\xDF"+
		"\x2\x2\x3FA\x3FC\x5\xDCo\x2\x3FB\x3FD\a\xDF\x2\x2\x3FC\x3FB\x3\x2\x2\x2"+
		"\x3FC\x3FD\x3\x2\x2\x2\x3FD\x3FE\x3\x2\x2\x2\x3FE\x400\a\xB8\x2\x2\x3FF"+
		"\x401\a\xDF\x2\x2\x400\x3FF\x3\x2\x2\x2\x400\x401\x3\x2\x2\x2\x401\x402"+
		"\x3\x2\x2\x2\x402\x403\x5\xDCo\x2\x403[\x3\x2\x2\x2\x404\x405\aG\x2\x2"+
		"\x405\x406\a\xDF\x2\x2\x406\x407\a-\x2\x2\x407\x408\a\xDF\x2\x2\x408\x40A"+
		"\x5\x116\x8C\x2\x409\x40B\x5\x130\x99\x2\x40A\x409\x3\x2\x2\x2\x40A\x40B"+
		"\x3\x2\x2\x2\x40B\x40C\x3\x2\x2\x2\x40C\x40D\a\xDF\x2\x2\x40D\x40E\aP"+
		"\x2\x2\x40E\x40F\a\xDF\x2\x2\x40F\x411\x5\xDCo\x2\x410\x412\a\xDD\x2\x2"+
		"\x411\x410\x3\x2\x2\x2\x412\x413\x3\x2\x2\x2\x413\x411\x3\x2\x2\x2\x413"+
		"\x414\x3\x2\x2\x2\x414\x41B\x3\x2\x2\x2\x415\x417\x5\x30\x19\x2\x416\x418"+
		"\a\xDD\x2\x2\x417\x416\x3\x2\x2\x2\x418\x419\x3\x2\x2\x2\x419\x417\x3"+
		"\x2\x2\x2\x419\x41A\x3\x2\x2\x2\x41A\x41C\x3\x2\x2\x2\x41B\x415\x3\x2"+
		"\x2\x2\x41B\x41C\x3\x2\x2\x2\x41C\x41D\x3\x2\x2\x2\x41D\x420\ak\x2\x2"+
		"\x41E\x41F\a\xDF\x2\x2\x41F\x421\x5\x116\x8C\x2\x420\x41E\x3\x2\x2\x2"+
		"\x420\x421\x3\x2\x2\x2\x421]\x3\x2\x2\x2\x422\x423\aG\x2\x2\x423\x424"+
		"\a\xDF\x2\x2\x424\x426\x5\x116\x8C\x2\x425\x427\x5\x130\x99\x2\x426\x425"+
		"\x3\x2\x2\x2\x426\x427\x3\x2\x2\x2\x427\x42A\x3\x2\x2\x2\x428\x429\a\xDF"+
		"\x2\x2\x429\x42B\x5\x118\x8D\x2\x42A\x428\x3\x2\x2\x2\x42A\x42B\x3\x2"+
		"\x2\x2\x42B\x42D\x3\x2\x2\x2\x42C\x42E\a\xDF\x2\x2\x42D\x42C\x3\x2\x2"+
		"\x2\x42D\x42E\x3\x2\x2\x2\x42E\x42F\x3\x2\x2\x2\x42F\x431\a\xBC\x2\x2"+
		"\x430\x432\a\xDF\x2\x2\x431\x430\x3\x2\x2\x2\x431\x432\x3\x2\x2\x2\x432"+
		"\x433\x3\x2\x2\x2\x433\x434\x5\xDCo\x2\x434\x435\a\xDF\x2\x2\x435\x436"+
		"\a\xA4\x2\x2\x436\x437\a\xDF\x2\x2\x437\x43C\x5\xDCo\x2\x438\x439\a\xDF"+
		"\x2\x2\x439\x43A\a\x9C\x2\x2\x43A\x43B\a\xDF\x2\x2\x43B\x43D\x5\xDCo\x2"+
		"\x43C\x438\x3\x2\x2\x2\x43C\x43D\x3\x2\x2\x2\x43D\x43F\x3\x2\x2\x2\x43E"+
		"\x440\a\xDD\x2\x2\x43F\x43E\x3\x2\x2\x2\x440\x441\x3\x2\x2\x2\x441\x43F"+
		"\x3\x2\x2\x2\x441\x442\x3\x2\x2\x2\x442\x449\x3\x2\x2\x2\x443\x445\x5"+
		"\x30\x19\x2\x444\x446\a\xDD\x2\x2\x445\x444\x3\x2\x2\x2\x446\x447\x3\x2"+
		"\x2\x2\x447\x445\x3\x2\x2\x2\x447\x448\x3\x2\x2\x2\x448\x44A\x3\x2\x2"+
		"\x2\x449\x443\x3\x2\x2\x2\x449\x44A\x3\x2\x2\x2\x44A\x44B\x3\x2\x2\x2"+
		"\x44B\x451\ak\x2\x2\x44C\x44D\a\xDF\x2\x2\x44D\x44F\x5\x116\x8C\x2\x44E"+
		"\x450\x5\x130\x99\x2\x44F\x44E\x3\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450"+
		"\x452\x3\x2\x2\x2\x451\x44C\x3\x2\x2\x2\x451\x452\x3\x2\x2\x2\x452_\x3"+
		"\x2\x2\x2\x453\x454\x5\x132\x9A\x2\x454\x455\a\xDF\x2\x2\x455\x457\x3"+
		"\x2\x2\x2\x456\x453\x3\x2\x2\x2\x456\x457\x3\x2\x2\x2\x457\x45A\x3\x2"+
		"\x2\x2\x458\x459\a\x9B\x2\x2\x459\x45B\a\xDF\x2\x2\x45A\x458\x3\x2\x2"+
		"\x2\x45A\x45B\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45D\aH\x2\x2\x45D"+
		"\x45E\a\xDF\x2\x2\x45E\x463\x5\x116\x8C\x2\x45F\x461\a\xDF\x2\x2\x460"+
		"\x45F\x3\x2\x2\x2\x460\x461\x3\x2\x2\x2\x461\x462\x3\x2\x2\x2\x462\x464"+
		"\x5\x10C\x87\x2\x463\x460\x3\x2\x2\x2\x463\x464\x3\x2\x2\x2\x464\x467"+
		"\x3\x2\x2\x2\x465\x466\a\xDF\x2\x2\x466\x468\x5\x118\x8D\x2\x467\x465"+
		"\x3\x2\x2\x2\x467\x468\x3\x2\x2\x2\x468\x46A\x3\x2\x2\x2\x469\x46B\a\xDD"+
		"\x2\x2\x46A\x469\x3\x2\x2\x2\x46B\x46C\x3\x2\x2\x2\x46C\x46A\x3\x2\x2"+
		"\x2\x46C\x46D\x3\x2\x2\x2\x46D\x474\x3\x2\x2\x2\x46E\x470\x5\x30\x19\x2"+
		"\x46F\x471\a\xDD\x2\x2\x470\x46F\x3\x2\x2\x2\x471\x472\x3\x2\x2\x2\x472"+
		"\x470\x3\x2\x2\x2\x472\x473\x3\x2\x2\x2\x473\x475\x3\x2\x2\x2\x474\x46E"+
		"\x3\x2\x2\x2\x474\x475\x3\x2\x2\x2\x475\x476\x3\x2\x2\x2\x476\x477\a\x31"+
		"\x2\x2\x477\x61\x3\x2\x2\x2\x478\x479\aI\x2\x2\x479\x47A\a\xDF\x2\x2\x47A"+
		"\x47C\x5\xDCo\x2\x47B\x47D\a\xDF\x2\x2\x47C\x47B\x3\x2\x2\x2\x47C\x47D"+
		"\x3\x2\x2\x2\x47D\x47E\x3\x2\x2\x2\x47E\x480\a\xB8\x2\x2\x47F\x481\a\xDF"+
		"\x2\x2\x480\x47F\x3\x2\x2\x2\x480\x481\x3\x2\x2\x2\x481\x483\x3\x2\x2"+
		"\x2\x482\x484\x5\xDCo\x2\x483\x482\x3\x2\x2\x2\x483\x484\x3\x2\x2\x2\x484"+
		"\x486\x3\x2\x2\x2\x485\x487\a\xDF\x2\x2\x486\x485\x3\x2\x2\x2\x486\x487"+
		"\x3\x2\x2\x2\x487\x488\x3\x2\x2\x2\x488\x48A\a\xB8\x2\x2\x489\x48B\a\xDF"+
		"\x2\x2\x48A\x489\x3\x2\x2\x2\x48A\x48B\x3\x2\x2\x2\x48B\x48C\x3\x2\x2"+
		"\x2\x48C\x48D\x5\xDCo\x2\x48D\x63\x3\x2\x2\x2\x48E\x48F\aK\x2\x2\x48F"+
		"\x490\a\xDF\x2\x2\x490\x491\x5\xDCo\x2\x491\x65\x3\x2\x2\x2\x492\x493"+
		"\aL\x2\x2\x493\x494\a\xDF\x2\x2\x494\x495\x5\xDCo\x2\x495g\x3\x2\x2\x2"+
		"\x496\x497\aM\x2\x2\x497\x498\a\xDF\x2\x2\x498\x499\x5l\x37\x2\x499\x49A"+
		"\a\xDF\x2\x2\x49A\x49B\a\xA2\x2\x2\x49B\x49C\a\xDF\x2\x2\x49C\x4A1\x5"+
		"\x32\x1A\x2\x49D\x49E\a\xDF\x2\x2\x49E\x49F\a.\x2\x2\x49F\x4A0\a\xDF\x2"+
		"\x2\x4A0\x4A2\x5\x32\x1A\x2\x4A1\x49D\x3\x2\x2\x2\x4A1\x4A2\x3\x2\x2\x2"+
		"\x4A2\x4B0\x3\x2\x2\x2\x4A3\x4A7\x5j\x36\x2\x4A4\x4A6\x5n\x38\x2\x4A5"+
		"\x4A4\x3\x2\x2\x2\x4A6\x4A9\x3\x2\x2\x2\x4A7\x4A5\x3\x2\x2\x2\x4A7\x4A8"+
		"\x3\x2\x2\x2\x4A8\x4AB\x3\x2\x2\x2\x4A9\x4A7\x3\x2\x2\x2\x4AA\x4AC\x5"+
		"p\x39\x2\x4AB\x4AA\x3\x2\x2\x2\x4AB\x4AC\x3\x2\x2\x2\x4AC\x4AD\x3\x2\x2"+
		"\x2\x4AD\x4AE\a\x32\x2\x2\x4AE\x4B0\x3\x2\x2\x2\x4AF\x496\x3\x2\x2\x2"+
		"\x4AF\x4A3\x3\x2\x2\x2\x4B0i\x3\x2\x2\x2\x4B1\x4B2\aM\x2\x2\x4B2\x4B3"+
		"\a\xDF\x2\x2\x4B3\x4B4\x5l\x37\x2\x4B4\x4B5\a\xDF\x2\x2\x4B5\x4B7\a\xA2"+
		"\x2\x2\x4B6\x4B8\a\xDD\x2\x2\x4B7\x4B6\x3\x2\x2\x2\x4B8\x4B9\x3\x2\x2"+
		"\x2\x4B9\x4B7\x3\x2\x2\x2\x4B9\x4BA\x3\x2\x2\x2\x4BA\x4C1\x3\x2\x2\x2"+
		"\x4BB\x4BD\x5\x30\x19\x2\x4BC\x4BE\a\xDD\x2\x2\x4BD\x4BC\x3\x2\x2\x2\x4BE"+
		"\x4BF\x3\x2\x2\x2\x4BF\x4BD\x3\x2\x2\x2\x4BF\x4C0\x3\x2\x2\x2\x4C0\x4C2"+
		"\x3\x2\x2\x2\x4C1\x4BB\x3\x2\x2\x2\x4C1\x4C2\x3\x2\x2\x2\x4C2k\x3\x2\x2"+
		"\x2\x4C3\x4C4\x5\xDCo\x2\x4C4m\x3\x2\x2\x2\x4C5\x4C6\a/\x2\x2\x4C6\x4C7"+
		"\a\xDF\x2\x2\x4C7\x4C8\x5l\x37\x2\x4C8\x4C9\a\xDF\x2\x2\x4C9\x4CB\a\xA2"+
		"\x2\x2\x4CA\x4CC\a\xDD\x2\x2\x4CB\x4CA\x3\x2\x2\x2\x4CC\x4CD\x3\x2\x2"+
		"\x2\x4CD\x4CB\x3\x2\x2\x2\x4CD\x4CE\x3\x2\x2\x2\x4CE\x4D5\x3\x2\x2\x2"+
		"\x4CF\x4D1\x5\x30\x19\x2\x4D0\x4D2\a\xDD\x2\x2\x4D1\x4D0\x3\x2\x2\x2\x4D2"+
		"\x4D3\x3\x2\x2\x2\x4D3\x4D1\x3\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2\x4D4\x4D6"+
		"\x3\x2\x2\x2\x4D5\x4CF\x3\x2\x2\x2\x4D5\x4D6\x3\x2\x2\x2\x4D6o\x3\x2\x2"+
		"\x2\x4D7\x4D9\a.\x2\x2\x4D8\x4DA\a\xDD\x2\x2\x4D9\x4D8\x3\x2\x2\x2\x4DA"+
		"\x4DB\x3\x2\x2\x2\x4DB\x4D9\x3\x2\x2\x2\x4DB\x4DC\x3\x2\x2\x2\x4DC\x4E3"+
		"\x3\x2\x2\x2\x4DD\x4DF\x5\x30\x19\x2\x4DE\x4E0\a\xDD\x2\x2\x4DF\x4DE\x3"+
		"\x2\x2\x2\x4E0\x4E1\x3\x2\x2\x2\x4E1\x4DF\x3\x2\x2\x2\x4E1\x4E2\x3\x2"+
		"\x2\x2\x4E2\x4E4\x3\x2\x2\x2\x4E3\x4DD\x3\x2\x2\x2\x4E3\x4E4\x3\x2\x2"+
		"\x2\x4E4q\x3\x2\x2\x2\x4E5\x4E6\aO\x2\x2\x4E6\x4E7\a\xDF\x2\x2\x4E7\x4E8"+
		"\x5\x116\x8C\x2\x4E8s\x3\x2\x2\x2\x4E9\x4EA\aQ\x2\x2\x4EA\x4EB\a\xDF\x2"+
		"\x2\x4EB\x4F4\x5\xDCo\x2\x4EC\x4EE\a\xDF\x2\x2\x4ED\x4EC\x3\x2\x2\x2\x4ED"+
		"\x4EE\x3\x2\x2\x2\x4EE\x4EF\x3\x2\x2\x2\x4EF\x4F1\a\xB8\x2\x2\x4F0\x4F2"+
		"\a\xDF\x2\x2\x4F1\x4F0\x3\x2\x2\x2\x4F1\x4F2\x3\x2\x2\x2\x4F2\x4F3\x3"+
		"\x2\x2\x2\x4F3\x4F5\x5\xDCo\x2\x4F4\x4ED\x3\x2\x2\x2\x4F5\x4F6\x3\x2\x2"+
		"\x2\x4F6\x4F4\x3\x2\x2\x2\x4F6\x4F7\x3\x2\x2\x2\x4F7u\x3\x2\x2\x2\x4F8"+
		"\x4F9\aT\x2\x2\x4F9\x4FA\a\xDF\x2\x2\x4FA\x4FB\x5\xDCo\x2\x4FBw\x3\x2"+
		"\x2\x2\x4FC\x4FD\aZ\x2\x2\x4FD\x4FF\a\xDF\x2\x2\x4FE\x4FC\x3\x2\x2\x2"+
		"\x4FE\x4FF\x3\x2\x2\x2\x4FF\x500\x3\x2\x2\x2\x500\x502\x5\xF8}\x2\x501"+
		"\x503\a\xDF\x2\x2\x502\x501\x3\x2\x2\x2\x502\x503\x3\x2\x2\x2\x503\x504"+
		"\x3\x2\x2\x2\x504\x506\t\x6\x2\x2\x505\x507\a\xDF\x2\x2\x506\x505\x3\x2"+
		"\x2\x2\x506\x507\x3\x2\x2\x2\x507\x508\x3\x2\x2\x2\x508\x509\x5\xDCo\x2"+
		"\x509y\x3\x2\x2\x2\x50A\x50B\a]\x2\x2\x50B\x50C\a\xDF\x2\x2\x50C\x50E"+
		"\x5\xDCo\x2\x50D\x50F\a\xDF\x2\x2\x50E\x50D\x3\x2\x2\x2\x50E\x50F\x3\x2"+
		"\x2\x2\x50F\x510\x3\x2\x2\x2\x510\x512\a\xB8\x2\x2\x511\x513\a\xDF\x2"+
		"\x2\x512\x511\x3\x2\x2\x2\x512\x513\x3\x2\x2\x2\x513\x514\x3\x2\x2\x2"+
		"\x514\x515\x5\xDCo\x2\x515{\x3\x2\x2\x2\x516\x517\aU\x2\x2\x517\x518\a"+
		"\xDF\x2\x2\x518\x519\x5\xDCo\x2\x519}\x3\x2\x2\x2\x51A\x51B\aV\x2\x2\x51B"+
		"\x51C\a\xDF\x2\x2\x51C\x52B\x5\xDCo\x2\x51D\x51F\a\xDF\x2\x2\x51E\x51D"+
		"\x3\x2\x2\x2\x51E\x51F\x3\x2\x2\x2\x51F\x520\x3\x2\x2\x2\x520\x522\a\xB8"+
		"\x2\x2\x521\x523\a\xDF\x2\x2\x522\x521\x3\x2\x2\x2\x522\x523\x3\x2\x2"+
		"\x2\x523\x524\x3\x2\x2\x2\x524\x529\x5\xDCo\x2\x525\x526\a\xDF\x2\x2\x526"+
		"\x527\a\xA4\x2\x2\x527\x528\a\xDF\x2\x2\x528\x52A\x5\xDCo\x2\x529\x525"+
		"\x3\x2\x2\x2\x529\x52A\x3\x2\x2\x2\x52A\x52C\x3\x2\x2\x2\x52B\x51E\x3"+
		"\x2\x2\x2\x52B\x52C\x3\x2\x2\x2\x52C\x7F\x3\x2\x2\x2\x52D\x52E\a\x61\x2"+
		"\x2\x52E\x52F\a\xDF\x2\x2\x52F\x531\x5\xF8}\x2\x530\x532\a\xDF\x2\x2\x531"+
		"\x530\x3\x2\x2\x2\x531\x532\x3\x2\x2\x2\x532\x533\x3\x2\x2\x2\x533\x535"+
		"\a\xBC\x2\x2\x534\x536\a\xDF\x2\x2\x535\x534\x3\x2\x2\x2\x535\x536\x3"+
		"\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537\x538\x5\xDCo\x2\x538\x81\x3\x2\x2"+
		"\x2\x539\x53D\x5\x84\x43\x2\x53A\x53C\x5\x86\x44\x2\x53B\x53A\x3\x2\x2"+
		"\x2\x53C\x53F\x3\x2\x2\x2\x53D\x53B\x3\x2\x2\x2\x53D\x53E\x3\x2\x2\x2"+
		"\x53E\x541\x3\x2\x2\x2\x53F\x53D\x3\x2\x2\x2\x540\x542\x5\x88\x45\x2\x541"+
		"\x540\x3\x2\x2\x2\x541\x542\x3\x2\x2\x2\x542\x543\x3\x2\x2\x2\x543\x544"+
		"\a\x65\x2\x2\x544\x83\x3\x2\x2\x2\x545\x546\a\x62\x2\x2\x546\x547\a\xDF"+
		"\x2\x2\x547\x548\x5l\x37\x2\x548\x549\a\xDF\x2\x2\x549\x54B\a\xA2\x2\x2"+
		"\x54A\x54C\a\xDD\x2\x2\x54B\x54A\x3\x2\x2\x2\x54C\x54D\x3\x2\x2\x2\x54D"+
		"\x54B\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x555\x3\x2\x2\x2\x54F\x551"+
		"\x5\x1A\xE\x2\x550\x552\a\xDD\x2\x2\x551\x550\x3\x2\x2\x2\x552\x553\x3"+
		"\x2\x2\x2\x553\x551\x3\x2\x2\x2\x553\x554\x3\x2\x2\x2\x554\x556\x3\x2"+
		"\x2\x2\x555\x54F\x3\x2\x2\x2\x555\x556\x3\x2\x2\x2\x556\x85\x3\x2\x2\x2"+
		"\x557\x558\a\x63\x2\x2\x558\x559\a\xDF\x2\x2\x559\x55A\x5l\x37\x2\x55A"+
		"\x55B\a\xDF\x2\x2\x55B\x55D\a\xA2\x2\x2\x55C\x55E\a\xDD\x2\x2\x55D\x55C"+
		"\x3\x2\x2\x2\x55E\x55F\x3\x2\x2\x2\x55F\x55D\x3\x2\x2\x2\x55F\x560\x3"+
		"\x2\x2\x2\x560\x567\x3\x2\x2\x2\x561\x563\x5\x1A\xE\x2\x562\x564\a\xDD"+
		"\x2\x2\x563\x562\x3\x2\x2\x2\x564\x565\x3\x2\x2\x2\x565\x563\x3\x2\x2"+
		"\x2\x565\x566\x3\x2\x2\x2\x566\x568\x3\x2\x2\x2\x567\x561\x3\x2\x2\x2"+
		"\x567\x568\x3\x2\x2\x2\x568\x87\x3\x2\x2\x2\x569\x56B\a\x64\x2\x2\x56A"+
		"\x56C\a\xDD\x2\x2\x56B\x56A\x3\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D\x56B"+
		"\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2\x56E\x575\x3\x2\x2\x2\x56F\x571\x5"+
		"\x1A\xE\x2\x570\x572\a\xDD\x2\x2\x571\x570\x3\x2\x2\x2\x572\x573\x3\x2"+
		"\x2\x2\x573\x571\x3\x2\x2\x2\x573\x574\x3\x2\x2\x2\x574\x576\x3\x2\x2"+
		"\x2\x575\x56F\x3\x2\x2\x2\x575\x576\x3\x2\x2\x2\x576\x89\x3\x2\x2\x2\x577"+
		"\x579\ag\x2\x2\x578\x57A\a\xDF\x2\x2\x579\x578\x3\x2\x2\x2\x579\x57A\x3"+
		"\x2\x2\x2\x57A\x57B\x3\x2\x2\x2\x57B\x57D\a\xC3\x2\x2\x57C\x57E\a\xDF"+
		"\x2\x2\x57D\x57C\x3\x2\x2\x2\x57D\x57E\x3\x2\x2\x2\x57E\x57F\x3\x2\x2"+
		"\x2\x57F\x581\x5\x106\x84\x2\x580\x582\a\xDF\x2\x2\x581\x580\x3\x2\x2"+
		"\x2\x581\x582\x3\x2\x2\x2\x582\x583\x3\x2\x2\x2\x583\x584\a\xCE\x2\x2"+
		"\x584\x8B\x3\x2\x2\x2\x585\x586\ah\x2\x2\x586\x587\a\xDF\x2\x2\x587\x588"+
		"\x5\xDCo\x2\x588\x8D\x3\x2\x2\x2\x589\x58A\aj\x2\x2\x58A\x58B\a\xDF\x2"+
		"\x2\x58B\x58C\x5\xDCo\x2\x58C\x58D\a\xDF\x2\x2\x58D\x58E\a\n\x2\x2\x58E"+
		"\x58F\a\xDF\x2\x2\x58F\x590\x5\xDCo\x2\x590\x8F\x3\x2\x2\x2\x591\x592"+
		"\t\a\x2\x2\x592\x59C\a\xDF\x2\x2\x593\x594\aL\x2\x2\x594\x595\a\xDF\x2"+
		"\x2\x595\x597\x5\xDCo\x2\x596\x598\a\xB7\x2\x2\x597\x596\x3\x2\x2\x2\x597"+
		"\x598\x3\x2\x2\x2\x598\x59D\x3\x2\x2\x2\x599\x59A\a\x8D\x2\x2\x59A\x59B"+
		"\a\xDF\x2\x2\x59B\x59D\ak\x2\x2\x59C\x593\x3\x2\x2\x2\x59C\x599\x3\x2"+
		"\x2\x2\x59D\x91\x3\x2\x2\x2\x59E\x59F\aq\x2\x2\x59F\x5A0\a\xDF\x2\x2\x5A0"+
		"\x5A1\x5\xDCo\x2\x5A1\x5A2\a\xDF\x2\x2\x5A2\x5A3\aL\x2\x2\x5A3\x5A4\a"+
		"\xDF\x2\x2\x5A4\x5AF\x5\xDCo\x2\x5A5\x5A7\a\xDF\x2\x2\x5A6\x5A5\x3\x2"+
		"\x2\x2\x5A6\x5A7\x3\x2\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8\x5AA\a\xB8\x2"+
		"\x2\x5A9\x5AB\a\xDF\x2\x2\x5AA\x5A9\x3\x2\x2\x2\x5AA\x5AB\x3\x2\x2\x2"+
		"\x5AB\x5AC\x3\x2\x2\x2\x5AC\x5AE\x5\xDCo\x2\x5AD\x5A6\x3\x2\x2\x2\x5AE"+
		"\x5B1\x3\x2\x2\x2\x5AF\x5AD\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0\x93"+
		"\x3\x2\x2\x2\x5B1\x5AF\x3\x2\x2\x2\x5B2\x5B3\aq\x2\x2\x5B3\x5B4\a\xDF"+
		"\x2\x2\x5B4\x5B5\x5\xDCo\x2\x5B5\x5B6\a\xDF\x2\x2\x5B6\x5B7\aK\x2\x2\x5B7"+
		"\x5B8\a\xDF\x2\x2\x5B8\x5C3\x5\xDCo\x2\x5B9\x5BB\a\xDF\x2\x2\x5BA\x5B9"+
		"\x3\x2\x2\x2\x5BA\x5BB\x3\x2\x2\x2\x5BB\x5BC\x3\x2\x2\x2\x5BC\x5BE\a\xB8"+
		"\x2\x2\x5BD\x5BF\a\xDF\x2\x2\x5BE\x5BD\x3\x2\x2\x2\x5BE\x5BF\x3\x2\x2"+
		"\x2\x5BF\x5C0\x3\x2\x2\x2\x5C0\x5C2\x5\xDCo\x2\x5C1\x5BA\x3\x2\x2\x2\x5C2"+
		"\x5C5\x3\x2\x2\x2\x5C3\x5C1\x3\x2\x2\x2\x5C3\x5C4\x3\x2\x2\x2\x5C4\x95"+
		"\x3\x2\x2\x2\x5C5\x5C3\x3\x2\x2\x2\x5C6\x5C7\at\x2\x2\x5C7\x5C8\a\xDF"+
		"\x2\x2\x5C8\x5C9\x5\xDCo\x2\x5C9\x5CA\a\xDF\x2\x2\x5CA\x5CB\aG\x2\x2\x5CB"+
		"\x5CC\a\xDF\x2\x2\x5CC\x5D1\t\b\x2\x2\x5CD\x5CE\a\xDF\x2\x2\x5CE\x5CF"+
		"\a\x3\x2\x2\x5CF\x5D0\a\xDF\x2\x2\x5D0\x5D2\t\t\x2\x2\x5D1\x5CD\x3\x2"+
		"\x2\x2\x5D1\x5D2\x3\x2\x2\x2\x5D2\x5D5\x3\x2\x2\x2\x5D3\x5D4\a\xDF\x2"+
		"\x2\x5D4\x5D6\t\n\x2\x2\x5D5\x5D3\x3\x2\x2\x2\x5D5\x5D6\x3\x2\x2\x2\x5D6"+
		"\x5D7\x3\x2\x2\x2\x5D7\x5D8\a\xDF\x2\x2\x5D8\x5D9\a\n\x2\x2\x5D9\x5DA"+
		"\a\xDF\x2\x2\x5DA\x5E5\x5\xDCo\x2\x5DB\x5DC\a\xDF\x2\x2\x5DC\x5DE\aY\x2"+
		"\x2\x5DD\x5DF\a\xDF\x2\x2\x5DE\x5DD\x3\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2"+
		"\x5DF\x5E0\x3\x2\x2\x2\x5E0\x5E2\a\xBC\x2\x2\x5E1\x5E3\a\xDF\x2\x2\x5E2"+
		"\x5E1\x3\x2\x2\x2\x5E2\x5E3\x3\x2\x2\x2\x5E3\x5E4\x3\x2\x2\x2\x5E4\x5E6"+
		"\x5\xDCo\x2\x5E5\x5DB\x3\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2\x5E6\x97\x3\x2"+
		"\x2\x2\x5E7\x5F4\x5\x9AN\x2\x5E8\x5EA\a\xDF\x2\x2\x5E9\x5E8\x3\x2\x2\x2"+
		"\x5E9\x5EA\x3\x2\x2\x2\x5EA\x5EB\x3\x2\x2\x2\x5EB\x5ED\t\v\x2\x2\x5EC"+
		"\x5EE\a\xDF\x2\x2\x5ED\x5EC\x3\x2\x2\x2\x5ED\x5EE\x3\x2\x2\x2\x5EE\x5F0"+
		"\x3\x2\x2\x2\x5EF\x5F1\x5\x9AN\x2\x5F0\x5EF\x3\x2\x2\x2\x5F0\x5F1\x3\x2"+
		"\x2\x2\x5F1\x5F3\x3\x2\x2\x2\x5F2\x5E9\x3\x2\x2\x2\x5F3\x5F6\x3\x2\x2"+
		"\x2\x5F4\x5F2\x3\x2\x2\x2\x5F4\x5F5\x3\x2\x2\x2\x5F5\x609\x3\x2\x2\x2"+
		"\x5F6\x5F4\x3\x2\x2\x2\x5F7\x5F9\x5\x9AN\x2\x5F8\x5F7\x3\x2\x2\x2\x5F8"+
		"\x5F9\x3\x2\x2\x2\x5F9\x604\x3\x2\x2\x2\x5FA\x5FC\a\xDF\x2\x2\x5FB\x5FA"+
		"\x3\x2\x2\x2\x5FB\x5FC\x3\x2\x2\x2\x5FC\x5FD\x3\x2\x2\x2\x5FD\x5FF\t\v"+
		"\x2\x2\x5FE\x600\a\xDF\x2\x2\x5FF\x5FE\x3\x2\x2\x2\x5FF\x600\x3\x2\x2"+
		"\x2\x600\x602\x3\x2\x2\x2\x601\x603\x5\x9AN\x2\x602\x601\x3\x2\x2\x2\x602"+
		"\x603\x3\x2\x2\x2\x603\x605\x3\x2\x2\x2\x604\x5FB\x3\x2\x2\x2\x605\x606"+
		"\x3\x2\x2\x2\x606\x604\x3\x2\x2\x2\x606\x607\x3\x2\x2\x2\x607\x609\x3"+
		"\x2\x2\x2\x608\x5E7\x3\x2\x2\x2\x608\x5F8\x3\x2\x2\x2\x609\x99\x3\x2\x2"+
		"\x2\x60A\x61C\x5\xDCo\x2\x60B\x619\t\f\x2\x2\x60C\x60E\a\xDF\x2\x2\x60D"+
		"\x60C\x3\x2\x2\x2\x60D\x60E\x3\x2\x2\x2\x60E\x60F\x3\x2\x2\x2\x60F\x611"+
		"\a\xC3\x2\x2\x610\x612\a\xDF\x2\x2\x611\x610\x3\x2\x2\x2\x611\x612\x3"+
		"\x2\x2\x2\x612\x613\x3\x2\x2\x2\x613\x615\x5\x106\x84\x2\x614\x616\a\xDF"+
		"\x2\x2\x615\x614\x3\x2\x2\x2\x615\x616\x3\x2\x2\x2\x616\x617\x3\x2\x2"+
		"\x2\x617\x618\a\xCE\x2\x2\x618\x61A\x3\x2\x2\x2\x619\x60D\x3\x2\x2\x2"+
		"\x619\x61A\x3\x2\x2\x2\x61A\x61C\x3\x2\x2\x2\x61B\x60A\x3\x2\x2\x2\x61B"+
		"\x60B\x3\x2\x2\x2\x61C\x9B\x3\x2\x2\x2\x61D\x61E\a~\x2\x2\x61E\x61F\a"+
		"\xDF\x2\x2\x61F\x621\x5\xDCo\x2\x620\x622\a\xDF\x2\x2\x621\x620\x3\x2"+
		"\x2\x2\x621\x622\x3\x2\x2\x2\x622\x623\x3\x2\x2\x2\x623\x628\a\xB8\x2"+
		"\x2\x624\x626\a\xDF\x2\x2\x625\x624\x3\x2\x2\x2\x625\x626\x3\x2\x2\x2"+
		"\x626\x627\x3\x2\x2\x2\x627\x629\x5\x98M\x2\x628\x625\x3\x2\x2\x2\x628"+
		"\x629\x3\x2\x2\x2\x629\x9D\x3\x2\x2\x2\x62A\x62B\x5\x132\x9A\x2\x62B\x62C"+
		"\a\xDF\x2\x2\x62C\x62E\x3\x2\x2\x2\x62D\x62A\x3\x2\x2\x2\x62D\x62E\x3"+
		"\x2\x2\x2\x62E\x631\x3\x2\x2\x2\x62F\x630\a\x9B\x2\x2\x630\x632\a\xDF"+
		"\x2\x2\x631\x62F\x3\x2\x2\x2\x631\x632\x3\x2\x2\x2\x632\x633\x3\x2\x2"+
		"\x2\x633\x634\a\x80\x2\x2\x634\x635\a\xDF\x2\x2\x635\x637\x5\x116\x8C"+
		"\x2\x636\x638\x5\x130\x99\x2\x637\x636\x3\x2\x2\x2\x637\x638\x3\x2\x2"+
		"\x2\x638\x63D\x3\x2\x2\x2\x639\x63B\a\xDF\x2\x2\x63A\x639\x3\x2\x2\x2"+
		"\x63A\x63B\x3\x2\x2\x2\x63B\x63C\x3\x2\x2\x2\x63C\x63E\x5\x10C\x87\x2"+
		"\x63D\x63A\x3\x2\x2\x2\x63D\x63E\x3\x2\x2\x2\x63E\x641\x3\x2\x2\x2\x63F"+
		"\x640\a\xDF\x2\x2\x640\x642\x5\x118\x8D\x2\x641\x63F\x3\x2\x2\x2\x641"+
		"\x642\x3\x2\x2\x2\x642\x644\x3\x2\x2\x2\x643\x645\a\xDD\x2\x2\x644\x643"+
		"\x3\x2\x2\x2\x645\x646\x3\x2\x2\x2\x646\x644\x3\x2\x2\x2\x646\x647\x3"+
		"\x2\x2\x2\x647\x64E\x3\x2\x2\x2\x648\x64A\x5\x30\x19\x2\x649\x64B\a\xDD"+
		"\x2\x2\x64A\x649\x3\x2\x2\x2\x64B\x64C\x3\x2\x2\x2\x64C\x64A\x3\x2\x2"+
		"\x2\x64C\x64D\x3\x2\x2\x2\x64D\x64F\x3\x2\x2\x2\x64E\x648\x3\x2\x2\x2"+
		"\x64E\x64F\x3\x2\x2\x2\x64F\x650\x3\x2\x2\x2\x650\x651\a\x33\x2\x2\x651"+
		"\x9F\x3\x2\x2\x2\x652\x653\x5\x132\x9A\x2\x653\x654\a\xDF\x2\x2\x654\x656"+
		"\x3\x2\x2\x2\x655\x652\x3\x2\x2\x2\x655\x656\x3\x2\x2\x2\x656\x659\x3"+
		"\x2\x2\x2\x657\x658\a\x9B\x2\x2\x658\x65A\a\xDF\x2\x2\x659\x657\x3\x2"+
		"\x2\x2\x659\x65A\x3\x2\x2\x2\x65A\x65B\x3\x2\x2\x2\x65B\x65C\a\x82\x2"+
		"\x2\x65C\x65D\a\xDF\x2\x2\x65D\x662\x5\x116\x8C\x2\x65E\x660\a\xDF\x2"+
		"\x2\x65F\x65E\x3\x2\x2\x2\x65F\x660\x3\x2\x2\x2\x660\x661\x3\x2\x2\x2"+
		"\x661\x663\x5\x10C\x87\x2\x662\x65F\x3\x2\x2\x2\x662\x663\x3\x2\x2\x2"+
		"\x663\x665\x3\x2\x2\x2\x664\x666\a\xDD\x2\x2\x665\x664\x3\x2\x2\x2\x666"+
		"\x667\x3\x2\x2\x2\x667\x665\x3\x2\x2\x2\x667\x668\x3\x2\x2\x2\x668\x66F"+
		"\x3\x2\x2\x2\x669\x66B\x5\x30\x19\x2\x66A\x66C\a\xDD\x2\x2\x66B\x66A\x3"+
		"\x2\x2\x2\x66C\x66D\x3\x2\x2\x2\x66D\x66B\x3\x2\x2\x2\x66D\x66E\x3\x2"+
		"\x2\x2\x66E\x670\x3\x2\x2\x2\x66F\x669\x3\x2\x2\x2\x66F\x670\x3\x2\x2"+
		"\x2\x670\x671\x3\x2\x2\x2\x671\x672\a\x33\x2\x2\x672\xA1\x3\x2\x2\x2\x673"+
		"\x674\x5\x132\x9A\x2\x674\x675\a\xDF\x2\x2\x675\x677\x3\x2\x2\x2\x676"+
		"\x673\x3\x2\x2\x2\x676\x677\x3\x2\x2\x2\x677\x67A\x3\x2\x2\x2\x678\x679"+
		"\a\x9B\x2\x2\x679\x67B\a\xDF\x2\x2\x67A\x678\x3\x2\x2\x2\x67A\x67B\x3"+
		"\x2\x2\x2\x67B\x67C\x3\x2\x2\x2\x67C\x67D\a\x81\x2\x2\x67D\x67E\a\xDF"+
		"\x2\x2\x67E\x683\x5\x116\x8C\x2\x67F\x681\a\xDF\x2\x2\x680\x67F\x3\x2"+
		"\x2\x2\x680\x681\x3\x2\x2\x2\x681\x682\x3\x2\x2\x2\x682\x684\x5\x10C\x87"+
		"\x2\x683\x680\x3\x2\x2\x2\x683\x684\x3\x2\x2\x2\x684\x686\x3\x2\x2\x2"+
		"\x685\x687\a\xDD\x2\x2\x686\x685\x3\x2\x2\x2\x687\x688\x3\x2\x2\x2\x688"+
		"\x686\x3\x2\x2\x2\x688\x689\x3\x2\x2\x2\x689\x690\x3\x2\x2\x2\x68A\x68C"+
		"\x5\x30\x19\x2\x68B\x68D\a\xDD\x2\x2\x68C\x68B\x3\x2\x2\x2\x68D\x68E\x3"+
		"\x2\x2\x2\x68E\x68C\x3\x2\x2\x2\x68E\x68F\x3\x2\x2\x2\x68F\x691\x3\x2"+
		"\x2\x2\x690\x68A\x3\x2\x2\x2\x690\x691\x3\x2\x2\x2\x691\x692\x3\x2\x2"+
		"\x2\x692\x693\a\x33\x2\x2\x693\xA3\x3\x2\x2\x2\x694\x695\a\x84\x2\x2\x695"+
		"\x696\a\xDF\x2\x2\x696\x698\x5\xDCo\x2\x697\x699\a\xDF\x2\x2\x698\x697"+
		"\x3\x2\x2\x2\x698\x699\x3\x2\x2\x2\x699\x69A\x3\x2\x2\x2\x69A\x69C\a\xB8"+
		"\x2\x2\x69B\x69D\a\xDF\x2\x2\x69C\x69B\x3\x2\x2\x2\x69C\x69D\x3\x2\x2"+
		"\x2\x69D\x69F\x3\x2\x2\x2\x69E\x6A0\x5\xDCo\x2\x69F\x69E\x3\x2\x2\x2\x69F"+
		"\x6A0\x3\x2\x2\x2\x6A0\x6A2\x3\x2\x2\x2\x6A1\x6A3\a\xDF\x2\x2\x6A2\x6A1"+
		"\x3\x2\x2\x2\x6A2\x6A3\x3\x2\x2\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\x6A6\a\xB8"+
		"\x2\x2\x6A5\x6A7\a\xDF\x2\x2\x6A6\x6A5\x3\x2\x2\x2\x6A6\x6A7\x3\x2\x2"+
		"\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x6A9\x5\xDCo\x2\x6A9\xA5\x3\x2\x2\x2\x6AA"+
		"\x6AB\a\x87\x2\x2\x6AB\x6AC\a\xDF\x2\x2\x6AC\x6BB\x5\x116\x8C\x2\x6AD"+
		"\x6AF\a\xDF\x2\x2\x6AE\x6AD\x3\x2\x2\x2\x6AE\x6AF\x3\x2\x2\x2\x6AF\x6B0"+
		"\x3\x2\x2\x2\x6B0\x6B2\a\xC3\x2\x2\x6B1\x6B3\a\xDF\x2\x2\x6B2\x6B1\x3"+
		"\x2\x2\x2\x6B2\x6B3\x3\x2\x2\x2\x6B3\x6B8\x3\x2\x2\x2\x6B4\x6B6\x5\x106"+
		"\x84\x2\x6B5\x6B7\a\xDF\x2\x2\x6B6\x6B5\x3\x2\x2\x2\x6B6\x6B7\x3\x2\x2"+
		"\x2\x6B7\x6B9\x3\x2\x2\x2\x6B8\x6B4\x3\x2\x2\x2\x6B8\x6B9\x3\x2\x2\x2"+
		"\x6B9\x6BA\x3\x2\x2\x2\x6BA\x6BC\a\xCE\x2\x2\x6BB\x6AE\x3\x2\x2\x2\x6BB"+
		"\x6BC\x3\x2\x2\x2\x6BC\xA7\x3\x2\x2\x2\x6BD\x6C0\a\x86\x2\x2\x6BE\x6BF"+
		"\a\xDF\x2\x2\x6BF\x6C1\x5\xDCo\x2\x6C0\x6BE\x3\x2\x2\x2\x6C0\x6C1\x3\x2"+
		"\x2\x2\x6C1\xA9\x3\x2\x2\x2\x6C2\x6C3\a\x8A\x2\x2\x6C3\x6C6\a\xDF\x2\x2"+
		"\x6C4\x6C5\a}\x2\x2\x6C5\x6C7\a\xDF\x2\x2\x6C6\x6C4\x3\x2\x2\x2\x6C6\x6C7"+
		"\x3\x2\x2\x2\x6C7\x6C8\x3\x2\x2\x2\x6C8\x6D3\x5\xACW\x2\x6C9\x6CB\a\xDF"+
		"\x2\x2\x6CA\x6C9\x3\x2\x2\x2\x6CA\x6CB\x3\x2\x2\x2\x6CB\x6CC\x3\x2\x2"+
		"\x2\x6CC\x6CE\a\xB8\x2\x2\x6CD\x6CF\a\xDF\x2\x2\x6CE\x6CD\x3\x2\x2\x2"+
		"\x6CE\x6CF\x3\x2\x2\x2\x6CF\x6D0\x3\x2\x2\x2\x6D0\x6D2\x5\xACW\x2\x6D1"+
		"\x6CA\x3\x2\x2\x2\x6D2\x6D5\x3\x2\x2\x2\x6D3\x6D1\x3\x2\x2\x2\x6D3\x6D4"+
		"\x3\x2\x2\x2\x6D4\xAB\x3\x2\x2\x2\x6D5\x6D3\x3\x2\x2\x2\x6D6\x6D8\x5\xF8"+
		"}\x2\x6D7\x6D9\a\xDF\x2\x2\x6D8\x6D7\x3\x2\x2\x2\x6D8\x6D9\x3\x2\x2\x2"+
		"\x6D9\x6DA\x3\x2\x2\x2\x6DA\x6DC\a\xC3\x2\x2\x6DB\x6DD\a\xDF\x2\x2\x6DC"+
		"\x6DB\x3\x2\x2\x2\x6DC\x6DD\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6E0"+
		"\x5\x112\x8A\x2\x6DF\x6E1\a\xDF\x2\x2\x6E0\x6DF\x3\x2\x2\x2\x6E0\x6E1"+
		"\x3\x2\x2\x2\x6E1\x6E2\x3\x2\x2\x2\x6E2\x6E5\a\xCE\x2\x2\x6E3\x6E4\a\xDF"+
		"\x2\x2\x6E4\x6E6\x5\x118\x8D\x2\x6E5\x6E3\x3\x2\x2\x2\x6E5\x6E6\x3\x2"+
		"\x2\x2\x6E6\xAD\x3\x2\x2\x2\x6E7\x6E8\a\x8C\x2\x2\x6E8\xAF\x3\x2\x2\x2"+
		"\x6E9\x6EF\a\x8D\x2\x2\x6EA\x6ED\a\xDF\x2\x2\x6EB\x6EE\ak\x2\x2\x6EC\x6EE"+
		"\x5\x116\x8C\x2\x6ED\x6EB\x3\x2\x2\x2\x6ED\x6EC\x3\x2\x2\x2\x6EE\x6F0"+
		"\x3\x2\x2\x2\x6EF\x6EA\x3\x2\x2\x2\x6EF\x6F0\x3\x2\x2\x2\x6F0\xB1\x3\x2"+
		"\x2\x2\x6F1\x6F2\a\x8E\x2\x2\x6F2\xB3\x3\x2\x2\x2\x6F3\x6F4\a\x8F\x2\x2"+
		"\x6F4\x6F5\a\xDF\x2\x2\x6F5\x6F6\x5\xDCo\x2\x6F6\xB5\x3\x2\x2\x2\x6F7"+
		"\x6F8\a\x90\x2\x2\x6F8\x6F9\a\xDF\x2\x2\x6F9\x6FB\x5\xF8}\x2\x6FA\x6FC"+
		"\a\xDF\x2\x2\x6FB\x6FA\x3\x2\x2\x2\x6FB\x6FC\x3\x2\x2\x2\x6FC\x6FD\x3"+
		"\x2\x2\x2\x6FD\x6FF\a\xBC\x2\x2\x6FE\x700\a\xDF\x2\x2\x6FF\x6FE\x3\x2"+
		"\x2\x2\x6FF\x700\x3\x2\x2\x2\x700\x701\x3\x2\x2\x2\x701\x702\x5\xDCo\x2"+
		"\x702\xB7\x3\x2\x2\x2\x703\x704\a\x91\x2\x2\x704\x705\a\xDF\x2\x2\x705"+
		"\x707\x5\xDCo\x2\x706\x708\a\xDF\x2\x2\x707\x706\x3\x2\x2\x2\x707\x708"+
		"\x3\x2\x2\x2\x708\x709\x3\x2\x2\x2\x709\x70B\a\xB8\x2\x2\x70A\x70C\a\xDF"+
		"\x2\x2\x70B\x70A\x3\x2\x2\x2\x70B\x70C\x3\x2\x2\x2\x70C\x70D\x3\x2\x2"+
		"\x2\x70D\x70E\x5\xDCo\x2\x70E\xB9\x3\x2\x2\x2\x70F\x710\a\x92\x2\x2\x710"+
		"\x711\a\xDF\x2\x2\x711\x713\x5\xDCo\x2\x712\x714\a\xDF\x2\x2\x713\x712"+
		"\x3\x2\x2\x2\x713\x714\x3\x2\x2\x2\x714\x715\x3\x2\x2\x2\x715\x717\a\xB8"+
		"\x2\x2\x716\x718\a\xDF\x2\x2\x717\x716\x3\x2\x2\x2\x717\x718\x3\x2\x2"+
		"\x2\x718\x719\x3\x2\x2\x2\x719\x71B\x5\xDCo\x2\x71A\x71C\a\xDF\x2\x2\x71B"+
		"\x71A\x3\x2\x2\x2\x71B\x71C\x3\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D\x71F"+
		"\a\xB8\x2\x2\x71E\x720\a\xDF\x2\x2\x71F\x71E\x3\x2\x2\x2\x71F\x720\x3"+
		"\x2\x2\x2\x720\x721\x3\x2\x2\x2\x721\x723\x5\xDCo\x2\x722\x724\a\xDF\x2"+
		"\x2\x723\x722\x3\x2\x2\x2\x723\x724\x3\x2\x2\x2\x724\x725\x3\x2\x2\x2"+
		"\x725\x727\a\xB8\x2\x2\x726\x728\a\xDF\x2\x2\x727\x726\x3\x2\x2\x2\x727"+
		"\x728\x3\x2\x2\x2\x728\x729\x3\x2\x2\x2\x729\x72A\x5\xDCo\x2\x72A\xBB"+
		"\x3\x2\x2\x2\x72B\x72C\a\x93\x2\x2\x72C\x72D\a\xDF\x2\x2\x72D\x72F\x5"+
		"\xDCo\x2\x72E\x730\a\xDF\x2\x2\x72F\x72E\x3\x2\x2\x2\x72F\x730\x3\x2\x2"+
		"\x2\x730\x731\x3\x2\x2\x2\x731\x733\a\xB8\x2\x2\x732\x734\a\xDF\x2\x2"+
		"\x733\x732\x3\x2\x2\x2\x733\x734\x3\x2\x2\x2\x734\x735\x3\x2\x2\x2\x735"+
		"\x736\x5\xDCo\x2\x736\xBD\x3\x2\x2\x2\x737\x738\a\x94\x2\x2\x738\x739"+
		"\a\xDF\x2\x2\x739\x73A\a\x14\x2\x2\x73A\x73B\a\xDF\x2\x2\x73B\x73D\x5"+
		"\xDCo\x2\x73C\x73E\a\xDD\x2\x2\x73D\x73C\x3\x2\x2\x2\x73E\x73F\x3\x2\x2"+
		"\x2\x73F\x73D\x3\x2\x2\x2\x73F\x740\x3\x2\x2\x2\x740\x744\x3\x2\x2\x2"+
		"\x741\x743\x5\xC0\x61\x2\x742\x741\x3\x2\x2\x2\x743\x746\x3\x2\x2\x2\x744"+
		"\x742\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2\x745\x748\x3\x2\x2\x2\x746\x744"+
		"\x3\x2\x2\x2\x747\x749\a\xDF\x2\x2\x748\x747\x3\x2\x2\x2\x748\x749\x3"+
		"\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A\x74B\a\x34\x2\x2\x74B\xBF\x3\x2\x2"+
		"\x2\x74C\x74D\a\x14\x2\x2\x74D\x74E\a\xDF\x2\x2\x74E\x750\x5\xC2\x62\x2"+
		"\x74F\x751\a\xDF\x2\x2\x750\x74F\x3\x2\x2\x2\x750\x751\x3\x2\x2\x2\x751"+
		"\x760\x3\x2\x2\x2\x752\x754\a\xB7\x2\x2\x753\x752\x3\x2\x2\x2\x753\x754"+
		"\x3\x2\x2\x2\x754\x758\x3\x2\x2\x2\x755\x757\a\xDD\x2\x2\x756\x755\x3"+
		"\x2\x2\x2\x757\x75A\x3\x2\x2\x2\x758\x756\x3\x2\x2\x2\x758\x759\x3\x2"+
		"\x2\x2\x759\x761\x3\x2\x2\x2\x75A\x758\x3\x2\x2\x2\x75B\x75D\a\xDD\x2"+
		"\x2\x75C\x75B\x3\x2\x2\x2\x75D\x75E\x3\x2\x2\x2\x75E\x75C\x3\x2\x2\x2"+
		"\x75E\x75F\x3\x2\x2\x2\x75F\x761\x3\x2\x2\x2\x760\x753\x3\x2\x2\x2\x760"+
		"\x75C\x3\x2\x2\x2\x761\x768\x3\x2\x2\x2\x762\x764\x5\x30\x19\x2\x763\x765"+
		"\a\xDD\x2\x2\x764\x763\x3\x2\x2\x2\x765\x766\x3\x2\x2\x2\x766\x764\x3"+
		"\x2\x2\x2\x766\x767\x3\x2\x2\x2\x767\x769\x3\x2\x2\x2\x768\x762\x3\x2"+
		"\x2\x2\x768\x769\x3\x2\x2\x2\x769\xC1\x3\x2\x2\x2\x76A\x77A\a.\x2\x2\x76B"+
		"\x776\x5\xC4\x63\x2\x76C\x76E\a\xDF\x2\x2\x76D\x76C\x3\x2\x2\x2\x76D\x76E"+
		"\x3\x2\x2\x2\x76E\x76F\x3\x2\x2\x2\x76F\x771\a\xB8\x2\x2\x770\x772\a\xDF"+
		"\x2\x2\x771\x770\x3\x2\x2\x2\x771\x772\x3\x2\x2\x2\x772\x773\x3\x2\x2"+
		"\x2\x773\x775\x5\xC4\x63\x2\x774\x76D\x3\x2\x2\x2\x775\x778\x3\x2\x2\x2"+
		"\x776\x774\x3\x2\x2\x2\x776\x777\x3\x2\x2\x2\x777\x77A\x3\x2\x2\x2\x778"+
		"\x776\x3\x2\x2\x2\x779\x76A\x3\x2\x2\x2\x779\x76B\x3\x2\x2\x2\x77A\xC3"+
		"\x3\x2\x2\x2\x77B\x77D\aR\x2\x2\x77C\x77E\a\xDF\x2\x2\x77D\x77C\x3\x2"+
		"\x2\x2\x77D\x77E\x3\x2\x2\x2\x77E\x77F\x3\x2\x2\x2\x77F\x781\x5\x11E\x90"+
		"\x2\x780\x782\a\xDF\x2\x2\x781\x780\x3\x2\x2\x2\x781\x782\x3\x2\x2\x2"+
		"\x782\x783\x3\x2\x2\x2\x783\x784\x5\xDCo\x2\x784\x78D\x3\x2\x2\x2\x785"+
		"\x78D\x5\xDCo\x2\x786\x787\x5\xDCo\x2\x787\x788\a\xDF\x2\x2\x788\x789"+
		"\a\xA4\x2\x2\x789\x78A\a\xDF\x2\x2\x78A\x78B\x5\xDCo\x2\x78B\x78D\x3\x2"+
		"\x2\x2\x78C\x77B\x3\x2\x2\x2\x78C\x785\x3\x2\x2\x2\x78C\x786\x3\x2\x2"+
		"\x2\x78D\xC5\x3\x2\x2\x2\x78E\x78F\a\x95\x2\x2\x78F\x790\a\xDF\x2\x2\x790"+
		"\x799\x5\xDCo\x2\x791\x793\a\xDF\x2\x2\x792\x791\x3\x2\x2\x2\x792\x793"+
		"\x3\x2\x2\x2\x793\x794\x3\x2\x2\x2\x794\x796\a\xB8\x2\x2\x795\x797\a\xDF"+
		"\x2\x2\x796\x795\x3\x2\x2\x2\x796\x797\x3\x2\x2\x2\x797\x798\x3\x2\x2"+
		"\x2\x798\x79A\x5\xDCo\x2\x799\x792\x3\x2\x2\x2\x799\x79A\x3\x2\x2\x2\x79A"+
		"\xC7\x3\x2\x2\x2\x79B\x79C\a\x97\x2\x2\x79C\x79D\a\xDF\x2\x2\x79D\x79F"+
		"\x5\xDCo\x2\x79E\x7A0\a\xDF\x2\x2\x79F\x79E\x3\x2\x2\x2\x79F\x7A0\x3\x2"+
		"\x2\x2\x7A0\x7A1\x3\x2\x2\x2\x7A1\x7A3\a\xB8\x2\x2\x7A2\x7A4\a\xDF\x2"+
		"\x2\x7A3\x7A2\x3\x2\x2\x2\x7A3\x7A4\x3\x2\x2\x2\x7A4\x7A5\x3\x2\x2\x2"+
		"\x7A5\x7A6\x5\xDCo\x2\x7A6\xC9\x3\x2\x2\x2\x7A7\x7A8\a\x96\x2\x2\x7A8"+
		"\x7A9\a\xDF\x2\x2\x7A9\x7AB\x5\xF8}\x2\x7AA\x7AC\a\xDF\x2\x2\x7AB\x7AA"+
		"\x3\x2\x2\x2\x7AB\x7AC\x3\x2\x2\x2\x7AC\x7AD\x3\x2\x2\x2\x7AD\x7AF\a\xBC"+
		"\x2\x2\x7AE\x7B0\a\xDF\x2\x2\x7AF\x7AE\x3\x2\x2\x2\x7AF\x7B0\x3\x2\x2"+
		"\x2\x7B0\x7B1\x3\x2\x2\x2\x7B1\x7B2\x5\xDCo\x2\x7B2\xCB\x3\x2\x2\x2\x7B3"+
		"\x7B4\a\x9D\x2\x2\x7B4\xCD\x3\x2\x2\x2\x7B5\x7B6\x5\x132\x9A\x2\x7B6\x7B7"+
		"\a\xDF\x2\x2\x7B7\x7B9\x3\x2\x2\x2\x7B8\x7B5\x3\x2\x2\x2\x7B8\x7B9\x3"+
		"\x2\x2\x2\x7B9\x7BC\x3\x2\x2\x2\x7BA\x7BB\a\x9B\x2\x2\x7BB\x7BD\a\xDF"+
		"\x2\x2\x7BC\x7BA\x3\x2\x2\x2\x7BC\x7BD\x3\x2\x2\x2\x7BD\x7BE\x3\x2\x2"+
		"\x2\x7BE\x7BF\a\x9F\x2\x2\x7BF\x7C0\a\xDF\x2\x2\x7C0\x7C5\x5\x116\x8C"+
		"\x2\x7C1\x7C3\a\xDF\x2\x2\x7C2\x7C1\x3\x2\x2\x2\x7C2\x7C3\x3\x2\x2\x2"+
		"\x7C3\x7C4\x3\x2\x2\x2\x7C4\x7C6\x5\x10C\x87\x2\x7C5\x7C2\x3\x2\x2\x2"+
		"\x7C5\x7C6\x3\x2\x2\x2\x7C6\x7C8\x3\x2\x2\x2\x7C7\x7C9\a\xDD\x2\x2\x7C8"+
		"\x7C7\x3\x2\x2\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7C8\x3\x2\x2\x2\x7CA\x7CB"+
		"\x3\x2\x2\x2\x7CB\x7D2\x3\x2\x2\x2\x7CC\x7CE\x5\x30\x19\x2\x7CD\x7CF\a"+
		"\xDD\x2\x2\x7CE\x7CD\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2\x7D0\x7CE\x3\x2"+
		"\x2\x2\x7D0\x7D1\x3\x2\x2\x2\x7D1\x7D3\x3\x2\x2\x2\x7D2\x7CC\x3\x2\x2"+
		"\x2\x7D2\x7D3\x3\x2\x2\x2\x7D3\x7D4\x3\x2\x2\x2\x7D4\x7D5\a\x35\x2\x2"+
		"\x7D5\xCF\x3\x2\x2\x2\x7D6\x7D8\a\xA3\x2\x2\x7D7\x7D9\a\xDF\x2\x2\x7D8"+
		"\x7D7\x3\x2\x2\x2\x7D8\x7D9\x3\x2\x2\x2\x7D9\x7DA\x3\x2\x2\x2\x7DA\x7DC"+
		"\a\xBC\x2\x2\x7DB\x7DD\a\xDF\x2\x2\x7DC\x7DB\x3\x2\x2\x2\x7DC\x7DD\x3"+
		"\x2\x2\x2\x7DD\x7DE\x3\x2\x2\x2\x7DE\x7DF\x5\xDCo\x2\x7DF\xD1\x3\x2\x2"+
		"\x2\x7E0\x7E1\x5\x132\x9A\x2\x7E1\x7E2\a\xDF\x2\x2\x7E2\x7E4\x3\x2\x2"+
		"\x2\x7E3\x7E0\x3\x2\x2\x2\x7E3\x7E4\x3\x2\x2\x2\x7E4\x7E5\x3\x2\x2\x2"+
		"\x7E5\x7E6\a\xA6\x2\x2\x7E6\x7E7\a\xDF\x2\x2\x7E7\x7E9\x5\x116\x8C\x2"+
		"\x7E8\x7EA\a\xDD\x2\x2\x7E9\x7E8\x3\x2\x2\x2\x7EA\x7EB\x3\x2\x2\x2\x7EB"+
		"\x7E9\x3\x2\x2\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC\x7F0\x3\x2\x2\x2\x7ED\x7EF"+
		"\x5\xD4k\x2\x7EE\x7ED\x3\x2\x2\x2\x7EF\x7F2\x3\x2\x2\x2\x7F0\x7EE\x3\x2"+
		"\x2\x2\x7F0\x7F1\x3\x2\x2\x2\x7F1\x7F3\x3\x2\x2\x2\x7F2\x7F0\x3\x2\x2"+
		"\x2\x7F3\x7F4\a\x36\x2\x2\x7F4\xD3\x3\x2\x2\x2\x7F5\x804\x5\x116\x8C\x2"+
		"\x7F6\x7F8\a\xDF\x2\x2\x7F7\x7F6\x3\x2\x2\x2\x7F7\x7F8\x3\x2\x2\x2\x7F8"+
		"\x7F9\x3\x2\x2\x2\x7F9\x7FE\a\xC3\x2\x2\x7FA\x7FC\a\xDF\x2\x2\x7FB\x7FA"+
		"\x3\x2\x2\x2\x7FB\x7FC\x3\x2\x2\x2\x7FC\x7FD\x3\x2\x2\x2\x7FD\x7FF\x5"+
		"\x112\x8A\x2\x7FE\x7FB\x3\x2\x2\x2\x7FE\x7FF\x3\x2\x2\x2\x7FF\x801\x3"+
		"\x2\x2\x2\x800\x802\a\xDF\x2\x2\x801\x800\x3\x2\x2\x2\x801\x802\x3\x2"+
		"\x2\x2\x802\x803\x3\x2\x2\x2\x803\x805\a\xCE\x2\x2\x804\x7F7\x3\x2\x2"+
		"\x2\x804\x805\x3\x2\x2\x2\x805\x808\x3\x2\x2\x2\x806\x807\a\xDF\x2\x2"+
		"\x807\x809\x5\x118\x8D\x2\x808\x806\x3\x2\x2\x2\x808\x809\x3\x2\x2\x2"+
		"\x809\x80B\x3\x2\x2\x2\x80A\x80C\a\xDD\x2\x2\x80B\x80A\x3\x2\x2\x2\x80C"+
		"\x80D\x3\x2\x2\x2\x80D\x80B\x3\x2\x2\x2\x80D\x80E\x3\x2\x2\x2\x80E\xD5"+
		"\x3\x2\x2\x2\x80F\x810\a\xA7\x2\x2\x810\x811\a\xDF\x2\x2\x811\x816\x5"+
		"\xDCo\x2\x812\x813\a\xDF\x2\x2\x813\x814\aR\x2\x2\x814\x815\a\xDF\x2\x2"+
		"\x815\x817\x5\x12E\x98\x2\x816\x812\x3\x2\x2\x2\x816\x817\x3\x2\x2\x2"+
		"\x817\xD7\x3\x2\x2\x2\x818\x819\a\xA8\x2\x2\x819\x81A\a\xDF\x2\x2\x81A"+
		"\x81B\x5\xDCo\x2\x81B\xD9\x3\x2\x2\x2\x81C\x81D\a\xA9\x2\x2\x81D\x81E"+
		"\a\xDF\x2\x2\x81E\x82D\x5\xDCo\x2\x81F\x821\a\xDF\x2\x2\x820\x81F\x3\x2"+
		"\x2\x2\x820\x821\x3\x2\x2\x2\x821\x822\x3\x2\x2\x2\x822\x824\a\xB8\x2"+
		"\x2\x823\x825\a\xDF\x2\x2\x824\x823\x3\x2\x2\x2\x824\x825\x3\x2\x2\x2"+
		"\x825\x826\x3\x2\x2\x2\x826\x82B\x5\xDCo\x2\x827\x828\a\xDF\x2\x2\x828"+
		"\x829\a\xA4\x2\x2\x829\x82A\a\xDF\x2\x2\x82A\x82C\x5\xDCo\x2\x82B\x827"+
		"\x3\x2\x2\x2\x82B\x82C\x3\x2\x2\x2\x82C\x82E\x3\x2\x2\x2\x82D\x820\x3"+
		"\x2\x2\x2\x82D\x82E\x3\x2\x2\x2\x82E\xDB\x3\x2\x2\x2\x82F\x830\bo\x1\x2"+
		"\x830\x869\x5\x128\x95\x2\x831\x869\x5\xF8}\x2\x832\x834\a\xC3\x2\x2\x833"+
		"\x835\a\xDF\x2\x2\x834\x833\x3\x2\x2\x2\x834\x835\x3\x2\x2\x2\x835\x836"+
		"\x3\x2\x2\x2\x836\x841\x5\xDCo\x2\x837\x839\a\xDF\x2\x2\x838\x837\x3\x2"+
		"\x2\x2\x838\x839\x3\x2\x2\x2\x839\x83A\x3\x2\x2\x2\x83A\x83C\a\xB8\x2"+
		"\x2\x83B\x83D\a\xDF\x2\x2\x83C\x83B\x3\x2\x2\x2\x83C\x83D\x3\x2\x2\x2"+
		"\x83D\x83E\x3\x2\x2\x2\x83E\x840\x5\xDCo\x2\x83F\x838\x3\x2\x2\x2\x840"+
		"\x843\x3\x2\x2\x2\x841\x83F\x3\x2\x2\x2\x841\x842\x3\x2\x2\x2\x842\x845"+
		"\x3\x2\x2\x2\x843\x841\x3\x2\x2\x2\x844\x846\a\xDF\x2\x2\x845\x844\x3"+
		"\x2\x2\x2\x845\x846\x3\x2\x2\x2\x846\x847\x3\x2\x2\x2\x847\x848\a\xCE"+
		"\x2\x2\x848\x869\x3\x2\x2\x2\x849\x84A\al\x2\x2\x84A\x84B\a\xDF\x2\x2"+
		"\x84B\x869\x5\xDCo\x1E\x84C\x869\x5\xD6l\x2\x84D\x869\x5\x8A\x46\x2\x84E"+
		"\x84F\a\x4\x2\x2\x84F\x850\a\xDF\x2\x2\x850\x869\x5\xDCo\x1B\x851\x853"+
		"\x5\xF8}\x2\x852\x854\a\xDF\x2\x2\x853\x852\x3\x2\x2\x2\x853\x854\x3\x2"+
		"\x2\x2\x854\x855\x3\x2\x2\x2\x855\x857\a\xB5\x2\x2\x856\x858\a\xDF\x2"+
		"\x2\x857\x856\x3\x2\x2\x2\x857\x858\x3\x2\x2\x2\x858\x859\x3\x2\x2\x2"+
		"\x859\x85A\x5\xDCo\x1A\x85A\x869\x3\x2\x2\x2\x85B\x85D\a\xC5\x2\x2\x85C"+
		"\x85E\a\xDF\x2\x2\x85D\x85C\x3\x2\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E\x85F"+
		"\x3\x2\x2\x2\x85F\x869\x5\xDCo\x10\x860\x862\a\xCA\x2\x2\x861\x863\a\xDF"+
		"\x2\x2\x862\x861\x3\x2\x2\x2\x862\x863\x3\x2\x2\x2\x863\x864\x3\x2\x2"+
		"\x2\x864\x869\x5\xDCo\xF\x865\x866\am\x2\x2\x866\x867\a\xDF\x2\x2\x867"+
		"\x869\x5\xDCo\x3\x868\x82F\x3\x2\x2\x2\x868\x831\x3\x2\x2\x2\x868\x832"+
		"\x3\x2\x2\x2\x868\x849\x3\x2\x2\x2\x868\x84C\x3\x2\x2\x2\x868\x84D\x3"+
		"\x2\x2\x2\x868\x84E\x3\x2\x2\x2\x868\x851\x3\x2\x2\x2\x868\x85B\x3\x2"+
		"\x2\x2\x868\x860\x3\x2\x2\x2\x868\x865\x3\x2\x2\x2\x869\x908\x3\x2\x2"+
		"\x2\x86A\x86B\f\x19\x2\x2\x86B\x86C\a\xDF\x2\x2\x86C\x86D\aR\x2\x2\x86D"+
		"\x86E\a\xDF\x2\x2\x86E\x907\x5\xDCo\x1A\x86F\x870\f\x18\x2\x2\x870\x871"+
		"\a\xDF\x2\x2\x871\x872\a\\\x2\x2\x872\x873\a\xDF\x2\x2\x873\x907\x5\xDC"+
		"o\x19\x874\x876\f\x17\x2\x2\x875\x877\a\xDF\x2\x2\x876\x875\x3\x2\x2\x2"+
		"\x876\x877\x3\x2\x2\x2\x877\x878\x3\x2\x2\x2\x878\x87A\a\xBE\x2\x2\x879"+
		"\x87B\a\xDF\x2\x2\x87A\x879\x3\x2\x2\x2\x87A\x87B\x3\x2\x2\x2\x87B\x87C"+
		"\x3\x2\x2\x2\x87C\x907\x5\xDCo\x18\x87D\x87F\f\x16\x2\x2\x87E\x880\a\xDF"+
		"\x2\x2\x87F\x87E\x3\x2\x2\x2\x87F\x880\x3\x2\x2\x2\x880\x881\x3\x2\x2"+
		"\x2\x881\x883\a\xC1\x2\x2\x882\x884\a\xDF\x2\x2\x883\x882\x3\x2\x2\x2"+
		"\x883\x884\x3\x2\x2\x2\x884\x885\x3\x2\x2\x2\x885\x907\x5\xDCo\x17\x886"+
		"\x888\f\x15\x2\x2\x887\x889\a\xDF\x2\x2\x888\x887\x3\x2\x2\x2\x888\x889"+
		"\x3\x2\x2\x2\x889\x88A\x3\x2\x2\x2\x88A\x88C\a\xBF\x2\x2\x88B\x88D\a\xDF"+
		"\x2\x2\x88C\x88B\x3\x2\x2\x2\x88C\x88D\x3\x2\x2\x2\x88D\x88E\x3\x2\x2"+
		"\x2\x88E\x907\x5\xDCo\x16\x88F\x891\f\x14\x2\x2\x890\x892\a\xDF\x2\x2"+
		"\x891\x890\x3\x2\x2\x2\x891\x892\x3\x2\x2\x2\x892\x893\x3\x2\x2\x2\x893"+
		"\x895\a\xC4\x2\x2\x894\x896\a\xDF\x2\x2\x895\x894\x3\x2\x2\x2\x895\x896"+
		"\x3\x2\x2\x2\x896\x897\x3\x2\x2\x2\x897\x907\x5\xDCo\x15\x898\x89A\f\x13"+
		"\x2\x2\x899\x89B\a\xDF\x2\x2\x89A\x899\x3\x2\x2\x2\x89A\x89B\x3\x2\x2"+
		"\x2\x89B\x89C\x3\x2\x2\x2\x89C\x89E\a\xC8\x2\x2\x89D\x89F\a\xDF\x2\x2"+
		"\x89E\x89D\x3\x2\x2\x2\x89E\x89F\x3\x2\x2\x2\x89F\x8A0\x3\x2\x2\x2\x8A0"+
		"\x907\x5\xDCo\x14\x8A1\x8A3\f\x12\x2\x2\x8A2\x8A4\a\xDF\x2\x2\x8A3\x8A2"+
		"\x3\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A5\x3\x2\x2\x2\x8A5\x8A7\a\xBC"+
		"\x2\x2\x8A6\x8A8\a\xDF\x2\x2\x8A7\x8A6\x3\x2\x2\x2\x8A7\x8A8\x3\x2\x2"+
		"\x2\x8A8\x8A9\x3\x2\x2\x2\x8A9\x907\x5\xDCo\x13\x8AA\x8AB\f\x11\x2\x2"+
		"\x8AB\x8AC\a\xDF\x2\x2\x8AC\x8AD\a\xB4\x2\x2\x8AD\x8AE\a\xDF\x2\x2\x8AE"+
		"\x907\x5\xDCo\x12\x8AF\x8B1\f\xE\x2\x2\x8B0\x8B2\a\xDF\x2\x2\x8B1\x8B0"+
		"\x3\x2\x2\x2\x8B1\x8B2\x3\x2\x2\x2\x8B2\x8B3\x3\x2\x2\x2\x8B3\x8B5\a\xCA"+
		"\x2\x2\x8B4\x8B6\a\xDF\x2\x2\x8B5\x8B4\x3\x2\x2\x2\x8B5\x8B6\x3\x2\x2"+
		"\x2\x8B6\x8B7\x3\x2\x2\x2\x8B7\x907\x5\xDCo\xF\x8B8\x8BA\f\r\x2\x2\x8B9"+
		"\x8BB\a\xDF\x2\x2\x8BA\x8B9\x3\x2\x2\x2\x8BA\x8BB\x3\x2\x2\x2\x8BB\x8BC"+
		"\x3\x2\x2\x2\x8BC\x8BE\ai\x2\x2\x8BD\x8BF\a\xDF\x2\x2\x8BE\x8BD\x3\x2"+
		"\x2\x2\x8BE\x8BF\x3\x2\x2\x2\x8BF\x8C0\x3\x2\x2\x2\x8C0\x907\x5\xDCo\xE"+
		"\x8C1\x8C3\f\f\x2\x2\x8C2\x8C4\a\xDF\x2\x2\x8C3\x8C2\x3\x2\x2\x2\x8C3"+
		"\x8C4\x3\x2\x2\x2\x8C4\x8C5\x3\x2\x2\x2\x8C5\x8C7\a\xB9\x2\x2\x8C6\x8C8"+
		"\a\xDF\x2\x2\x8C7\x8C6\x3\x2\x2\x2\x8C7\x8C8\x3\x2\x2\x2\x8C8\x8C9\x3"+
		"\x2\x2\x2\x8C9\x907\x5\xDCo\r\x8CA\x8CC\f\v\x2\x2\x8CB\x8CD\a\xDF\x2\x2"+
		"\x8CC\x8CB\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE"+
		"\x8D0\a\xC7\x2\x2\x8CF\x8D1\a\xDF\x2\x2\x8D0\x8CF\x3\x2\x2\x2\x8D0\x8D1"+
		"\x3\x2\x2\x2\x8D1\x8D2\x3\x2\x2\x2\x8D2\x907\x5\xDCo\f\x8D3\x8D5\f\n\x2"+
		"\x2\x8D4\x8D6\a\xDF\x2\x2\x8D5\x8D4\x3\x2\x2\x2\x8D5\x8D6\x3\x2\x2\x2"+
		"\x8D6\x8D7\x3\x2\x2\x2\x8D7\x8D9\a\xC5\x2\x2\x8D8\x8DA\a\xDF\x2\x2\x8D9"+
		"\x8D8\x3\x2\x2\x2\x8D9\x8DA\x3\x2\x2\x2\x8DA\x8DB\x3\x2\x2\x2\x8DB\x907"+
		"\x5\xDCo\v\x8DC\x8DE\f\t\x2\x2\x8DD\x8DF\a\xDF\x2\x2\x8DE\x8DD\x3\x2\x2"+
		"\x2\x8DE\x8DF\x3\x2\x2\x2\x8DF\x8E0\x3\x2\x2\x2\x8E0\x8E2\a\xCC\x2\x2"+
		"\x8E1\x8E3\a\xDF\x2\x2\x8E2\x8E1\x3\x2\x2\x2\x8E2\x8E3\x3\x2\x2\x2\x8E3"+
		"\x8E4\x3\x2\x2\x2\x8E4\x907\x5\xDCo\n\x8E5\x8E6\f\b\x2\x2\x8E6\x8E7\a"+
		"\xDF\x2\x2\x8E7\x8E8\aN\x2\x2\x8E8\x8E9\a\xDF\x2\x2\x8E9\x907\x5\xDCo"+
		"\t\x8EA\x8EB\f\a\x2\x2\x8EB\x8EC\a\xDF\x2\x2\x8EC\x8ED\a;\x2\x2\x8ED\x8EE"+
		"\a\xDF\x2\x2\x8EE\x907\x5\xDCo\b\x8EF\x8F1\f\x6\x2\x2\x8F0\x8F2\a\xDF"+
		"\x2\x2\x8F1\x8F0\x3\x2\x2\x2\x8F1\x8F2\x3\x2\x2\x2\x8F2\x8F3\x3\x2\x2"+
		"\x2\x8F3\x8F5\a\xB3\x2\x2\x8F4\x8F6\a\xDF\x2\x2\x8F5\x8F4\x3\x2\x2\x2"+
		"\x8F5\x8F6\x3\x2\x2\x2\x8F6\x8F7\x3\x2\x2\x2\x8F7\x907\x5\xDCo\a\x8F8"+
		"\x8FA\f\x5\x2\x2\x8F9\x8FB\a\xDF\x2\x2\x8FA\x8F9\x3\x2\x2\x2\x8FA\x8FB"+
		"\x3\x2\x2\x2\x8FB\x8FC\x3\x2\x2\x2\x8FC\x8FE\az\x2\x2\x8FD\x8FF\a\xDF"+
		"\x2\x2\x8FE\x8FD\x3\x2\x2\x2\x8FE\x8FF\x3\x2\x2\x2\x8FF\x900\x3\x2\x2"+
		"\x2\x900\x907\x5\xDCo\x6\x901\x902\f\x4\x2\x2\x902\x903\a\xDF\x2\x2\x903"+
		"\x904\a\x6\x2\x2\x904\x905\a\xDF\x2\x2\x905\x907\x5\xDCo\x5\x906\x86A"+
		"\x3\x2\x2\x2\x906\x86F\x3\x2\x2\x2\x906\x874\x3\x2\x2\x2\x906\x87D\x3"+
		"\x2\x2\x2\x906\x886\x3\x2\x2\x2\x906\x88F\x3\x2\x2\x2\x906\x898\x3\x2"+
		"\x2\x2\x906\x8A1\x3\x2\x2\x2\x906\x8AA\x3\x2\x2\x2\x906\x8AF\x3\x2\x2"+
		"\x2\x906\x8B8\x3\x2\x2\x2\x906\x8C1\x3\x2\x2\x2\x906\x8CA\x3\x2\x2\x2"+
		"\x906\x8D3\x3\x2\x2\x2\x906\x8DC\x3\x2\x2\x2\x906\x8E5\x3\x2\x2\x2\x906"+
		"\x8EA\x3\x2\x2\x2\x906\x8EF\x3\x2\x2\x2\x906\x8F8\x3\x2\x2\x2\x906\x901"+
		"\x3\x2\x2\x2\x907\x90A\x3\x2\x2\x2\x908\x906\x3\x2\x2\x2\x908\x909\x3"+
		"\x2\x2\x2\x909\xDD\x3\x2\x2\x2\x90A\x908\x3\x2\x2\x2\x90B\x90F\a*\x2\x2"+
		"\x90C\x90F\a\x9B\x2\x2\x90D\x90F\x5\x132\x9A\x2\x90E\x90B\x3\x2\x2\x2"+
		"\x90E\x90C\x3\x2\x2\x2\x90E\x90D\x3\x2\x2\x2\x90F\x910\x3\x2\x2\x2\x910"+
		"\x913\a\xDF\x2\x2\x911\x912\a\xB1\x2\x2\x912\x914\a\xDF\x2\x2\x913\x911"+
		"\x3\x2\x2\x2\x913\x914\x3\x2\x2\x2\x914\x915\x3\x2\x2\x2\x915\x916\x5"+
		"\xE0q\x2\x916\xDF\x3\x2\x2\x2\x917\x922\x5\xE2r\x2\x918\x91A\a\xDF\x2"+
		"\x2\x919\x918\x3\x2\x2\x2\x919\x91A\x3\x2\x2\x2\x91A\x91B\x3\x2\x2\x2"+
		"\x91B\x91D\a\xB8\x2\x2\x91C\x91E\a\xDF\x2\x2\x91D\x91C\x3\x2\x2\x2\x91D"+
		"\x91E\x3\x2\x2\x2\x91E\x91F\x3\x2\x2\x2\x91F\x921\x5\xE2r\x2\x920\x919"+
		"\x3\x2\x2\x2\x921\x924\x3\x2\x2\x2\x922\x920\x3\x2\x2\x2\x922\x923\x3"+
		"\x2\x2\x2\x923\xE1\x3\x2\x2\x2\x924\x922\x3\x2\x2\x2\x925\x937\x5\x116"+
		"\x8C\x2\x926\x928\a\xDF\x2\x2\x927\x926\x3\x2\x2\x2\x927\x928\x3\x2\x2"+
		"\x2\x928\x929\x3\x2\x2\x2\x929\x92B\a\xC3\x2\x2\x92A\x92C\a\xDF\x2\x2"+
		"\x92B\x92A\x3\x2\x2\x2\x92B\x92C\x3\x2\x2\x2\x92C\x931\x3\x2\x2\x2\x92D"+
		"\x92F\x5\x112\x8A\x2\x92E\x930\a\xDF\x2\x2\x92F\x92E\x3\x2\x2\x2\x92F"+
		"\x930\x3\x2\x2\x2\x930\x932\x3\x2\x2\x2\x931\x92D\x3\x2\x2\x2\x931\x932"+
		"\x3\x2\x2\x2\x932\x933\x3\x2\x2\x2\x933\x935\a\xCE\x2\x2\x934\x936\a\xDF"+
		"\x2\x2\x935\x934\x3\x2\x2\x2\x935\x936\x3\x2\x2\x2\x936\x938\x3\x2\x2"+
		"\x2\x937\x927\x3\x2\x2\x2\x937\x938\x3\x2\x2\x2\x938\x93A\x3\x2\x2\x2"+
		"\x939\x93B\x5\x130\x99\x2\x93A\x939\x3\x2\x2\x2\x93A\x93B\x3\x2\x2\x2"+
		"\x93B\x93E\x3\x2\x2\x2\x93C\x93D\a\xDF\x2\x2\x93D\x93F\x5\x118\x8D\x2"+
		"\x93E\x93C\x3\x2\x2\x2\x93E\x93F\x3\x2\x2\x2\x93F\xE3\x3\x2\x2\x2\x940"+
		"\x941\a\xAE\x2\x2\x941\x942\a\xDF\x2\x2\x942\x944\x5\xDCo\x2\x943\x945"+
		"\a\xDD\x2\x2\x944\x943\x3\x2\x2\x2\x945\x946\x3\x2\x2\x2\x946\x944\x3"+
		"\x2\x2\x2\x946\x947\x3\x2\x2\x2\x947\x94B\x3\x2\x2\x2\x948\x94A\x5\x30"+
		"\x19\x2\x949\x948\x3\x2\x2\x2\x94A\x94D\x3\x2\x2\x2\x94B\x949\x3\x2\x2"+
		"\x2\x94B\x94C\x3\x2\x2\x2\x94C\x951\x3\x2\x2\x2\x94D\x94B\x3\x2\x2\x2"+
		"\x94E\x950\a\xDD\x2\x2\x94F\x94E\x3\x2\x2\x2\x950\x953\x3\x2\x2\x2\x951"+
		"\x94F\x3\x2\x2\x2\x951\x952\x3\x2\x2\x2\x952\x954\x3\x2\x2\x2\x953\x951"+
		"\x3\x2\x2\x2\x954\x955\a\xAD\x2\x2\x955\xE5\x3\x2\x2\x2\x956\x957\a\xAF"+
		"\x2\x2\x957\x958\a\xDF\x2\x2\x958\x95A\x5\xDCo\x2\x959\x95B\a\xDF\x2\x2"+
		"\x95A\x959\x3\x2\x2\x2\x95A\x95B\x3\x2\x2\x2\x95B\x95C\x3\x2\x2\x2\x95C"+
		"\x95E\a\xB8\x2\x2\x95D\x95F\a\xDF\x2\x2\x95E\x95D\x3\x2\x2\x2\x95E\x95F"+
		"\x3\x2\x2\x2\x95F\x960\x3\x2\x2\x2\x960\x961\x5\xDCo\x2\x961\xE7\x3\x2"+
		"\x2\x2\x962\x963\a\xB0\x2\x2\x963\x964\a\xDF\x2\x2\x964\x966\x5\xF8}\x2"+
		"\x965\x967\a\xDD\x2\x2\x966\x965\x3\x2\x2\x2\x967\x968\x3\x2\x2\x2\x968"+
		"\x966\x3\x2\x2\x2\x968\x969\x3\x2\x2\x2\x969\x970\x3\x2\x2\x2\x96A\x96C"+
		"\x5\x30\x19\x2\x96B\x96D\a\xDD\x2\x2\x96C\x96B\x3\x2\x2\x2\x96D\x96E\x3"+
		"\x2\x2\x2\x96E\x96C\x3\x2\x2\x2\x96E\x96F\x3\x2\x2\x2\x96F\x971\x3\x2"+
		"\x2\x2\x970\x96A\x3\x2\x2\x2\x970\x971\x3\x2\x2\x2\x971\x972\x3\x2\x2"+
		"\x2\x972\x973\a\x37\x2\x2\x973\xE9\x3\x2\x2\x2\x974\x975\a\xB2\x2\x2\x975"+
		"\x976\a\xDF\x2\x2\x976\x978\x5\xDCo\x2\x977\x979\a\xDF\x2\x2\x978\x977"+
		"\x3\x2\x2\x2\x978\x979\x3\x2\x2\x2\x979\x97A\x3\x2\x2\x2\x97A\x97F\a\xB8"+
		"\x2\x2\x97B\x97D\a\xDF\x2\x2\x97C\x97B\x3\x2\x2\x2\x97C\x97D\x3\x2\x2"+
		"\x2\x97D\x97E\x3\x2\x2\x2\x97E\x980\x5\x98M\x2\x97F\x97C\x3\x2\x2\x2\x97F"+
		"\x980\x3\x2\x2\x2\x980\xEB\x3\x2\x2\x2\x981\x984\x5\xEEx\x2\x982\x984"+
		"\x5\xF0y\x2\x983\x981\x3\x2\x2\x2\x983\x982\x3\x2\x2\x2\x984\xED\x3\x2"+
		"\x2\x2\x985\x986\a\x13\x2\x2\x986\x987\a\xDF\x2\x2\x987\x989\x5\x116\x8C"+
		"\x2\x988\x98A\x5\x130\x99\x2\x989\x988\x3\x2\x2\x2\x989\x98A\x3\x2\x2"+
		"\x2\x98A\x998\x3\x2\x2\x2\x98B\x98D\a\xDF\x2\x2\x98C\x98B\x3\x2\x2\x2"+
		"\x98C\x98D\x3\x2\x2\x2\x98D\x98E\x3\x2\x2\x2\x98E\x990\a\xC3\x2\x2\x98F"+
		"\x991\a\xDF\x2\x2\x990\x98F\x3\x2\x2\x2\x990\x991\x3\x2\x2\x2\x991\x992"+
		"\x3\x2\x2\x2\x992\x994\x5\x106\x84\x2\x993\x995\a\xDF\x2\x2\x994\x993"+
		"\x3\x2\x2\x2\x994\x995\x3\x2\x2\x2\x995\x996\x3\x2\x2\x2\x996\x997\a\xCE"+
		"\x2\x2\x997\x999\x3\x2\x2\x2\x998\x98C\x3\x2\x2\x2\x998\x999\x3\x2\x2"+
		"\x2\x999\xEF\x3\x2\x2\x2\x99A\x99B\a\x13\x2\x2\x99B\x99D\a\xDF\x2\x2\x99C"+
		"\x99E\x5\xF8}\x2\x99D\x99C\x3\x2\x2\x2\x99D\x99E\x3\x2\x2\x2\x99E\x99F"+
		"\x3\x2\x2\x2\x99F\x9A1\a\xBB\x2\x2\x9A0\x9A2\a\xDF\x2\x2\x9A1\x9A0\x3"+
		"\x2\x2\x2\x9A1\x9A2\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2\x2\x9A3\x9A5\x5\x116"+
		"\x8C\x2\x9A4\x9A6\x5\x130\x99\x2\x9A5\x9A4\x3\x2\x2\x2\x9A5\x9A6\x3\x2"+
		"\x2\x2\x9A6\x9B4\x3\x2\x2\x2\x9A7\x9A9\a\xDF\x2\x2\x9A8\x9A7\x3\x2\x2"+
		"\x2\x9A8\x9A9\x3\x2\x2\x2\x9A9\x9AA\x3\x2\x2\x2\x9AA\x9AC\a\xC3\x2\x2"+
		"\x9AB\x9AD\a\xDF\x2\x2\x9AC\x9AB\x3\x2\x2\x2\x9AC\x9AD\x3\x2\x2\x2\x9AD"+
		"\x9AE\x3\x2\x2\x2\x9AE\x9B0\x5\x106\x84\x2\x9AF\x9B1\a\xDF\x2\x2\x9B0"+
		"\x9AF\x3\x2\x2\x2\x9B0\x9B1\x3\x2\x2\x2\x9B1\x9B2\x3\x2\x2\x2\x9B2\x9B3"+
		"\a\xCE\x2\x2\x9B3\x9B5\x3\x2\x2\x2\x9B4\x9A8\x3\x2\x2\x2\x9B4\x9B5\x3"+
		"\x2\x2\x2\x9B5\xF1\x3\x2\x2\x2\x9B6\x9B9\x5\xF4{\x2\x9B7\x9B9\x5\xF6|"+
		"\x2\x9B8\x9B6\x3\x2\x2\x2\x9B8\x9B7\x3\x2\x2\x2\x9B9\xF3\x3\x2\x2\x2\x9BA"+
		"\x9BD\x5\x11C\x8F\x2\x9BB\x9BC\a\xDF\x2\x2\x9BC\x9BE\x5\x106\x84\x2\x9BD"+
		"\x9BB\x3\x2\x2\x2\x9BD\x9BE\x3\x2\x2\x2\x9BE\xF5\x3\x2\x2\x2\x9BF\x9C1"+
		"\x5\xF8}\x2\x9C0\x9BF\x3\x2\x2\x2\x9C0\x9C1\x3\x2\x2\x2\x9C1\x9C2\x3\x2"+
		"\x2\x2\x9C2\x9C3\a\xBB\x2\x2\x9C3\x9C5\x5\x116\x8C\x2\x9C4\x9C6\x5\x130"+
		"\x99\x2\x9C5\x9C4\x3\x2\x2\x2\x9C5\x9C6\x3\x2\x2\x2\x9C6\x9C9\x3\x2\x2"+
		"\x2\x9C7\x9C8\a\xDF\x2\x2\x9C8\x9CA\x5\x106\x84\x2\x9C9\x9C7\x3\x2\x2"+
		"\x2\x9C9\x9CA\x3\x2\x2\x2\x9CA\x9CC\x3\x2\x2\x2\x9CB\x9CD\x5\x10A\x86"+
		"\x2\x9CC\x9CB\x3\x2\x2\x2\x9CC\x9CD\x3\x2\x2\x2\x9CD\xF7\x3\x2\x2\x2\x9CE"+
		"\x9D3\x5\x100\x81\x2\x9CF\x9D3\x5\xFA~\x2\x9D0\x9D3\x5\xFC\x7F\x2\x9D1"+
		"\x9D3\x5\x104\x83\x2\x9D2\x9CE\x3\x2\x2\x2\x9D2\x9CF\x3\x2\x2\x2\x9D2"+
		"\x9D0\x3\x2\x2\x2\x9D2\x9D1\x3\x2\x2\x2\x9D3\xF9\x3\x2\x2\x2\x9D4\x9D6"+
		"\x5\x116\x8C\x2\x9D5\x9D7\x5\x130\x99\x2\x9D6\x9D5\x3\x2\x2\x2\x9D6\x9D7"+
		"\x3\x2\x2\x2\x9D7\x9D9\x3\x2\x2\x2\x9D8\x9DA\x5\x10A\x86\x2\x9D9\x9D8"+
		"\x3\x2\x2\x2\x9D9\x9DA\x3\x2\x2\x2\x9DA\xFB\x3\x2\x2\x2\x9DB\x9DF\x5\x116"+
		"\x8C\x2\x9DC\x9DF\x5\x11A\x8E\x2\x9DD\x9DF\x5\xFE\x80\x2\x9DE\x9DB\x3"+
		"\x2\x2\x2\x9DE\x9DC\x3\x2\x2\x2\x9DE\x9DD\x3\x2\x2\x2\x9DF\x9E1\x3\x2"+
		"\x2\x2\x9E0\x9E2\x5\x130\x99\x2\x9E1\x9E0\x3\x2\x2\x2\x9E1\x9E2\x3\x2"+
		"\x2\x2\x9E2\x9E4\x3\x2\x2\x2\x9E3\x9E5\a\xDF\x2\x2\x9E4\x9E3\x3\x2\x2"+
		"\x2\x9E4\x9E5\x3\x2\x2\x2\x9E5\x9E6\x3\x2\x2\x2\x9E6\x9E8\a\xC3\x2\x2"+
		"\x9E7\x9E9\a\xDF\x2\x2\x9E8\x9E7\x3\x2\x2\x2\x9E8\x9E9\x3\x2\x2\x2\x9E9"+
		"\x9EE\x3\x2\x2\x2\x9EA\x9EC\x5\x106\x84\x2\x9EB\x9ED\a\xDF\x2\x2\x9EC"+
		"\x9EB\x3\x2\x2\x2\x9EC\x9ED\x3\x2\x2\x2\x9ED\x9EF\x3\x2\x2\x2\x9EE\x9EA"+
		"\x3\x2\x2\x2\x9EE\x9EF\x3\x2\x2\x2\x9EF\x9F0\x3\x2\x2\x2\x9F0\x9F2\a\xCE"+
		"\x2\x2\x9F1\x9F3\x5\x10A\x86\x2\x9F2\x9F1\x3\x2\x2\x2\x9F2\x9F3\x3\x2"+
		"\x2\x2\x9F3\xFD\x3\x2\x2\x2\x9F4\x9F6\x5\x116\x8C\x2\x9F5\x9F7\x5\x130"+
		"\x99\x2\x9F6\x9F5\x3\x2\x2\x2\x9F6\x9F7\x3\x2\x2\x2\x9F7\x9F9\x3\x2\x2"+
		"\x2\x9F8\x9FA\a\xDF\x2\x2\x9F9\x9F8\x3\x2\x2\x2\x9F9\x9FA\x3\x2\x2\x2"+
		"\x9FA\x9FB\x3\x2\x2\x2\x9FB\x9FD\a\xC3\x2\x2\x9FC\x9FE\a\xDF\x2\x2\x9FD"+
		"\x9FC\x3\x2\x2\x2\x9FD\x9FE\x3\x2\x2\x2\x9FE\xA03\x3\x2\x2\x2\x9FF\xA01"+
		"\x5\x106\x84\x2\xA00\xA02\a\xDF\x2\x2\xA01\xA00\x3\x2\x2\x2\xA01\xA02"+
		"\x3\x2\x2\x2\xA02\xA04\x3\x2\x2\x2\xA03\x9FF\x3\x2\x2\x2\xA03\xA04\x3"+
		"\x2\x2\x2\xA04\xA05\x3\x2\x2\x2\xA05\xA06\a\xCE\x2\x2\xA06\xFF\x3\x2\x2"+
		"\x2\xA07\xA0A\x5\xFA~\x2\xA08\xA0A\x5\xFC\x7F\x2\xA09\xA07\x3\x2\x2\x2"+
		"\xA09\xA08\x3\x2\x2\x2\xA09\xA0A\x3\x2\x2\x2\xA0A\xA0C\x3\x2\x2\x2\xA0B"+
		"\xA0D\x5\x102\x82\x2\xA0C\xA0B\x3\x2\x2\x2\xA0D\xA0E\x3\x2\x2\x2\xA0E"+
		"\xA0C\x3\x2\x2\x2\xA0E\xA0F\x3\x2\x2\x2\xA0F\xA11\x3\x2\x2\x2\xA10\xA12"+
		"\x5\x10A\x86\x2\xA11\xA10\x3\x2\x2\x2\xA11\xA12\x3\x2\x2\x2\xA12\x101"+
		"\x3\x2\x2\x2\xA13\xA15\a\xDF\x2\x2\xA14\xA13\x3\x2\x2\x2\xA14\xA15\x3"+
		"\x2\x2\x2\xA15\xA16\x3\x2\x2\x2\xA16\xA19\a\xBB\x2\x2\xA17\xA1A\x5\xFA"+
		"~\x2\xA18\xA1A\x5\xFC\x7F\x2\xA19\xA17\x3\x2\x2\x2\xA19\xA18\x3\x2\x2"+
		"\x2\xA1A\x103\x3\x2\x2\x2\xA1B\xA1C\x5\x10A\x86\x2\xA1C\x105\x3\x2\x2"+
		"\x2\xA1D\xA1F\x5\x108\x85\x2\xA1E\xA1D\x3\x2\x2\x2\xA1E\xA1F\x3\x2\x2"+
		"\x2\xA1F\xA21\x3\x2\x2\x2\xA20\xA22\a\xDF\x2\x2\xA21\xA20\x3\x2\x2\x2"+
		"\xA21\xA22\x3\x2\x2\x2\xA22\xA23\x3\x2\x2\x2\xA23\xA25\t\v\x2\x2\xA24"+
		"\xA26\a\xDF\x2\x2\xA25\xA24\x3\x2\x2\x2\xA25\xA26\x3\x2\x2\x2\xA26\xA28"+
		"\x3\x2\x2\x2\xA27\xA1E\x3\x2\x2\x2\xA28\xA2B\x3\x2\x2\x2\xA29\xA27\x3"+
		"\x2\x2\x2\xA29\xA2A\x3\x2\x2\x2\xA2A\xA2C\x3\x2\x2\x2\xA2B\xA29\x3\x2"+
		"\x2\x2\xA2C\xA39\x5\x108\x85\x2\xA2D\xA2F\a\xDF\x2\x2\xA2E\xA2D\x3\x2"+
		"\x2\x2\xA2E\xA2F\x3\x2\x2\x2\xA2F\xA30\x3\x2\x2\x2\xA30\xA32\t\v\x2\x2"+
		"\xA31\xA33\a\xDF\x2\x2\xA32\xA31\x3\x2\x2\x2\xA32\xA33\x3\x2\x2\x2\xA33"+
		"\xA35\x3\x2\x2\x2\xA34\xA36\x5\x108\x85\x2\xA35\xA34\x3\x2\x2\x2\xA35"+
		"\xA36\x3\x2\x2\x2\xA36\xA38\x3\x2\x2\x2\xA37\xA2E\x3\x2\x2\x2\xA38\xA3B"+
		"\x3\x2\x2\x2\xA39\xA37\x3\x2\x2\x2\xA39\xA3A\x3\x2\x2\x2\xA3A\x107\x3"+
		"\x2\x2\x2\xA3B\xA39\x3\x2\x2\x2\xA3C\xA3D\t\r\x2\x2\xA3D\xA3F\a\xDF\x2"+
		"\x2\xA3E\xA3C\x3\x2\x2\x2\xA3E\xA3F\x3\x2\x2\x2\xA3F\xA40\x3\x2\x2\x2"+
		"\xA40\xA41\x5\xDCo\x2\xA41\x109\x3\x2\x2\x2\xA42\xA43\a\xBD\x2\x2\xA43"+
		"\xA45\x5\x116\x8C\x2\xA44\xA46\x5\x130\x99\x2\xA45\xA44\x3\x2\x2\x2\xA45"+
		"\xA46\x3\x2\x2\x2\xA46\x10B\x3\x2\x2\x2\xA47\xA59\a\xC3\x2\x2\xA48\xA4A"+
		"\a\xDF\x2\x2\xA49\xA48\x3\x2\x2\x2\xA49\xA4A\x3\x2\x2\x2\xA4A\xA4B\x3"+
		"\x2\x2\x2\xA4B\xA56\x5\x10E\x88\x2\xA4C\xA4E\a\xDF\x2\x2\xA4D\xA4C\x3"+
		"\x2\x2\x2\xA4D\xA4E\x3\x2\x2\x2\xA4E\xA4F\x3\x2\x2\x2\xA4F\xA51\a\xB8"+
		"\x2\x2\xA50\xA52\a\xDF\x2\x2\xA51\xA50\x3\x2\x2\x2\xA51\xA52\x3\x2\x2"+
		"\x2\xA52\xA53\x3\x2\x2\x2\xA53\xA55\x5\x10E\x88\x2\xA54\xA4D\x3\x2\x2"+
		"\x2\xA55\xA58\x3\x2\x2\x2\xA56\xA54\x3\x2\x2\x2\xA56\xA57\x3\x2\x2\x2"+
		"\xA57\xA5A\x3\x2\x2\x2\xA58\xA56\x3\x2\x2\x2\xA59\xA49\x3\x2\x2\x2\xA59"+
		"\xA5A\x3\x2\x2\x2\xA5A\xA5C\x3\x2\x2\x2\xA5B\xA5D\a\xDF\x2\x2\xA5C\xA5B"+
		"\x3\x2\x2\x2\xA5C\xA5D\x3\x2\x2\x2\xA5D\xA5E\x3\x2\x2\x2\xA5E\xA5F\a\xCE"+
		"\x2\x2\xA5F\x10D\x3\x2\x2\x2\xA60\xA61\au\x2\x2\xA61\xA63\a\xDF\x2\x2"+
		"\xA62\xA60\x3\x2\x2\x2\xA62\xA63\x3\x2\x2\x2\xA63\xA66\x3\x2\x2\x2\xA64"+
		"\xA65\t\xE\x2\x2\xA65\xA67\a\xDF\x2\x2\xA66\xA64\x3\x2\x2\x2\xA66\xA67"+
		"\x3\x2\x2\x2\xA67\xA6A\x3\x2\x2\x2\xA68\xA69\a|\x2\x2\xA69\xA6B\a\xDF"+
		"\x2\x2\xA6A\xA68\x3\x2\x2\x2\xA6A\xA6B\x3\x2\x2\x2\xA6B\xA6C\x3\x2\x2"+
		"\x2\xA6C\xA6E\x5\x116\x8C\x2\xA6D\xA6F\x5\x130\x99\x2\xA6E\xA6D\x3\x2"+
		"\x2\x2\xA6E\xA6F\x3\x2\x2\x2\xA6F\xA78\x3\x2\x2\x2\xA70\xA72\a\xDF\x2"+
		"\x2\xA71\xA70\x3\x2\x2\x2\xA71\xA72\x3\x2\x2\x2\xA72\xA73\x3\x2\x2\x2"+
		"\xA73\xA75\a\xC3\x2\x2\xA74\xA76\a\xDF\x2\x2\xA75\xA74\x3\x2\x2\x2\xA75"+
		"\xA76\x3\x2\x2\x2\xA76\xA77\x3\x2\x2\x2\xA77\xA79\a\xCE\x2\x2\xA78\xA71"+
		"\x3\x2\x2\x2\xA78\xA79\x3\x2\x2\x2\xA79\xA7C\x3\x2\x2\x2\xA7A\xA7B\a\xDF"+
		"\x2\x2\xA7B\xA7D\x5\x118\x8D\x2\xA7C\xA7A\x3\x2\x2\x2\xA7C\xA7D\x3\x2"+
		"\x2\x2\xA7D\xA82\x3\x2\x2\x2\xA7E\xA80\a\xDF\x2\x2\xA7F\xA7E\x3\x2\x2"+
		"\x2\xA7F\xA80\x3\x2\x2\x2\xA80\xA81\x3\x2\x2\x2\xA81\xA83\x5\x110\x89"+
		"\x2\xA82\xA7F\x3\x2\x2\x2\xA82\xA83\x3\x2\x2\x2\xA83\x10F\x3\x2\x2\x2"+
		"\xA84\xA86\a\xBC\x2\x2\xA85\xA87\a\xDF\x2\x2\xA86\xA85\x3\x2\x2\x2\xA86"+
		"\xA87\x3\x2\x2\x2\xA87\xA8A\x3\x2\x2\x2\xA88\xA8B\x5\x128\x95\x2\xA89"+
		"\xA8B\x5\x116\x8C\x2\xA8A\xA88\x3\x2\x2\x2\xA8A\xA89\x3\x2\x2\x2\xA8B"+
		"\x111\x3\x2\x2\x2\xA8C\xA97\x5\x114\x8B\x2\xA8D\xA8F\a\xDF\x2\x2\xA8E"+
		"\xA8D\x3\x2\x2\x2\xA8E\xA8F\x3\x2\x2\x2\xA8F\xA90\x3\x2\x2\x2\xA90\xA92"+
		"\a\xB8\x2\x2\xA91\xA93\a\xDF\x2\x2\xA92\xA91\x3\x2\x2\x2\xA92\xA93\x3"+
		"\x2\x2\x2\xA93\xA94\x3\x2\x2\x2\xA94\xA96\x5\x114\x8B\x2\xA95\xA8E\x3"+
		"\x2\x2\x2\xA96\xA99\x3\x2\x2\x2\xA97\xA95\x3\x2\x2\x2\xA97\xA98\x3\x2"+
		"\x2\x2\xA98\x113\x3\x2\x2\x2\xA99\xA97\x3\x2\x2\x2\xA9A\xA9B\x5\xDCo\x2"+
		"\xA9B\xA9C\a\xDF\x2\x2\xA9C\xA9D\a\xA4\x2\x2\xA9D\xA9E\a\xDF\x2\x2\xA9E"+
		"\xAA0\x3\x2\x2\x2\xA9F\xA9A\x3\x2\x2\x2\xA9F\xAA0\x3\x2\x2\x2\xAA0\xAA1"+
		"\x3\x2\x2\x2\xAA1\xAA2\x5\xDCo\x2\xAA2\x115\x3\x2\x2\x2\xAA3\xAA6\a\xDB"+
		"\x2\x2\xAA4\xAA6\x5\x134\x9B\x2\xAA5\xAA3\x3\x2\x2\x2\xAA5\xAA4\x3\x2"+
		"\x2\x2\xAA6\xAA7\x3\x2\x2\x2\xAA7\xAA5\x3\x2\x2\x2\xAA7\xAA8\x3\x2\x2"+
		"\x2\xAA8\xAB2\x3\x2\x2\x2\xAA9\xAAC\a\xD0\x2\x2\xAAA\xAAD\a\xDB\x2\x2"+
		"\xAAB\xAAD\x5\x134\x9B\x2\xAAC\xAAA\x3\x2\x2\x2\xAAC\xAAB\x3\x2\x2\x2"+
		"\xAAD\xAAE\x3\x2\x2\x2\xAAE\xAAC\x3\x2\x2\x2\xAAE\xAAF\x3\x2\x2\x2\xAAF"+
		"\xAB0\x3\x2\x2\x2\xAB0\xAB2\a\xD1\x2\x2\xAB1\xAA5\x3\x2\x2\x2\xAB1\xAA9"+
		"\x3\x2\x2\x2\xAB2\x117\x3\x2\x2\x2\xAB3\xAB4\a\n\x2\x2\xAB4\xAB7\a\xDF"+
		"\x2\x2\xAB5\xAB6\al\x2\x2\xAB6\xAB8\a\xDF\x2\x2\xAB7\xAB5\x3\x2\x2\x2"+
		"\xAB7\xAB8\x3\x2\x2\x2\xAB8\xAB9\x3\x2\x2\x2\xAB9\xABC\x5\x12E\x98\x2"+
		"\xABA\xABB\a\xDF\x2\x2\xABB\xABD\x5\x122\x92\x2\xABC\xABA\x3\x2\x2\x2"+
		"\xABC\xABD\x3\x2\x2\x2\xABD\x119\x3\x2\x2\x2\xABE\xABF\t\xF\x2\x2\xABF"+
		"\x11B\x3\x2\x2\x2\xAC0\xAC5\a\xDB\x2\x2\xAC1\xAC4\x5\x134\x9B\x2\xAC2"+
		"\xAC4\a\xDB\x2\x2\xAC3\xAC1\x3\x2\x2\x2\xAC3\xAC2\x3\x2\x2\x2\xAC4\xAC7"+
		"\x3\x2\x2\x2\xAC5\xAC3\x3\x2\x2\x2\xAC5\xAC6\x3\x2\x2\x2\xAC6\xAD0\x3"+
		"\x2\x2\x2\xAC7\xAC5\x3\x2\x2\x2\xAC8\xACB\x5\x134\x9B\x2\xAC9\xACC\x5"+
		"\x134\x9B\x2\xACA\xACC\a\xDB\x2\x2\xACB\xAC9\x3\x2\x2\x2\xACB\xACA\x3"+
		"\x2\x2\x2\xACC\xACD\x3\x2\x2\x2\xACD\xACB\x3\x2\x2\x2\xACD\xACE\x3\x2"+
		"\x2\x2\xACE\xAD0\x3\x2\x2\x2\xACF\xAC0\x3\x2\x2\x2\xACF\xAC8\x3\x2\x2"+
		"\x2\xAD0\x11D\x3\x2\x2\x2\xAD1\xAD2\t\x10\x2\x2\xAD2\x11F\x3\x2\x2\x2"+
		"\xAD3\xAD8\x5\x116\x8C\x2\xAD4\xAD5\a\xBB\x2\x2\xAD5\xAD7\x5\x116\x8C"+
		"\x2\xAD6\xAD4\x3\x2\x2\x2\xAD7\xADA\x3\x2\x2\x2\xAD8\xAD6\x3\x2\x2\x2"+
		"\xAD8\xAD9\x3\x2\x2\x2\xAD9\x121\x3\x2\x2\x2\xADA\xAD8\x3\x2\x2\x2\xADB"+
		"\xADD\a\xC7\x2\x2\xADC\xADE\a\xDF\x2\x2\xADD\xADC\x3\x2\x2\x2\xADD\xADE"+
		"\x3\x2\x2\x2\xADE\xAE1\x3\x2\x2\x2\xADF\xAE2\a\xD5\x2\x2\xAE0\xAE2\x5"+
		"\x116\x8C\x2\xAE1\xADF\x3\x2\x2\x2\xAE1\xAE0\x3\x2\x2\x2\xAE2\x123\x3"+
		"\x2\x2\x2\xAE3\xAEC\x5\x11C\x8F\x2\xAE4\xAE6\a\xDF\x2\x2\xAE5\xAE4\x3"+
		"\x2\x2\x2\xAE5\xAE6\x3\x2\x2\x2\xAE6\xAE7\x3\x2\x2\x2\xAE7\xAE9\a\xC5"+
		"\x2\x2\xAE8\xAEA\a\xDF\x2\x2\xAE9\xAE8\x3\x2\x2\x2\xAE9\xAEA\x3\x2\x2"+
		"\x2\xAEA\xAEB\x3\x2\x2\x2\xAEB\xAED\x5\x11C\x8F\x2\xAEC\xAE5\x3\x2\x2"+
		"\x2\xAEC\xAED\x3\x2\x2\x2\xAED\x125\x3\x2\x2\x2\xAEE\xAEF\x5\x116\x8C"+
		"\x2\xAEF\xAF0\a\xB7\x2\x2\xAF0\x127\x3\x2\x2\x2\xAF1\xAF2\t\x11\x2\x2"+
		"\xAF2\x129\x3\x2\x2\x2\xAF3\xAF4\t\x12\x2\x2\xAF4\x12B\x3\x2\x2\x2\xAF5"+
		"\xAF6\t\x13\x2\x2\xAF6\x12D\x3\x2\x2\x2\xAF7\xAFA\x5\x11A\x8E\x2\xAF8"+
		"\xAFA\x5\x120\x91\x2\xAF9\xAF7\x3\x2\x2\x2\xAF9\xAF8\x3\x2\x2\x2\xAFA"+
		"\xB03\x3\x2\x2\x2\xAFB\xAFD\a\xDF\x2\x2\xAFC\xAFB\x3\x2\x2\x2\xAFC\xAFD"+
		"\x3\x2\x2\x2\xAFD\xAFE\x3\x2\x2\x2\xAFE\xB00\a\xC3\x2\x2\xAFF\xB01\a\xDF"+
		"\x2\x2\xB00\xAFF\x3\x2\x2\x2\xB00\xB01\x3\x2\x2\x2\xB01\xB02\x3\x2\x2"+
		"\x2\xB02\xB04\a\xCE\x2\x2\xB03\xAFC\x3\x2\x2\x2\xB03\xB04\x3\x2\x2\x2"+
		"\xB04\x12F\x3\x2\x2\x2\xB05\xB06\t\x14\x2\x2\xB06\x131\x3\x2\x2\x2\xB07"+
		"\xB08\t\x15\x2\x2\xB08\x133\x3\x2\x2\x2\xB09\xB0A\t\x16\x2\x2\xB0A\x135"+
		"\x3\x2\x2\x2\x1E5\x13A\x13F\x146\x148\x14B\x150\x154\x159\x15D\x162\x166"+
		"\x16B\x16F\x174\x178\x17D\x181\x186\x18A\x18E\x193\x199\x1A5\x1AB\x1B0"+
		"\x1B6\x1BA\x1BE\x1C7\x1CB\x1D1\x1D5\x1DF\x1E5\x1EA\x1F9\x1FC\x204\x209"+
		"\x20E\x214\x21A\x21D\x221\x225\x228\x22F\x232\x237\x23B\x240\x248\x24C"+
		"\x251\x256\x258\x25E\x26A\x26E\x272\x276\x27B\x282\x285\x28A\x2D0\x2D6"+
		"\x2DA\x2DD\x2ED\x2F1\x2F6\x2F9\x2FE\x304\x308\x30D\x312\x316\x319\x31D"+
		"\x323\x327\x32E\x334\x337\x33C\x346\x349\x34C\x350\x356\x35A\x35F\x366"+
		"\x36A\x36E\x372\x375\x37B\x381\x383\x38E\x394\x396\x39E\x3A4\x3AC\x3B3"+
		"\x3BB\x3C0\x3C7\x3CB\x3CE\x3D3\x3D9\x3DD\x3E2\x3EC\x3F2\x3FC\x400\x40A"+
		"\x413\x419\x41B\x420\x426\x42A\x42D\x431\x43C\x441\x447\x449\x44F\x451"+
		"\x456\x45A\x460\x463\x467\x46C\x472\x474\x47C\x480\x483\x486\x48A\x4A1"+
		"\x4A7\x4AB\x4AF\x4B9\x4BF\x4C1\x4CD\x4D3\x4D5\x4DB\x4E1\x4E3\x4ED\x4F1"+
		"\x4F6\x4FE\x502\x506\x50E\x512\x51E\x522\x529\x52B\x531\x535\x53D\x541"+
		"\x54D\x553\x555\x55F\x565\x567\x56D\x573\x575\x579\x57D\x581\x597\x59C"+
		"\x5A6\x5AA\x5AF\x5BA\x5BE\x5C3\x5D1\x5D5\x5DE\x5E2\x5E5\x5E9\x5ED\x5F0"+
		"\x5F4\x5F8\x5FB\x5FF\x602\x606\x608\x60D\x611\x615\x619\x61B\x621\x625"+
		"\x628\x62D\x631\x637\x63A\x63D\x641\x646\x64C\x64E\x655\x659\x65F\x662"+
		"\x667\x66D\x66F\x676\x67A\x680\x683\x688\x68E\x690\x698\x69C\x69F\x6A2"+
		"\x6A6\x6AE\x6B2\x6B6\x6B8\x6BB\x6C0\x6C6\x6CA\x6CE\x6D3\x6D8\x6DC\x6E0"+
		"\x6E5\x6ED\x6EF\x6FB\x6FF\x707\x70B\x713\x717\x71B\x71F\x723\x727\x72F"+
		"\x733\x73F\x744\x748\x750\x753\x758\x75E\x760\x766\x768\x76D\x771\x776"+
		"\x779\x77D\x781\x78C\x792\x796\x799\x79F\x7A3\x7AB\x7AF\x7B8\x7BC\x7C2"+
		"\x7C5\x7CA\x7D0\x7D2\x7D8\x7DC\x7E3\x7EB\x7F0\x7F7\x7FB\x7FE\x801\x804"+
		"\x808\x80D\x816\x820\x824\x82B\x82D\x834\x838\x83C\x841\x845\x853\x857"+
		"\x85D\x862\x868\x876\x87A\x87F\x883\x888\x88C\x891\x895\x89A\x89E\x8A3"+
		"\x8A7\x8B1\x8B5\x8BA\x8BE\x8C3\x8C7\x8CC\x8D0\x8D5\x8D9\x8DE\x8E2\x8F1"+
		"\x8F5\x8FA\x8FE\x906\x908\x90E\x913\x919\x91D\x922\x927\x92B\x92F\x931"+
		"\x935\x937\x93A\x93E\x946\x94B\x951\x95A\x95E\x968\x96E\x970\x978\x97C"+
		"\x97F\x983\x989\x98C\x990\x994\x998\x99D\x9A1\x9A5\x9A8\x9AC\x9B0\x9B4"+
		"\x9B8\x9BD\x9C0\x9C5\x9C9\x9CC\x9D2\x9D6\x9D9\x9DE\x9E1\x9E4\x9E8\x9EC"+
		"\x9EE\x9F2\x9F6\x9F9\x9FD\xA01\xA03\xA09\xA0E\xA11\xA14\xA19\xA1E\xA21"+
		"\xA25\xA29\xA2E\xA32\xA35\xA39\xA3E\xA45\xA49\xA4D\xA51\xA56\xA59\xA5C"+
		"\xA62\xA66\xA6A\xA6E\xA71\xA75\xA78\xA7C\xA7F\xA82\xA86\xA8A\xA8E\xA92"+
		"\xA97\xA9F\xAA5\xAA7\xAAC\xAAE\xAB1\xAB7\xABC\xAC3\xAC5\xACB\xACD\xACF"+
		"\xAD8\xADD\xAE1\xAE5\xAE9\xAEC\xAF9\xAFC\xB00\xB03";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace VBTranspiler.Parser
