//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Projects\Git\VBTranspiler\VBTranspiler.Parser\VisualBasic6.g4 by ANTLR 4.6.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace VBTranspiler.Parser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1")]
[System.CLSCompliant(false)]
public partial class VisualBasic6Parser : Parser {
	public const int
		ACCESS=1, ADDRESSOF=2, ALIAS=3, AND=4, ATTRIBUTE=5, APPACTIVATE=6, APPEND=7, 
		AS=8, BEGIN=9, BEEP=10, BINARY=11, BOOLEAN=12, BYVAL=13, BYREF=14, BYTE=15, 
		CALL=16, CASE=17, CHDIR=18, CHDRIVE=19, CLASS=20, CLOSE=21, COLLECTION=22, 
		CONST=23, DATE=24, DECLARE=25, DEFBOOL=26, DEFBYTE=27, DEFDATE=28, DEFDBL=29, 
		DEFDEC=30, DEFCUR=31, DEFINT=32, DEFLNG=33, DEFOBJ=34, DEFSNG=35, DEFSTR=36, 
		DEFVAR=37, DELETESETTING=38, DIM=39, DO=40, DOUBLE=41, EACH=42, ELSE=43, 
		ELSEIF=44, END_ENUM=45, END_FUNCTION=46, END_IF=47, END_PROPERTY=48, END_SELECT=49, 
		END_SUB=50, END_TYPE=51, END_WITH=52, END=53, ENUM=54, EQV=55, ERASE=56, 
		ERROR=57, EVENT=58, EXIT_DO=59, EXIT_FOR=60, EXIT_FUNCTION=61, EXIT_PROPERTY=62, 
		EXIT_SUB=63, FALSE=64, FILECOPY=65, FRIEND=66, FOR=67, FUNCTION=68, GET=69, 
		GLOBAL=70, GOSUB=71, GOTO=72, IF=73, IMP=74, IMPLEMENTS=75, IN=76, INPUT=77, 
		IS=78, INTEGER=79, KILL=80, LOAD=81, LOCK=82, LONG=83, LOOP=84, LEN=85, 
		LET=86, LIB=87, LIKE=88, LINE_INPUT=89, LOCK_READ=90, LOCK_WRITE=91, LOCK_READ_WRITE=92, 
		LSET=93, MACRO_IF=94, MACRO_ELSEIF=95, MACRO_ELSE=96, MACRO_END_IF=97, 
		ME=98, MID=99, MKDIR=100, MOD=101, NAME=102, NEXT=103, NEW=104, NOT=105, 
		NOTHING=106, NULL=107, OBJECT=108, ON=109, ON_ERROR=110, ON_LOCAL_ERROR=111, 
		OPEN=112, OPTIONAL=113, OPTION_BASE=114, OPTION_EXPLICIT=115, OPTION_COMPARE=116, 
		OPTION_PRIVATE_MODULE=117, OR=118, OUTPUT=119, PARAMARRAY=120, PRESERVE=121, 
		PRINT=122, PRIVATE=123, PROPERTY_GET=124, PROPERTY_LET=125, PROPERTY_SET=126, 
		PUBLIC=127, PUT=128, RANDOM=129, RANDOMIZE=130, RAISEEVENT=131, READ=132, 
		READ_WRITE=133, REDIM=134, REM=135, RESET=136, RESUME=137, RETURN=138, 
		RMDIR=139, RSET=140, SAVEPICTURE=141, SAVESETTING=142, SEEK=143, SELECT=144, 
		SENDKEYS=145, SET=146, SETATTR=147, SHARED=148, SINGLE=149, SPC=150, STATIC=151, 
		STEP=152, STOP=153, STRING=154, SUB=155, TAB=156, TEXT=157, THEN=158, 
		TIME=159, TO=160, TRUE=161, TYPE=162, TYPEOF=163, UNLOAD=164, UNLOCK=165, 
		UNTIL=166, VARIANT=167, VERSION=168, WEND=169, WHILE=170, WIDTH=171, WITH=172, 
		WITHEVENTS=173, WRITE=174, XOR=175, AMPERSAND=176, ASSIGN=177, AT=178, 
		COLON=179, COMMA=180, DIV=181, DOLLAR=182, DOT=183, EQ=184, EXCLAMATIONMARK=185, 
		GEQ=186, GT=187, HASH=188, LEQ=189, LPAREN=190, LT=191, MINUS=192, MINUS_EQ=193, 
		MULT=194, NEQ=195, PERCENT=196, PLUS=197, PLUS_EQ=198, POW=199, RPAREN=200, 
		SEMICOLON=201, L_SQUARE_BRACKET=202, R_SQUARE_BRACKET=203, STRINGLITERAL=204, 
		DATELITERAL=205, COLORLITERAL=206, INTEGERLITERAL=207, DOUBLELITERAL=208, 
		FILENUMBER=209, IDENTIFIER=210, LINE_CONTINUATION=211, NEWLINE=212, COMMENT=213, 
		WS=214;
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleReferences = 2, RULE_moduleReference = 3, 
		RULE_moduleReferenceGUID = 4, RULE_moduleReferenceComponent = 5, RULE_moduleHeader = 6, 
		RULE_moduleConfig = 7, RULE_moduleConfigElement = 8, RULE_moduleAttributes = 9, 
		RULE_moduleOptions = 10, RULE_moduleOption = 11, RULE_moduleBody = 12, 
		RULE_moduleBodyElement = 13, RULE_moduleBlock = 14, RULE_attributeStmt = 15, 
		RULE_block = 16, RULE_blockStmt = 17, RULE_appActivateStmt = 18, RULE_beepStmt = 19, 
		RULE_chDirStmt = 20, RULE_chDriveStmt = 21, RULE_closeStmt = 22, RULE_constStmt = 23, 
		RULE_constSubStmt = 24, RULE_dateStmt = 25, RULE_declareStmt = 26, RULE_deftypeStmt = 27, 
		RULE_deleteSettingStmt = 28, RULE_doLoopStmt = 29, RULE_endStmt = 30, 
		RULE_enumerationStmt = 31, RULE_enumerationStmt_Constant = 32, RULE_eraseStmt = 33, 
		RULE_errorStmt = 34, RULE_eventStmt = 35, RULE_exitStmt = 36, RULE_filecopyStmt = 37, 
		RULE_forEachStmt = 38, RULE_forNextStmt = 39, RULE_functionStmt = 40, 
		RULE_getStmt = 41, RULE_goSubStmt = 42, RULE_goToStmt = 43, RULE_ifThenElseStmt = 44, 
		RULE_ifBlockStmt = 45, RULE_ifConditionStmt = 46, RULE_ifElseIfBlockStmt = 47, 
		RULE_ifElseBlockStmt = 48, RULE_implementsStmt = 49, RULE_inputStmt = 50, 
		RULE_killStmt = 51, RULE_letStmt = 52, RULE_lineInputStmt = 53, RULE_loadStmt = 54, 
		RULE_lockStmt = 55, RULE_lsetStmt = 56, RULE_macroIfThenElseStmt = 57, 
		RULE_macroIfBlockStmt = 58, RULE_macroElseIfBlockStmt = 59, RULE_macroElseBlockStmt = 60, 
		RULE_midStmt = 61, RULE_mkdirStmt = 62, RULE_nameStmt = 63, RULE_onErrorStmt = 64, 
		RULE_onGoToStmt = 65, RULE_onGoSubStmt = 66, RULE_openStmt = 67, RULE_outputList = 68, 
		RULE_outputList_Expression = 69, RULE_printStmt = 70, RULE_propertyGetStmt = 71, 
		RULE_propertySetStmt = 72, RULE_propertyLetStmt = 73, RULE_putStmt = 74, 
		RULE_raiseEventStmt = 75, RULE_randomizeStmt = 76, RULE_redimStmt = 77, 
		RULE_redimSubStmt = 78, RULE_resetStmt = 79, RULE_resumeStmt = 80, RULE_returnStmt = 81, 
		RULE_rmdirStmt = 82, RULE_rsetStmt = 83, RULE_savepictureStmt = 84, RULE_saveSettingStmt = 85, 
		RULE_seekStmt = 86, RULE_selectCaseStmt = 87, RULE_sC_Case = 88, RULE_sC_Cond = 89, 
		RULE_sC_CondExpr = 90, RULE_sendkeysStmt = 91, RULE_setattrStmt = 92, 
		RULE_setStmt = 93, RULE_stopStmt = 94, RULE_subStmt = 95, RULE_timeStmt = 96, 
		RULE_typeStmt = 97, RULE_typeStmt_Element = 98, RULE_typeOfStmt = 99, 
		RULE_unloadStmt = 100, RULE_unlockStmt = 101, RULE_valueStmt = 102, RULE_variableStmt = 103, 
		RULE_variableListStmt = 104, RULE_variableSubStmt = 105, RULE_whileWendStmt = 106, 
		RULE_widthStmt = 107, RULE_withStmt = 108, RULE_writeStmt = 109, RULE_explicitCallStmt = 110, 
		RULE_eCS_ProcedureCall = 111, RULE_eCS_MemberProcedureCall = 112, RULE_implicitCallStmt_InBlock = 113, 
		RULE_iCS_B_ProcedureCall = 114, RULE_iCS_B_MemberProcedureCall = 115, 
		RULE_implicitCallStmt_InStmt = 116, RULE_iCS_S_VariableOrProcedureCall = 117, 
		RULE_iCS_S_ProcedureOrArrayCall = 118, RULE_iCS_S_MembersCall = 119, RULE_iCS_S_MemberCall = 120, 
		RULE_iCS_S_DictionaryCall = 121, RULE_argsCall = 122, RULE_argCall = 123, 
		RULE_dictionaryCallStmt = 124, RULE_argList = 125, RULE_arg = 126, RULE_argDefaultValue = 127, 
		RULE_subscripts = 128, RULE_subscript = 129, RULE_ambiguousIdentifier = 130, 
		RULE_asTypeClause = 131, RULE_baseType = 132, RULE_certainIdentifier = 133, 
		RULE_comparisonOperator = 134, RULE_complexType = 135, RULE_fieldLength = 136, 
		RULE_letterrange = 137, RULE_lineLabel = 138, RULE_literal = 139, RULE_publicPrivateVisibility = 140, 
		RULE_publicPrivateGlobalVisibility = 141, RULE_type = 142, RULE_typeHint = 143, 
		RULE_visibility = 144, RULE_ambiguousKeyword = 145;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleReferences", "moduleReference", "moduleReferenceGUID", 
		"moduleReferenceComponent", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleOptions", "moduleOption", "moduleBody", "moduleBodyElement", 
		"moduleBlock", "attributeStmt", "block", "blockStmt", "appActivateStmt", 
		"beepStmt", "chDirStmt", "chDriveStmt", "closeStmt", "constStmt", "constSubStmt", 
		"dateStmt", "declareStmt", "deftypeStmt", "deleteSettingStmt", "doLoopStmt", 
		"endStmt", "enumerationStmt", "enumerationStmt_Constant", "eraseStmt", 
		"errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", "forNextStmt", 
		"functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "macroIfThenElseStmt", "macroIfBlockStmt", 
		"macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt", "mkdirStmt", 
		"nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", "outputList", 
		"outputList_Expression", "printStmt", "propertyGetStmt", "propertySetStmt", 
		"propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rmdirStmt", 
		"rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", "selectCaseStmt", 
		"sC_Case", "sC_Cond", "sC_CondExpr", "sendkeysStmt", "setattrStmt", "setStmt", 
		"stopStmt", "subStmt", "timeStmt", "typeStmt", "typeStmt_Element", "typeOfStmt", 
		"unloadStmt", "unlockStmt", "valueStmt", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", "writeStmt", 
		"explicitCallStmt", "eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
		"iCS_B_ProcedureCall", "iCS_B_MemberProcedureCall", "implicitCallStmt_InStmt", 
		"iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_MembersCall", 
		"iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt", 
		"argList", "arg", "argDefaultValue", "subscripts", "subscript", "ambiguousIdentifier", 
		"asTypeClause", "baseType", "certainIdentifier", "comparisonOperator", 
		"complexType", "fieldLength", "letterrange", "lineLabel", "literal", "publicPrivateVisibility", 
		"publicPrivateGlobalVisibility", "type", "typeHint", "visibility", "ambiguousKeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'&'", "':='", "'@'", 
		"':'", "','", null, "'$'", "'.'", "'='", "'!'", "'>='", "'>'", "'#'", 
		"'<='", "'('", "'<'", "'-'", "'-='", "'*'", "'<>'", "'%'", "'+'", "'+='", 
		"'^'", "')'", "';'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", 
		"APPEND", "AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", 
		"BYTE", "CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", 
		"CONST", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", 
		"DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", 
		"DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", 
		"END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
		"END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", 
		"EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", 
		"FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", 
		"IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", 
		"LOCK", "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
		"LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", 
		"MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", "NOT", 
		"NOTHING", "NULL", "OBJECT", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", 
		"OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", 
		"OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", 
		"PROPERTY_LET", "PROPERTY_SET", "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", 
		"RAISEEVENT", "READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", 
		"RETURN", "RMDIR", "RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", "SELECT", 
		"SENDKEYS", "SET", "SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", 
		"STOP", "STRING", "SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", 
		"TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", 
		"WHILE", "WIDTH", "WITH", "WITHEVENTS", "WRITE", "XOR", "AMPERSAND", "ASSIGN", 
		"AT", "COLON", "COMMA", "DIV", "DOLLAR", "DOT", "EQ", "EXCLAMATIONMARK", 
		"GEQ", "GT", "HASH", "LEQ", "LPAREN", "LT", "MINUS", "MINUS_EQ", "MULT", 
		"NEQ", "PERCENT", "PLUS", "PLUS_EQ", "POW", "RPAREN", "SEMICOLON", "L_SQUARE_BRACKET", 
		"R_SQUARE_BRACKET", "STRINGLITERAL", "DATELITERAL", "COLORLITERAL", "INTEGERLITERAL", 
		"DOUBLELITERAL", "FILENUMBER", "IDENTIFIER", "LINE_CONTINUATION", "NEWLINE", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VisualBasic6.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VisualBasic6Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(VisualBasic6Parser.Eof, 0); }
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; module();
			State = 293; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleReferencesContext moduleReferences() {
			return GetRuleContext<ModuleReferencesContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public ModuleOptionsContext moduleOptions() {
			return GetRuleContext<ModuleOptionsContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 295; Match(WS);
				}
				break;
			}
			State = 301;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 298; Match(NEWLINE);
					}
					} 
				}
				State = 303;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 310;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 304; moduleHeader();
				State = 306;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 305; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 308;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 313;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 312; moduleReferences();
				}
				break;
			}
			State = 318;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 315; Match(NEWLINE);
					}
					} 
				}
				State = 320;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 322;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 321; moduleConfig();
				}
				break;
			}
			State = 327;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 324; Match(NEWLINE);
					}
					} 
				}
				State = 329;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 331;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 330; moduleAttributes();
				}
				break;
			}
			State = 336;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 333; Match(NEWLINE);
					}
					} 
				}
				State = 338;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 340;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 339; moduleOptions();
				}
				break;
			}
			State = 345;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 342; Match(NEWLINE);
					}
					} 
				}
				State = 347;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			State = 349;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)) | (1L << (PROPERTY_SET - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 348; moduleBody();
				}
			}

			State = 354;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 351; Match(NEWLINE);
				}
				}
				State = 356;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 358;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 357; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferencesContext : ParserRuleContext {
		public ModuleReferenceContext[] moduleReference() {
			return GetRuleContexts<ModuleReferenceContext>();
		}
		public ModuleReferenceContext moduleReference(int i) {
			return GetRuleContext<ModuleReferenceContext>(i);
		}
		public ModuleReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReferences; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReferences(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReferences(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReferences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferencesContext moduleReferences() {
		ModuleReferencesContext _localctx = new ModuleReferencesContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleReferences);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 360; moduleReference();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 363;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferenceContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(VisualBasic6Parser.OBJECT, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ModuleReferenceGUIDContext moduleReferenceGUID() {
			return GetRuleContext<ModuleReferenceGUIDContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(VisualBasic6Parser.SEMICOLON, 0); }
		public ModuleReferenceComponentContext moduleReferenceComponent() {
			return GetRuleContext<ModuleReferenceComponentContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferenceContext moduleReference() {
		ModuleReferenceContext _localctx = new ModuleReferenceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleReference);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(OBJECT);
			State = 367;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 366; Match(WS);
				}
			}

			State = 369; Match(EQ);
			State = 371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 370; Match(WS);
				}
			}

			State = 373; moduleReferenceGUID();
			State = 374; Match(SEMICOLON);
			State = 376;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 375; Match(WS);
				}
			}

			State = 378; moduleReferenceComponent();
			State = 382;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 379; Match(NEWLINE);
					}
					} 
				}
				State = 384;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferenceGUIDContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(VisualBasic6Parser.STRINGLITERAL, 0); }
		public ModuleReferenceGUIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReferenceGUID; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReferenceGUID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReferenceGUID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReferenceGUID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferenceGUIDContext moduleReferenceGUID() {
		ModuleReferenceGUIDContext _localctx = new ModuleReferenceGUIDContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleReferenceGUID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferenceComponentContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(VisualBasic6Parser.STRINGLITERAL, 0); }
		public ModuleReferenceComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReferenceComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReferenceComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReferenceComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReferenceComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferenceComponentContext moduleReferenceComponent() {
		ModuleReferenceComponentContext _localctx = new ModuleReferenceComponentContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleReferenceComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VisualBasic6Parser.VERSION, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode DOUBLELITERAL() { return GetToken(VisualBasic6Parser.DOUBLELITERAL, 0); }
		public ITerminalNode CLASS() { return GetToken(VisualBasic6Parser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(VERSION);
			State = 390; Match(WS);
			State = 391; Match(DOUBLELITERAL);
			State = 394;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 392; Match(WS);
				State = 393; Match(CLASS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(VisualBasic6Parser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleConfigElementContext[] moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleConfig);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(BEGIN);
			State = 398;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 397; Match(NEWLINE);
				}
				}
				State = 400;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 403;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 402; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 405;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 407; Match(END);
			State = 409;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 408; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 411;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(VisualBasic6Parser.NEWLINE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; ambiguousIdentifier();
			State = 415;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 414; Match(WS);
				}
			}

			State = 417; Match(EQ);
			State = 419;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 418; Match(WS);
				}
			}

			State = 421; literal();
			State = 422; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public AttributeStmtContext[] attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 424; attributeStmt();
					State = 426;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 425; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 428;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 432;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionsContext : ParserRuleContext {
		public ModuleOptionContext[] moduleOption() {
			return GetRuleContexts<ModuleOptionContext>();
		}
		public ModuleOptionContext moduleOption(int i) {
			return GetRuleContext<ModuleOptionContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionsContext moduleOptions() {
		ModuleOptionsContext _localctx = new ModuleOptionsContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 434; moduleOption();
					State = 436;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 435; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 438;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 442;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VisualBasic6Parser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VisualBasic6Parser.OPTION_BASE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VisualBasic6Parser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_COMPARE() { return GetToken(VisualBasic6Parser.OPTION_COMPARE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode TEXT() { return GetToken(VisualBasic6Parser.TEXT, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleOption);
		int _la;
		try {
			State = 452;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 444; Match(OPTION_BASE);
				State = 445; Match(WS);
				State = 446; Match(INTEGERLITERAL);
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 447; Match(OPTION_COMPARE);
				State = 448; Match(WS);
				State = 449;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 450; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 451; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public ModuleBodyElementContext[] moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_moduleBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; moduleBodyElement();
			State = 463;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 456;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 455; Match(NEWLINE);
						}
						}
						State = 458;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 460; moduleBodyElement();
					}
					} 
				}
				State = 465;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_moduleBodyElement);
		try {
			State = 478;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 466; moduleBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 467; moduleOption();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 468; declareStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 469; enumerationStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 470; eventStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 471; functionStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 472; macroIfThenElseStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 473; propertyGetStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 474; propertySetStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 475; propertyLetStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 476; subStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 477; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBlockContext moduleBlock() {
		ModuleBlockContext _localctx = new ModuleBlockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_moduleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(VisualBasic6Parser.ATTRIBUTE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; Match(ATTRIBUTE);
			State = 483; Match(WS);
			State = 484; implicitCallStmt_InStmt();
			State = 486;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 485; Match(WS);
				}
			}

			State = 488; Match(EQ);
			State = 490;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 489; Match(WS);
				}
			}

			State = 492; literal();
			State = 503;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 494;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 493; Match(WS);
						}
					}

					State = 496; Match(COMMA);
					State = 498;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 497; Match(WS);
						}
					}

					State = 500; literal();
					}
					} 
				}
				State = 505;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStmtContext[] blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; blockStmt();
			State = 518;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 508;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 507; Match(NEWLINE);
						}
						}
						State = 510;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 513;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 512; Match(WS);
						}
					}

					State = 515; blockStmt();
					}
					} 
				}
				State = 520;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public AppActivateStmtContext appActivateStmt() {
			return GetRuleContext<AppActivateStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public ChDirStmtContext chDirStmt() {
			return GetRuleContext<ChDirStmtContext>(0);
		}
		public ChDriveStmtContext chDriveStmt() {
			return GetRuleContext<ChDriveStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_blockStmt);
		try {
			State = 588;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 521; appActivateStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 522; attributeStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 523; beepStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 524; chDirStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 525; chDriveStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 526; closeStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 527; constStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 528; dateStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 529; deleteSettingStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 530; deftypeStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 531; doLoopStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 532; endStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 533; eraseStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 534; errorStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 535; exitStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 536; explicitCallStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 537; filecopyStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 538; forEachStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 539; forNextStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 540; getStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 541; goSubStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 542; goToStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 543; ifThenElseStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 544; implementsStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 545; inputStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 546; killStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 547; letStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 548; lineInputStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 549; lineLabel();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 550; loadStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 551; lockStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 552; lsetStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 553; macroIfThenElseStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 554; midStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 555; mkdirStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 556; nameStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 557; onErrorStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 558; onGoToStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 559; onGoSubStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 560; openStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 561; printStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 562; putStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 563; raiseEventStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 564; randomizeStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 565; redimStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 566; resetStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 567; resumeStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 568; returnStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 569; rmdirStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 570; rsetStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 571; savepictureStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 572; saveSettingStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 573; seekStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 574; selectCaseStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 575; sendkeysStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 576; setattrStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 577; setStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 578; stopStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 579; timeStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 580; unloadStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 581; unlockStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 582; variableStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 583; whileWendStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 584; widthStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 585; withStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 586; writeStmt();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 587; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppActivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VisualBasic6Parser.APPACTIVATE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public AppActivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appActivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAppActivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAppActivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppActivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppActivateStmtContext appActivateStmt() {
		AppActivateStmtContext _localctx = new AppActivateStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_appActivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590; Match(APPACTIVATE);
			State = 591; Match(WS);
			State = 592; valueStmt(0);
			State = 601;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 594;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 593; Match(WS);
					}
				}

				State = 596; Match(COMMA);
				State = 598;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 597; Match(WS);
					}
				}

				State = 600; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VisualBasic6Parser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChDirStmtContext : ParserRuleContext {
		public ITerminalNode CHDIR() { return GetToken(VisualBasic6Parser.CHDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ChDirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chDirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterChDirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitChDirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChDirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChDirStmtContext chDirStmt() {
		ChDirStmtContext _localctx = new ChDirStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_chDirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605; Match(CHDIR);
			State = 606; Match(WS);
			State = 607; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChDriveStmtContext : ParserRuleContext {
		public ITerminalNode CHDRIVE() { return GetToken(VisualBasic6Parser.CHDRIVE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ChDriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chDriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterChDriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitChDriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChDriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChDriveStmtContext chDriveStmt() {
		ChDriveStmtContext _localctx = new ChDriveStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_chDriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609; Match(CHDRIVE);
			State = 610; Match(WS);
			State = 611; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(VisualBasic6Parser.CLOSE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 613; Match(CLOSE);
			State = 629;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				State = 614; Match(WS);
				State = 615; valueStmt(0);
				State = 626;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,48,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 617;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 616; Match(WS);
							}
						}

						State = 619; Match(COMMA);
						State = 621;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 620; Match(WS);
							}
						}

						State = 623; valueStmt(0);
						}
						} 
					}
					State = 628;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,48,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VisualBasic6Parser.CONST, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ConstSubStmtContext[] constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public PublicPrivateGlobalVisibilityContext publicPrivateGlobalVisibility() {
			return GetRuleContext<PublicPrivateGlobalVisibilityContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GLOBAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PUBLIC - 70)))) != 0)) {
				{
				State = 631; publicPrivateGlobalVisibility();
				State = 632; Match(WS);
				}
			}

			State = 636; Match(CONST);
			State = 637; Match(WS);
			State = 638; constSubStmt();
			State = 649;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 640;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 639; Match(WS);
						}
					}

					State = 642; Match(COMMA);
					State = 644;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 643; Match(WS);
						}
					}

					State = 646; constSubStmt();
					}
					} 
				}
				State = 651;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; ambiguousIdentifier();
			State = 654;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (AMPERSAND - 176)) | (1L << (AT - 176)) | (1L << (DOLLAR - 176)) | (1L << (EXCLAMATIONMARK - 176)) | (1L << (HASH - 176)) | (1L << (PERCENT - 176)))) != 0)) {
				{
				State = 653; typeHint();
				}
			}

			State = 658;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 656; Match(WS);
				State = 657; asTypeClause();
				}
				break;
			}
			State = 661;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 660; Match(WS);
				}
			}

			State = 663; Match(EQ);
			State = 665;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 664; Match(WS);
				}
			}

			State = 667; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669; Match(DATE);
			State = 671;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 670; Match(WS);
				}
			}

			State = 673; Match(EQ);
			State = 675;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 674; Match(WS);
				}
			}

			State = 677; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(VisualBasic6Parser.DECLARE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VisualBasic6Parser.LIB, 0); }
		public ITerminalNode[] STRINGLITERAL() { return GetTokens(VisualBasic6Parser.STRINGLITERAL); }
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VisualBasic6Parser.STRINGLITERAL, i);
		}
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public TypeHintContext[] typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ITerminalNode ALIAS() { return GetToken(VisualBasic6Parser.ALIAS, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 679; visibility();
				State = 680; Match(WS);
				}
			}

			State = 684; Match(DECLARE);
			State = 685; Match(WS);
			State = 691;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FUNCTION:
				{
				State = 686; Match(FUNCTION);
				State = 688;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (AMPERSAND - 176)) | (1L << (AT - 176)) | (1L << (DOLLAR - 176)) | (1L << (EXCLAMATIONMARK - 176)) | (1L << (HASH - 176)) | (1L << (PERCENT - 176)))) != 0)) {
					{
					State = 687; typeHint();
					}
				}

				}
				break;
			case SUB:
				{
				State = 690; Match(SUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 693; Match(WS);
			State = 694; ambiguousIdentifier();
			State = 696;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (AMPERSAND - 176)) | (1L << (AT - 176)) | (1L << (DOLLAR - 176)) | (1L << (EXCLAMATIONMARK - 176)) | (1L << (HASH - 176)) | (1L << (PERCENT - 176)))) != 0)) {
				{
				State = 695; typeHint();
				}
			}

			State = 698; Match(WS);
			State = 699; Match(LIB);
			State = 700; Match(WS);
			State = 701; Match(STRINGLITERAL);
			State = 706;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 702; Match(WS);
				State = 703; Match(ALIAS);
				State = 704; Match(WS);
				State = 705; Match(STRINGLITERAL);
				}
				break;
			}
			State = 712;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				State = 709;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 708; Match(WS);
					}
				}

				State = 711; argList();
				}
				break;
			}
			State = 716;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				State = 714; Match(WS);
				State = 715; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetterrangeContext[] letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFBOOL() { return GetToken(VisualBasic6Parser.DEFBOOL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VisualBasic6Parser.DEFBYTE, 0); }
		public ITerminalNode DEFINT() { return GetToken(VisualBasic6Parser.DEFINT, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VisualBasic6Parser.DEFLNG, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VisualBasic6Parser.DEFCUR, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VisualBasic6Parser.DEFSNG, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VisualBasic6Parser.DEFDBL, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VisualBasic6Parser.DEFDEC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VisualBasic6Parser.DEFDATE, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VisualBasic6Parser.DEFSTR, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VisualBasic6Parser.DEFOBJ, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VisualBasic6Parser.DEFVAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 719; Match(WS);
			State = 720; letterrange();
			State = 731;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,70,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 722;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 721; Match(WS);
						}
					}

					State = 724; Match(COMMA);
					State = 726;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 725; Match(WS);
						}
					}

					State = 728; letterrange();
					}
					} 
				}
				State = 733;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,70,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public ITerminalNode DELETESETTING() { return GetToken(VisualBasic6Parser.DELETESETTING, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_deleteSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; Match(DELETESETTING);
			State = 735; Match(WS);
			State = 736; valueStmt(0);
			State = 738;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 737; Match(WS);
				}
			}

			State = 740; Match(COMMA);
			State = 742;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 741; Match(WS);
				}
			}

			State = 744; valueStmt(0);
			State = 753;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 746;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 745; Match(WS);
					}
				}

				State = 748; Match(COMMA);
				State = 750;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 749; Match(WS);
					}
				}

				State = 752; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(VisualBasic6Parser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VisualBasic6Parser.LOOP, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode UNTIL() { return GetToken(VisualBasic6Parser.UNTIL, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_doLoopStmt);
		int _la;
		try {
			State = 808;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 755; Match(DO);
				State = 757;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 756; Match(NEWLINE);
					}
					}
					State = 759;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 767;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
				case 1:
					{
					State = 761; block();
					State = 763;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 762; Match(NEWLINE);
						}
						}
						State = 765;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 769; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 770; Match(DO);
				State = 771; Match(WS);
				State = 772;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 773; Match(WS);
				State = 774; valueStmt(0);
				State = 776;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 775; Match(NEWLINE);
					}
					}
					State = 778;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 786;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
				case 1:
					{
					State = 780; block();
					State = 782;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 781; Match(NEWLINE);
						}
						}
						State = 784;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 788; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 790; Match(DO);
				State = 792;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 791; Match(NEWLINE);
					}
					}
					State = 794;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				{
				State = 796; block();
				State = 798;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 797; Match(NEWLINE);
					}
					}
					State = 800;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				State = 802; Match(LOOP);
				State = 803; Match(WS);
				State = 804;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 805; Match(WS);
				State = 806; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(VisualBasic6Parser.ENUM, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_ENUM() { return GetToken(VisualBasic6Parser.END_ENUM, 0); }
		public PublicPrivateVisibilityContext publicPrivateVisibility() {
			return GetRuleContext<PublicPrivateVisibilityContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public EnumerationStmt_ConstantContext[] enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PRIVATE || _la==PUBLIC) {
				{
				State = 812; publicPrivateVisibility();
				State = 813; Match(WS);
				}
			}

			State = 817; Match(ENUM);
			State = 818; Match(WS);
			State = 819; ambiguousIdentifier();
			State = 821;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 820; Match(NEWLINE);
				}
				}
				State = 823;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 828;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 825; enumerationStmt_Constant();
				}
				}
				State = 830;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 831; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833; ambiguousIdentifier();
			State = 842;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==WS) {
				{
				State = 835;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 834; Match(WS);
					}
				}

				State = 837; Match(EQ);
				State = 839;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 838; Match(WS);
					}
				}

				State = 841; valueStmt(0);
				}
			}

			State = 845;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 844; Match(NEWLINE);
				}
				}
				State = 847;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VisualBasic6Parser.ERASE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 849; Match(ERASE);
			State = 850; Match(WS);
			State = 851; valueStmt(0);
			State = 862;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,94,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 853;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 852; Match(WS);
						}
					}

					State = 855; Match(COMMA);
					State = 857;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 856; Match(WS);
						}
					}

					State = 859; valueStmt(0);
					}
					} 
				}
				State = 864;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,94,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VisualBasic6Parser.ERROR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865; Match(ERROR);
			State = 866; Match(WS);
			State = 867; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(VisualBasic6Parser.EVENT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 869; visibility();
				State = 870; Match(WS);
				}
			}

			State = 874; Match(EVENT);
			State = 875; Match(WS);
			State = 876; ambiguousIdentifier();
			State = 878;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 877; Match(WS);
				}
			}

			State = 880; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_DO() { return GetToken(VisualBasic6Parser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VisualBasic6Parser.EXIT_FOR, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VisualBasic6Parser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VisualBasic6Parser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VisualBasic6Parser.EXIT_SUB, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 882;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public ITerminalNode FILECOPY() { return GetToken(VisualBasic6Parser.FILECOPY, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884; Match(FILECOPY);
			State = 885; Match(WS);
			State = 886; valueStmt(0);
			State = 888;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 887; Match(WS);
				}
			}

			State = 890; Match(COMMA);
			State = 892;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 891; Match(WS);
				}
			}

			State = 894; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode EACH() { return GetToken(VisualBasic6Parser.EACH, 0); }
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(VisualBasic6Parser.IN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896; Match(FOR);
			State = 897; Match(WS);
			State = 898; Match(EACH);
			State = 899; Match(WS);
			State = 900; ambiguousIdentifier();
			State = 902;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (AMPERSAND - 176)) | (1L << (AT - 176)) | (1L << (DOLLAR - 176)) | (1L << (EXCLAMATIONMARK - 176)) | (1L << (HASH - 176)) | (1L << (PERCENT - 176)))) != 0)) {
				{
				State = 901; typeHint();
				}
			}

			State = 904; Match(WS);
			State = 905; Match(IN);
			State = 906; Match(WS);
			State = 907; valueStmt(0);
			State = 909;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 908; Match(NEWLINE);
				}
				}
				State = 911;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 919;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 913; block();
				State = 915;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 914; Match(NEWLINE);
					}
					}
					State = 917;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 921; Match(NEXT);
			State = 924;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				State = 922; Match(WS);
				State = 923; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public TypeHintContext[] typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode STEP() { return GetToken(VisualBasic6Parser.STEP, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926; Match(FOR);
			State = 927; Match(WS);
			State = 928; ambiguousIdentifier();
			State = 930;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (AMPERSAND - 176)) | (1L << (AT - 176)) | (1L << (DOLLAR - 176)) | (1L << (EXCLAMATIONMARK - 176)) | (1L << (HASH - 176)) | (1L << (PERCENT - 176)))) != 0)) {
				{
				State = 929; typeHint();
				}
			}

			State = 934;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				State = 932; Match(WS);
				State = 933; asTypeClause();
				}
				break;
			}
			State = 937;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 936; Match(WS);
				}
			}

			State = 939; Match(EQ);
			State = 941;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 940; Match(WS);
				}
			}

			State = 943; valueStmt(0);
			State = 944; Match(WS);
			State = 945; Match(TO);
			State = 946; Match(WS);
			State = 947; valueStmt(0);
			State = 952;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 948; Match(WS);
				State = 949; Match(STEP);
				State = 950; Match(WS);
				State = 951; valueStmt(0);
				}
			}

			State = 955;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 954; Match(NEWLINE);
				}
				}
				State = 957;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 965;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				State = 959; block();
				State = 961;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 960; Match(NEWLINE);
					}
					}
					State = 963;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 967; Match(NEXT);
			State = 973;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				State = 968; Match(WS);
				State = 969; ambiguousIdentifier();
				State = 971;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					State = 970; typeHint();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_FUNCTION() { return GetToken(VisualBasic6Parser.END_FUNCTION, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 975; visibility();
				State = 976; Match(WS);
				}
			}

			State = 982;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 980; Match(STATIC);
				State = 981; Match(WS);
				}
			}

			State = 984; Match(FUNCTION);
			State = 985; Match(WS);
			State = 986; ambiguousIdentifier();
			State = 991;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				State = 988;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 987; Match(WS);
					}
				}

				State = 990; argList();
				}
				break;
			}
			State = 995;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 993; Match(WS);
				State = 994; asTypeClause();
				}
			}

			State = 998;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 997; Match(NEWLINE);
				}
				}
				State = 1000;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1008;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1002; block();
				State = 1004;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1003; Match(NEWLINE);
					}
					}
					State = 1006;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1010; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(VisualBasic6Parser.GET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012; Match(GET);
			State = 1013; Match(WS);
			State = 1014; valueStmt(0);
			State = 1016;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1015; Match(WS);
				}
			}

			State = 1018; Match(COMMA);
			State = 1020;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1019; Match(WS);
				}
				break;
			}
			State = 1023;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
				{
				State = 1022; valueStmt(0);
				}
			}

			State = 1026;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1025; Match(WS);
				}
			}

			State = 1028; Match(COMMA);
			State = 1030;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1029; Match(WS);
				}
			}

			State = 1032; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034; Match(GOSUB);
			State = 1035; Match(WS);
			State = 1036; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1038; Match(GOTO);
			State = 1039; Match(WS);
			State = 1040; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public ITerminalNode END_IF() { return GetToken(VisualBasic6Parser.END_IF, 0); }
		public IfElseIfBlockStmtContext[] ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public BlockStmtContext[] blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 1067;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1042; Match(IF);
				State = 1043; Match(WS);
				State = 1044; ifConditionStmt();
				State = 1045; Match(WS);
				State = 1046; Match(THEN);
				State = 1047; Match(WS);
				State = 1048; blockStmt();
				State = 1053;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					State = 1049; Match(WS);
					State = 1050; Match(ELSE);
					State = 1051; Match(WS);
					State = 1052; blockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1055; ifBlockStmt();
				State = 1059;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 1056; ifElseIfBlockStmt();
					}
					}
					State = 1061;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1063;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 1062; ifElseBlockStmt();
					}
				}

				State = 1065; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_ifBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069; Match(IF);
			State = 1070; Match(WS);
			State = 1071; ifConditionStmt();
			State = 1072; Match(WS);
			State = 1073; Match(THEN);
			State = 1075;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1074; Match(NEWLINE);
				}
				}
				State = 1077;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1085;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				State = 1079; block();
				State = 1081;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1080; Match(NEWLINE);
					}
					}
					State = 1083;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VisualBasic6Parser.ELSEIF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_ifElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1089; Match(ELSEIF);
			State = 1090; Match(WS);
			State = 1091; ifConditionStmt();
			State = 1092; Match(WS);
			State = 1093; Match(THEN);
			State = 1095;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1094; Match(NEWLINE);
				}
				}
				State = 1097;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1105;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				State = 1099; block();
				State = 1101;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1100; Match(NEWLINE);
					}
					}
					State = 1103;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_ifElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1107; Match(ELSE);
			State = 1109;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1108; Match(NEWLINE);
				}
				}
				State = 1111;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1119;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1113; block();
				State = 1115;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1114; Match(NEWLINE);
					}
					}
					State = 1117;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public ITerminalNode IMPLEMENTS() { return GetToken(VisualBasic6Parser.IMPLEMENTS, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121; Match(IMPLEMENTS);
			State = 1122; Match(WS);
			State = 1123; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125; Match(INPUT);
			State = 1126; Match(WS);
			State = 1127; valueStmt(0);
			State = 1136;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1129;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1128; Match(WS);
						}
					}

					State = 1131; Match(COMMA);
					State = 1133;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1132; Match(WS);
						}
					}

					State = 1135; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1138;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,142,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ITerminalNode KILL() { return GetToken(VisualBasic6Parser.KILL, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140; Match(KILL);
			State = 1141; Match(WS);
			State = 1142; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode PLUS_EQ() { return GetToken(VisualBasic6Parser.PLUS_EQ, 0); }
		public ITerminalNode MINUS_EQ() { return GetToken(VisualBasic6Parser.MINUS_EQ, 0); }
		public ITerminalNode LET() { return GetToken(VisualBasic6Parser.LET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
			case 1:
				{
				State = 1144; Match(LET);
				State = 1145; Match(WS);
				}
				break;
			}
			State = 1148; implicitCallStmt_InStmt();
			State = 1150;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1149; Match(WS);
				}
			}

			State = 1152;
			_la = _input.La(1);
			if ( !(((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (EQ - 184)) | (1L << (MINUS_EQ - 184)) | (1L << (PLUS_EQ - 184)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1154;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1153; Match(WS);
				}
			}

			State = 1156; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public ITerminalNode LINE_INPUT() { return GetToken(VisualBasic6Parser.LINE_INPUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1158; Match(LINE_INPUT);
			State = 1159; Match(WS);
			State = 1160; valueStmt(0);
			State = 1162;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1161; Match(WS);
				}
			}

			State = 1164; Match(COMMA);
			State = 1166;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1165; Match(WS);
				}
			}

			State = 1168; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ITerminalNode LOAD() { return GetToken(VisualBasic6Parser.LOAD, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1170; Match(LOAD);
			State = 1171; Match(WS);
			State = 1172; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public ITerminalNode LOCK() { return GetToken(VisualBasic6Parser.LOCK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1174; Match(LOCK);
			State = 1175; Match(WS);
			State = 1176; valueStmt(0);
			State = 1191;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				State = 1178;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1177; Match(WS);
					}
				}

				State = 1180; Match(COMMA);
				State = 1182;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1181; Match(WS);
					}
				}

				State = 1184; valueStmt(0);
				State = 1189;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					State = 1185; Match(WS);
					State = 1186; Match(TO);
					State = 1187; Match(WS);
					State = 1188; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public ITerminalNode LSET() { return GetToken(VisualBasic6Parser.LSET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193; Match(LSET);
			State = 1194; Match(WS);
			State = 1195; implicitCallStmt_InStmt();
			State = 1197;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1196; Match(WS);
				}
			}

			State = 1199; Match(EQ);
			State = 1201;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1200; Match(WS);
				}
			}

			State = 1203; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfThenElseStmtContext : ParserRuleContext {
		public MacroIfBlockStmtContext macroIfBlockStmt() {
			return GetRuleContext<MacroIfBlockStmtContext>(0);
		}
		public ITerminalNode MACRO_END_IF() { return GetToken(VisualBasic6Parser.MACRO_END_IF, 0); }
		public MacroElseIfBlockStmtContext[] macroElseIfBlockStmt() {
			return GetRuleContexts<MacroElseIfBlockStmtContext>();
		}
		public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i) {
			return GetRuleContext<MacroElseIfBlockStmtContext>(i);
		}
		public MacroElseBlockStmtContext macroElseBlockStmt() {
			return GetRuleContext<MacroElseBlockStmtContext>(0);
		}
		public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfThenElseStmtContext macroIfThenElseStmt() {
		MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_macroIfThenElseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205; macroIfBlockStmt();
			State = 1209;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MACRO_ELSEIF) {
				{
				{
				State = 1206; macroElseIfBlockStmt();
				}
				}
				State = 1211;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1213;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MACRO_ELSE) {
				{
				State = 1212; macroElseBlockStmt();
				}
			}

			State = 1215; Match(MACRO_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_IF() { return GetToken(VisualBasic6Parser.MACRO_IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfBlockStmtContext macroIfBlockStmt() {
		MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_macroIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1217; Match(MACRO_IF);
			State = 1218; Match(WS);
			State = 1219; ifConditionStmt();
			State = 1220; Match(WS);
			State = 1221; Match(THEN);
			State = 1223;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1222; Match(NEWLINE);
				}
				}
				State = 1225;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1233;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)) | (1L << (PROPERTY_SET - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1227; moduleBody();
				State = 1229;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1228; Match(NEWLINE);
					}
					}
					State = 1231;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_ELSEIF() { return GetToken(VisualBasic6Parser.MACRO_ELSEIF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseIfBlockStmtContext macroElseIfBlockStmt() {
		MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_macroElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1235; Match(MACRO_ELSEIF);
			State = 1236; Match(WS);
			State = 1237; ifConditionStmt();
			State = 1238; Match(WS);
			State = 1239; Match(THEN);
			State = 1241;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1240; Match(NEWLINE);
				}
				}
				State = 1243;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1251;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)) | (1L << (PROPERTY_SET - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1245; moduleBody();
				State = 1247;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1246; Match(NEWLINE);
					}
					}
					State = 1249;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_ELSE() { return GetToken(VisualBasic6Parser.MACRO_ELSE, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseBlockStmtContext macroElseBlockStmt() {
		MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_macroElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253; Match(MACRO_ELSE);
			State = 1255;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1254; Match(NEWLINE);
				}
				}
				State = 1257;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1265;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)) | (1L << (PROPERTY_SET - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1259; moduleBody();
				State = 1261;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1260; Match(NEWLINE);
					}
					}
					State = 1263;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public ITerminalNode MID() { return GetToken(VisualBasic6Parser.MID, 0); }
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267; Match(MID);
			State = 1269;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1268; Match(WS);
				}
			}

			State = 1271; Match(LPAREN);
			State = 1273;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				State = 1272; Match(WS);
				}
				break;
			}
			State = 1275; argsCall();
			State = 1277;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1276; Match(WS);
				}
			}

			State = 1279; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ITerminalNode MKDIR() { return GetToken(VisualBasic6Parser.MKDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281; Match(MKDIR);
			State = 1282; Match(WS);
			State = 1283; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(VisualBasic6Parser.NAME, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1285; Match(NAME);
			State = 1286; Match(WS);
			State = 1287; valueStmt(0);
			State = 1288; Match(WS);
			State = 1289; Match(AS);
			State = 1290; Match(WS);
			State = 1291; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VisualBasic6Parser.ON_ERROR, 0); }
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VisualBasic6Parser.ON_LOCAL_ERROR, 0); }
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1294; Match(WS);
			State = 1301;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1295; Match(GOTO);
				State = 1296; Match(WS);
				State = 1297; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1298; Match(RESUME);
				State = 1299; Match(WS);
				State = 1300; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303; Match(ON);
			State = 1304; Match(WS);
			State = 1305; valueStmt(0);
			State = 1306; Match(WS);
			State = 1307; Match(GOTO);
			State = 1308; Match(WS);
			State = 1309; valueStmt(0);
			State = 1320;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,171,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1311;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1310; Match(WS);
						}
					}

					State = 1313; Match(COMMA);
					State = 1315;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1314; Match(WS);
						}
					}

					State = 1317; valueStmt(0);
					}
					} 
				}
				State = 1322;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,171,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1323; Match(ON);
			State = 1324; Match(WS);
			State = 1325; valueStmt(0);
			State = 1326; Match(WS);
			State = 1327; Match(GOSUB);
			State = 1328; Match(WS);
			State = 1329; valueStmt(0);
			State = 1340;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,174,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1331;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1330; Match(WS);
						}
					}

					State = 1333; Match(COMMA);
					State = 1335;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1334; Match(WS);
						}
					}

					State = 1337; valueStmt(0);
					}
					} 
				}
				State = 1342;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,174,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(VisualBasic6Parser.OPEN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VisualBasic6Parser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VisualBasic6Parser.OUTPUT, 0); }
		public ITerminalNode RANDOM() { return GetToken(VisualBasic6Parser.RANDOM, 0); }
		public ITerminalNode ACCESS() { return GetToken(VisualBasic6Parser.ACCESS, 0); }
		public ITerminalNode LEN() { return GetToken(VisualBasic6Parser.LEN, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode READ() { return GetToken(VisualBasic6Parser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VisualBasic6Parser.READ_WRITE, 0); }
		public ITerminalNode SHARED() { return GetToken(VisualBasic6Parser.SHARED, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VisualBasic6Parser.LOCK_READ, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VisualBasic6Parser.LOCK_WRITE, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VisualBasic6Parser.LOCK_READ_WRITE, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1343; Match(OPEN);
			State = 1344; Match(WS);
			State = 1345; valueStmt(0);
			State = 1346; Match(WS);
			State = 1347; Match(FOR);
			State = 1348; Match(WS);
			State = 1349;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (INPUT - 77)) | (1L << (OUTPUT - 77)) | (1L << (RANDOM - 77)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1354;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				State = 1350; Match(WS);
				State = 1351; Match(ACCESS);
				State = 1352; Match(WS);
				State = 1353;
				_la = _input.La(1);
				if ( !(((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (READ - 132)) | (1L << (READ_WRITE - 132)) | (1L << (WRITE - 132)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 1358;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 1356; Match(WS);
				State = 1357;
				_la = _input.La(1);
				if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (LOCK_READ - 90)) | (1L << (LOCK_WRITE - 90)) | (1L << (LOCK_READ_WRITE - 90)) | (1L << (SHARED - 90)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 1360; Match(WS);
			State = 1361; Match(AS);
			State = 1362; Match(WS);
			State = 1363; valueStmt(0);
			State = 1374;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				State = 1364; Match(WS);
				State = 1365; Match(LEN);
				State = 1367;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1366; Match(WS);
					}
				}

				State = 1369; Match(EQ);
				State = 1371;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1370; Match(WS);
					}
				}

				State = 1373; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public OutputList_ExpressionContext[] outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(VisualBasic6Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VisualBasic6Parser.SEMICOLON, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1409;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1376; outputList_Expression();
				State = 1389;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,183,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1378;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1377; Match(WS);
							}
						}

						State = 1380;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1382;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
						case 1:
							{
							State = 1381; Match(WS);
							}
							break;
						}
						State = 1385;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
						case 1:
							{
							State = 1384; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1391;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,183,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1393;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
					{
					State = 1392; outputList_Expression();
					}
				}

				State = 1405;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1396;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1395; Match(WS);
							}
						}

						State = 1398;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1400;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
						case 1:
							{
							State = 1399; Match(WS);
							}
							break;
						}
						State = 1403;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
						case 1:
							{
							State = 1402; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1407;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,188,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode SPC() { return GetToken(VisualBasic6Parser.SPC, 0); }
		public ITerminalNode TAB() { return GetToken(VisualBasic6Parser.TAB, 0); }
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_outputList_Expression);
		int _la;
		try {
			State = 1428;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1411; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1412;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1426;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
				case 1:
					{
					State = 1414;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1413; Match(WS);
						}
					}

					State = 1416; Match(LPAREN);
					State = 1418;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
					case 1:
						{
						State = 1417; Match(WS);
						}
						break;
					}
					State = 1420; argsCall();
					State = 1422;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1421; Match(WS);
						}
					}

					State = 1424; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VisualBasic6Parser.PRINT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430; Match(PRINT);
			State = 1431; Match(WS);
			State = 1432; valueStmt(0);
			State = 1434;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1433; Match(WS);
				}
			}

			State = 1436; Match(COMMA);
			State = 1441;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 1438;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
				case 1:
					{
					State = 1437; Match(WS);
					}
					break;
				}
				State = 1440; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_GET() { return GetToken(VisualBasic6Parser.PROPERTY_GET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1446;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 1443; visibility();
				State = 1444; Match(WS);
				}
			}

			State = 1450;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1448; Match(STATIC);
				State = 1449; Match(WS);
				}
			}

			State = 1452; Match(PROPERTY_GET);
			State = 1453; Match(WS);
			State = 1454; ambiguousIdentifier();
			State = 1456;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (AMPERSAND - 176)) | (1L << (AT - 176)) | (1L << (DOLLAR - 176)) | (1L << (EXCLAMATIONMARK - 176)) | (1L << (HASH - 176)) | (1L << (PERCENT - 176)))) != 0)) {
				{
				State = 1455; typeHint();
				}
			}

			State = 1462;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				State = 1459;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1458; Match(WS);
					}
				}

				State = 1461; argList();
				}
				break;
			}
			State = 1466;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1464; Match(WS);
				State = 1465; asTypeClause();
				}
			}

			State = 1469;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1468; Match(NEWLINE);
				}
				}
				State = 1471;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1479;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1473; block();
				State = 1475;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1474; Match(NEWLINE);
					}
					}
					State = 1477;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1481; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_SET() { return GetToken(VisualBasic6Parser.PROPERTY_SET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1486;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 1483; visibility();
				State = 1484; Match(WS);
				}
			}

			State = 1490;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1488; Match(STATIC);
				State = 1489; Match(WS);
				}
			}

			State = 1492; Match(PROPERTY_SET);
			State = 1493; Match(WS);
			State = 1494; ambiguousIdentifier();
			State = 1499;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1496;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1495; Match(WS);
					}
				}

				State = 1498; argList();
				}
			}

			State = 1502;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1501; Match(NEWLINE);
				}
				}
				State = 1504;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1512;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1506; block();
				State = 1508;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1507; Match(NEWLINE);
					}
					}
					State = 1510;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1514; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VisualBasic6Parser.PROPERTY_LET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1519;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 1516; visibility();
				State = 1517; Match(WS);
				}
			}

			State = 1523;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1521; Match(STATIC);
				State = 1522; Match(WS);
				}
			}

			State = 1525; Match(PROPERTY_LET);
			State = 1526; Match(WS);
			State = 1527; ambiguousIdentifier();
			State = 1532;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1529;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1528; Match(WS);
					}
				}

				State = 1531; argList();
				}
			}

			State = 1535;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1534; Match(NEWLINE);
				}
				}
				State = 1537;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1545;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1539; block();
				State = 1541;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1540; Match(NEWLINE);
					}
					}
					State = 1543;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1547; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public ITerminalNode PUT() { return GetToken(VisualBasic6Parser.PUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549; Match(PUT);
			State = 1550; Match(WS);
			State = 1551; valueStmt(0);
			State = 1553;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1552; Match(WS);
				}
			}

			State = 1555; Match(COMMA);
			State = 1557;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				State = 1556; Match(WS);
				}
				break;
			}
			State = 1560;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
				{
				State = 1559; valueStmt(0);
				}
			}

			State = 1563;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1562; Match(WS);
				}
			}

			State = 1565; Match(COMMA);
			State = 1567;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1566; Match(WS);
				}
			}

			State = 1569; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public ITerminalNode RAISEEVENT() { return GetToken(VisualBasic6Parser.RAISEEVENT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1571; Match(RAISEEVENT);
			State = 1572; Match(WS);
			State = 1573; ambiguousIdentifier();
			State = 1588;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				State = 1575;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1574; Match(WS);
					}
				}

				State = 1577; Match(LPAREN);
				State = 1579;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					State = 1578; Match(WS);
					}
					break;
				}
				State = 1585;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (COMMA - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (SEMICOLON - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (WS - 192)))) != 0)) {
					{
					State = 1581; argsCall();
					State = 1583;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1582; Match(WS);
						}
					}

					}
				}

				State = 1587; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ITerminalNode RANDOMIZE() { return GetToken(VisualBasic6Parser.RANDOMIZE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1590; Match(RANDOMIZE);
			State = 1593;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				State = 1591; Match(WS);
				State = 1592; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public ITerminalNode REDIM() { return GetToken(VisualBasic6Parser.REDIM, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public RedimSubStmtContext[] redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public ITerminalNode PRESERVE() { return GetToken(VisualBasic6Parser.PRESERVE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595; Match(REDIM);
			State = 1596; Match(WS);
			State = 1599;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				State = 1597; Match(PRESERVE);
				State = 1598; Match(WS);
				}
				break;
			}
			State = 1601; redimSubStmt();
			State = 1612;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,235,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1603;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1602; Match(WS);
						}
					}

					State = 1605; Match(COMMA);
					State = 1607;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1606; Match(WS);
						}
					}

					State = 1609; redimSubStmt();
					}
					} 
				}
				State = 1614;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,235,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1615; implicitCallStmt_InStmt();
			State = 1617;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1616; Match(WS);
				}
			}

			State = 1619; Match(LPAREN);
			State = 1621;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1620; Match(WS);
				}
			}

			State = 1623; subscripts();
			State = 1625;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1624; Match(WS);
				}
			}

			State = 1627; Match(RPAREN);
			State = 1630;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				State = 1628; Match(WS);
				State = 1629; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VisualBasic6Parser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1634; Match(RESUME);
			State = 1640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				State = 1635; Match(WS);
				State = 1638;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
				case 1:
					{
					State = 1636; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1637; ambiguousIdentifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VisualBasic6Parser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1642; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ITerminalNode RMDIR() { return GetToken(VisualBasic6Parser.RMDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644; Match(RMDIR);
			State = 1645; Match(WS);
			State = 1646; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public ITerminalNode RSET() { return GetToken(VisualBasic6Parser.RSET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1648; Match(RSET);
			State = 1649; Match(WS);
			State = 1650; implicitCallStmt_InStmt();
			State = 1652;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1651; Match(WS);
				}
			}

			State = 1654; Match(EQ);
			State = 1656;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1655; Match(WS);
				}
			}

			State = 1658; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public ITerminalNode SAVEPICTURE() { return GetToken(VisualBasic6Parser.SAVEPICTURE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1660; Match(SAVEPICTURE);
			State = 1661; Match(WS);
			State = 1662; valueStmt(0);
			State = 1664;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1663; Match(WS);
				}
			}

			State = 1666; Match(COMMA);
			State = 1668;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1667; Match(WS);
				}
			}

			State = 1670; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public ITerminalNode SAVESETTING() { return GetToken(VisualBasic6Parser.SAVESETTING, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1672; Match(SAVESETTING);
			State = 1673; Match(WS);
			State = 1674; valueStmt(0);
			State = 1676;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1675; Match(WS);
				}
			}

			State = 1678; Match(COMMA);
			State = 1680;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1679; Match(WS);
				}
			}

			State = 1682; valueStmt(0);
			State = 1684;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1683; Match(WS);
				}
			}

			State = 1686; Match(COMMA);
			State = 1688;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1687; Match(WS);
				}
			}

			State = 1690; valueStmt(0);
			State = 1692;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1691; Match(WS);
				}
			}

			State = 1694; Match(COMMA);
			State = 1696;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1695; Match(WS);
				}
			}

			State = 1698; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public ITerminalNode SEEK() { return GetToken(VisualBasic6Parser.SEEK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1700; Match(SEEK);
			State = 1701; Match(WS);
			State = 1702; valueStmt(0);
			State = 1704;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1703; Match(WS);
				}
			}

			State = 1706; Match(COMMA);
			State = 1708;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1707; Match(WS);
				}
			}

			State = 1710; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(VisualBasic6Parser.SELECT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode END_SELECT() { return GetToken(VisualBasic6Parser.END_SELECT, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SC_CaseContext[] sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712; Match(SELECT);
			State = 1713; Match(WS);
			State = 1714; Match(CASE);
			State = 1715; Match(WS);
			State = 1716; valueStmt(0);
			State = 1718;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1717; Match(NEWLINE);
				}
				}
				State = 1720;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1725;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1722; sC_Case();
				}
				}
				State = 1727;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1729;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1728; Match(WS);
				}
			}

			State = 1731; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VisualBasic6Parser.COLON, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_sC_Case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733; Match(CASE);
			State = 1734; Match(WS);
			State = 1735; sC_Cond();
			State = 1737;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
			case 1:
				{
				State = 1736; Match(WS);
				}
				break;
			}
			State = 1753;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				State = 1740;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 1739; Match(COLON);
					}
				}

				State = 1745;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 1742; Match(NEWLINE);
					}
					}
					State = 1747;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 1749;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1748; Match(NEWLINE);
					}
					}
					State = 1751;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1761;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				State = 1755; block();
				State = 1757;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1756; Match(NEWLINE);
					}
					}
					State = 1759;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondExprContext : SC_CondContext {
		public SC_CondExprContext[] sC_CondExpr() {
			return GetRuleContexts<SC_CondExprContext>();
		}
		public SC_CondExprContext sC_CondExpr(int i) {
			return GetRuleContext<SC_CondExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public CaseCondExprContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1778;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1763; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1764; sC_CondExpr();
				State = 1775;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,266,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1766;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1765; Match(WS);
							}
						}

						State = 1768; Match(COMMA);
						State = 1770;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1769; Match(WS);
							}
						}

						State = 1772; sC_CondExpr();
						}
						} 
					}
					State = 1777;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,266,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondExprContext : ParserRuleContext {
		public SC_CondExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_CondExpr; } }
	 
		public SC_CondExprContext() { }
		public virtual void CopyFrom(SC_CondExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondExprValueContext : SC_CondExprContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public CaseCondExprValueContext(SC_CondExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExprValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExprValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExprValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondExprIsContext : SC_CondExprContext {
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public CaseCondExprIsContext(SC_CondExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExprIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExprIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExprIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondExprToContext : SC_CondExprContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public CaseCondExprToContext(SC_CondExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExprTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExprTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExprTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondExprContext sC_CondExpr() {
		SC_CondExprContext _localctx = new SC_CondExprContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_sC_CondExpr);
		int _la;
		try {
			State = 1797;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
			case 1:
				_localctx = new CaseCondExprIsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1780; Match(IS);
				State = 1782;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1781; Match(WS);
					}
				}

				State = 1784; comparisonOperator();
				State = 1786;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1785; Match(WS);
					}
				}

				State = 1788; valueStmt(0);
				}
				break;

			case 2:
				_localctx = new CaseCondExprValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1790; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondExprToContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1791; valueStmt(0);
				State = 1792; Match(WS);
				State = 1793; Match(TO);
				State = 1794; Match(WS);
				State = 1795; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public ITerminalNode SENDKEYS() { return GetToken(VisualBasic6Parser.SENDKEYS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1799; Match(SENDKEYS);
			State = 1800; Match(WS);
			State = 1801; valueStmt(0);
			State = 1810;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				State = 1803;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1802; Match(WS);
					}
				}

				State = 1805; Match(COMMA);
				State = 1807;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1806; Match(WS);
					}
				}

				State = 1809; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public ITerminalNode SETATTR() { return GetToken(VisualBasic6Parser.SETATTR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812; Match(SETATTR);
			State = 1813; Match(WS);
			State = 1814; valueStmt(0);
			State = 1816;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1815; Match(WS);
				}
			}

			State = 1818; Match(COMMA);
			State = 1820;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1819; Match(WS);
				}
			}

			State = 1822; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(VisualBasic6Parser.SET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1824; Match(SET);
			State = 1825; Match(WS);
			State = 1826; implicitCallStmt_InStmt();
			State = 1828;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1827; Match(WS);
				}
			}

			State = 1830; Match(EQ);
			State = 1832;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1831; Match(WS);
				}
			}

			State = 1834; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VisualBasic6Parser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_SUB() { return GetToken(VisualBasic6Parser.END_SUB, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1841;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 1838; visibility();
				State = 1839; Match(WS);
				}
			}

			State = 1845;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1843; Match(STATIC);
				State = 1844; Match(WS);
				}
			}

			State = 1847; Match(SUB);
			State = 1848; Match(WS);
			State = 1849; ambiguousIdentifier();
			State = 1854;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1851;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1850; Match(WS);
					}
				}

				State = 1853; argList();
				}
			}

			State = 1857;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1856; Match(NEWLINE);
				}
				}
				State = 1859;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1867;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1861; block();
				State = 1863;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1862; Match(NEWLINE);
					}
					}
					State = 1865;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1869; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public ITerminalNode TIME() { return GetToken(VisualBasic6Parser.TIME, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1871; Match(TIME);
			State = 1873;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1872; Match(WS);
				}
			}

			State = 1875; Match(EQ);
			State = 1877;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1876; Match(WS);
				}
			}

			State = 1879; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(VisualBasic6Parser.TYPE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VisualBasic6Parser.END_TYPE, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public TypeStmt_ElementContext[] typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1884;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 1881; visibility();
				State = 1882; Match(WS);
				}
			}

			State = 1886; Match(TYPE);
			State = 1887; Match(WS);
			State = 1888; ambiguousIdentifier();
			State = 1890;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1889; Match(NEWLINE);
				}
				}
				State = 1892;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1897;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 1894; typeStmt_Element();
				}
				}
				State = 1899;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1900; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1902; ambiguousIdentifier();
			State = 1917;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				State = 1904;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1903; Match(WS);
					}
				}

				State = 1906; Match(LPAREN);
				State = 1911;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					State = 1908;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1907; Match(WS);
						}
					}

					State = 1910; subscripts();
					}
					break;
				}
				State = 1914;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1913; Match(WS);
					}
				}

				State = 1916; Match(RPAREN);
				}
				break;
			}
			State = 1921;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1919; Match(WS);
				State = 1920; asTypeClause();
				}
			}

			State = 1924;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1923; Match(NEWLINE);
				}
				}
				State = 1926;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public ITerminalNode TYPEOF() { return GetToken(VisualBasic6Parser.TYPEOF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1928; Match(TYPEOF);
			State = 1929; Match(WS);
			State = 1930; valueStmt(0);
			State = 1935;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 1931; Match(WS);
				State = 1932; Match(IS);
				State = 1933; Match(WS);
				State = 1934; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ITerminalNode UNLOAD() { return GetToken(VisualBasic6Parser.UNLOAD, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1937; Match(UNLOAD);
			State = 1938; Match(WS);
			State = 1939; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public ITerminalNode UNLOCK() { return GetToken(VisualBasic6Parser.UNLOCK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1941; Match(UNLOCK);
			State = 1942; Match(WS);
			State = 1943; valueStmt(0);
			State = 1958;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				State = 1945;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1944; Match(WS);
					}
				}

				State = 1947; Match(COMMA);
				State = 1949;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1948; Match(WS);
					}
				}

				State = 1951; valueStmt(0);
				State = 1956;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
				case 1:
					{
					State = 1952; Match(WS);
					State = 1953; Match(TO);
					State = 1954; Match(WS);
					State = 1955; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(VisualBasic6Parser.PLUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLtContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode LT() { return GetToken(VisualBasic6Parser.LT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsLtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ITerminalNode ADDRESSOF() { return GetToken(VisualBasic6Parser.ADDRESSOF, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(VisualBasic6Parser.MULT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VisualBasic6Parser.ASSIGN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLikeContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public VsLikeContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLike(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsDivContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VisualBasic6Parser.DIV, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPlusContext : ValueStmtContext {
		public ITerminalNode PLUS() { return GetToken(VisualBasic6Parser.PLUS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public VsPlusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GEQ() { return GetToken(VisualBasic6Parser.GEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsGeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsGeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsGeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VisualBasic6Parser.NOT, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode NEQ() { return GetToken(VisualBasic6Parser.NEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsNeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VisualBasic6Parser.XOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode AND() { return GetToken(VisualBasic6Parser.AND, 0); }
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(VisualBasic6Parser.LEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsLeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VisualBasic6Parser.POW, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIsContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public VsIsContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VisualBasic6Parser.MOD, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode AMPERSAND() { return GetToken(VisualBasic6Parser.AMPERSAND, 0); }
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode OR() { return GetToken(VisualBasic6Parser.OR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMinusContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsMinusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode EQV() { return GetToken(VisualBasic6Parser.EQV, 0); }
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode IMP() { return GetToken(VisualBasic6Parser.IMP, 0); }
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGtContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GT() { return GetToken(VisualBasic6Parser.GT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsGtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsGt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsGt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsEqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 204;
		EnterRecursionRule(_localctx, 204, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1961; literal();
				}
				break;

			case 2:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1962; implicitCallStmt_InStmt();
				}
				break;

			case 3:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1963; Match(LPAREN);
				State = 1965;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1964; Match(WS);
					}
				}

				State = 1967; valueStmt(0);
				State = 1978;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,305,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1969;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1968; Match(WS);
							}
						}

						State = 1971; Match(COMMA);
						State = 1973;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1972; Match(WS);
							}
						}

						State = 1975; valueStmt(0);
						}
						} 
					}
					State = 1980;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,305,_ctx);
				}
				State = 1982;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1981; Match(WS);
					}
				}

				State = 1984; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1986; Match(NEW);
				State = 1987; Match(WS);
				State = 1988; valueStmt(28);
				}
				break;

			case 5:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1989; typeOfStmt();
				}
				break;

			case 6:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1990; midStmt();
				}
				break;

			case 7:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1991; Match(ADDRESSOF);
				State = 1992; Match(WS);
				State = 1993; valueStmt(25);
				}
				break;

			case 8:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1994; implicitCallStmt_InStmt();
				State = 1996;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1995; Match(WS);
					}
				}

				State = 1998; Match(ASSIGN);
				State = 2000;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1999; Match(WS);
					}
				}

				State = 2002; valueStmt(24);
				}
				break;

			case 9:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2004; Match(MINUS);
				State = 2006;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2005; Match(WS);
					}
				}

				State = 2008; valueStmt(14);
				}
				break;

			case 10:
				{
				_localctx = new VsPlusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2009; Match(PLUS);
				State = 2011;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2010; Match(WS);
					}
				}

				State = 2013; valueStmt(13);
				}
				break;

			case 11:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2014; Match(NOT);
				State = 2015; Match(WS);
				State = 2016; valueStmt(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2177;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,341,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2175;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,340,_ctx) ) {
					case 1:
						{
						_localctx = new VsIsContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2019;
						if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
						State = 2020; Match(WS);
						State = 2021; Match(IS);
						State = 2022; Match(WS);
						State = 2023; valueStmt(24);
						}
						break;

					case 2:
						{
						_localctx = new VsLikeContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2024;
						if (!(Precpred(_ctx, 22))) throw new FailedPredicateException(this, "Precpred(_ctx, 22)");
						State = 2025; Match(WS);
						State = 2026; Match(LIKE);
						State = 2027; Match(WS);
						State = 2028; valueStmt(23);
						}
						break;

					case 3:
						{
						_localctx = new VsGeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2029;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 2031;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2030; Match(WS);
							}
						}

						State = 2033; Match(GEQ);
						State = 2035;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2034; Match(WS);
							}
						}

						State = 2037; valueStmt(22);
						}
						break;

					case 4:
						{
						_localctx = new VsLeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2038;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 2040;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2039; Match(WS);
							}
						}

						State = 2042; Match(LEQ);
						State = 2044;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2043; Match(WS);
							}
						}

						State = 2046; valueStmt(21);
						}
						break;

					case 5:
						{
						_localctx = new VsGtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2047;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 2049;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2048; Match(WS);
							}
						}

						State = 2051; Match(GT);
						State = 2053;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2052; Match(WS);
							}
						}

						State = 2055; valueStmt(20);
						}
						break;

					case 6:
						{
						_localctx = new VsLtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2056;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2058;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2057; Match(WS);
							}
						}

						State = 2060; Match(LT);
						State = 2062;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2061; Match(WS);
							}
						}

						State = 2064; valueStmt(19);
						}
						break;

					case 7:
						{
						_localctx = new VsNeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2065;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2067;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2066; Match(WS);
							}
						}

						State = 2069; Match(NEQ);
						State = 2071;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2070; Match(WS);
							}
						}

						State = 2073; valueStmt(18);
						}
						break;

					case 8:
						{
						_localctx = new VsEqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2074;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2076;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2075; Match(WS);
							}
						}

						State = 2078; Match(EQ);
						State = 2080;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2079; Match(WS);
							}
						}

						State = 2082; valueStmt(17);
						}
						break;

					case 9:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2083;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2084; Match(WS);
						State = 2085; Match(AMPERSAND);
						State = 2086; Match(WS);
						State = 2087; valueStmt(16);
						}
						break;

					case 10:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2088;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2090;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2089; Match(WS);
							}
						}

						State = 2092; Match(PLUS);
						State = 2094;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2093; Match(WS);
							}
						}

						State = 2096; valueStmt(13);
						}
						break;

					case 11:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2097;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2099;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2098; Match(WS);
							}
						}

						State = 2101; Match(MOD);
						State = 2103;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2102; Match(WS);
							}
						}

						State = 2105; valueStmt(12);
						}
						break;

					case 12:
						{
						_localctx = new VsDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2106;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2108;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2107; Match(WS);
							}
						}

						State = 2110; Match(DIV);
						State = 2112;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2111; Match(WS);
							}
						}

						State = 2114; valueStmt(11);
						}
						break;

					case 13:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2115;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2117;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2116; Match(WS);
							}
						}

						State = 2119; Match(MULT);
						State = 2121;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2120; Match(WS);
							}
						}

						State = 2123; valueStmt(10);
						}
						break;

					case 14:
						{
						_localctx = new VsMinusContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2124;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2126;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2125; Match(WS);
							}
						}

						State = 2128; Match(MINUS);
						State = 2130;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2129; Match(WS);
							}
						}

						State = 2132; valueStmt(9);
						}
						break;

					case 15:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2133;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2135;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2134; Match(WS);
							}
						}

						State = 2137; Match(POW);
						State = 2139;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2138; Match(WS);
							}
						}

						State = 2141; valueStmt(8);
						}
						break;

					case 16:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2142;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2143; Match(WS);
						State = 2144; Match(IMP);
						State = 2145; Match(WS);
						State = 2146; valueStmt(7);
						}
						break;

					case 17:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2147;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2148; Match(WS);
						State = 2149; Match(EQV);
						State = 2150; Match(WS);
						State = 2151; valueStmt(6);
						}
						break;

					case 18:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2152;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2154;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2153; Match(WS);
							}
						}

						State = 2156; Match(XOR);
						State = 2158;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2157; Match(WS);
							}
						}

						State = 2160; valueStmt(5);
						}
						break;

					case 19:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2161;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2163;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2162; Match(WS);
							}
						}

						State = 2165; Match(OR);
						State = 2167;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2166; Match(WS);
							}
						}

						State = 2169; valueStmt(4);
						}
						break;

					case 20:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2170;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2171; Match(WS);
						State = 2172; Match(AND);
						State = 2173; Match(WS);
						State = 2174; valueStmt(3);
						}
						break;
					}
					} 
				}
				State = 2179;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,341,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public ITerminalNode DIM() { return GetToken(VisualBasic6Parser.DIM, 0); }
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VisualBasic6Parser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2183;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DIM:
				{
				State = 2180; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2181; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2182; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2185; Match(WS);
			State = 2188;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				State = 2186; Match(WITHEVENTS);
				State = 2187; Match(WS);
				}
				break;
			}
			State = 2190; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public VariableSubStmtContext[] variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2192; variableSubStmt();
			State = 2203;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,346,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2194;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2193; Match(WS);
						}
					}

					State = 2196; Match(COMMA);
					State = 2198;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2197; Match(WS);
						}
					}

					State = 2200; variableSubStmt();
					}
					} 
				}
				State = 2205;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,346,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2206; ambiguousIdentifier();
			State = 2224;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				State = 2208;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2207; Match(WS);
					}
				}

				State = 2210; Match(LPAREN);
				State = 2212;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2211; Match(WS);
					}
				}

				State = 2218;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
					{
					State = 2214; subscripts();
					State = 2216;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2215; Match(WS);
						}
					}

					}
				}

				State = 2220; Match(RPAREN);
				State = 2222;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
				case 1:
					{
					State = 2221; Match(WS);
					}
					break;
				}
				}
				break;
			}
			State = 2227;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
			case 1:
				{
				State = 2226; typeHint();
				}
				break;
			}
			State = 2231;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				State = 2229; Match(WS);
				State = 2230; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VisualBasic6Parser.WEND, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_whileWendStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2233; Match(WHILE);
			State = 2234; Match(WS);
			State = 2235; valueStmt(0);
			State = 2237;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2236; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2239;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,355,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2244;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,356,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2241; block();
					}
					} 
				}
				State = 2246;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,356,_ctx);
			}
			State = 2250;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 2247; Match(NEWLINE);
				}
				}
				State = 2252;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2253; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public ITerminalNode WIDTH() { return GetToken(VisualBasic6Parser.WIDTH, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2255; Match(WIDTH);
			State = 2256; Match(WS);
			State = 2257; valueStmt(0);
			State = 2259;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2258; Match(WS);
				}
			}

			State = 2261; Match(COMMA);
			State = 2263;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2262; Match(WS);
				}
			}

			State = 2265; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VisualBasic6Parser.WITH, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode END_WITH() { return GetToken(VisualBasic6Parser.END_WITH, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2267; Match(WITH);
			State = 2268; Match(WS);
			State = 2269; implicitCallStmt_InStmt();
			State = 2271;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2270; Match(NEWLINE);
				}
				}
				State = 2273;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2281;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 2275; block();
				State = 2277;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2276; Match(NEWLINE);
					}
					}
					State = 2279;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 2283; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285; Match(WRITE);
			State = 2286; Match(WS);
			State = 2287; valueStmt(0);
			State = 2289;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2288; Match(WS);
				}
			}

			State = 2291; Match(COMMA);
			State = 2296;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				State = 2293;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					State = 2292; Match(WS);
					}
					break;
				}
				State = 2295; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext eCS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_explicitCallStmt);
		try {
			State = 2300;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2298; eCS_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2299; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_eCS_ProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2302; Match(CALL);
			State = 2303; Match(WS);
			State = 2304; ambiguousIdentifier();
			State = 2306;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				State = 2305; typeHint();
				}
				break;
			}
			State = 2321;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				State = 2309;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2308; Match(WS);
					}
				}

				State = 2311; Match(LPAREN);
				State = 2313;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					State = 2312; Match(WS);
					}
					break;
				}
				State = 2315; argsCall();
				State = 2317;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2316; Match(WS);
					}
				}

				State = 2319; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2323; Match(CALL);
			State = 2324; Match(WS);
			State = 2326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				State = 2325; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2328; Match(DOT);
			State = 2329; ambiguousIdentifier();
			State = 2331;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				State = 2330; typeHint();
				}
				break;
			}
			State = 2346;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				State = 2334;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2333; Match(WS);
					}
				}

				State = 2336; Match(LPAREN);
				State = 2338;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					State = 2337; Match(WS);
					}
					break;
				}
				State = 2340; argsCall();
				State = 2342;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2341; Match(WS);
					}
				}

				State = 2344; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_implicitCallStmt_InBlock);
		try {
			State = 2350;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2348; iCS_B_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2349; iCS_B_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public CertainIdentifierContext certainIdentifier() {
			return GetRuleContext<CertainIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_iCS_B_ProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2352; certainIdentifier();
			State = 2355;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				State = 2353; Match(WS);
				State = 2354; argsCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_iCS_B_MemberProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2358;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				State = 2357; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2360; Match(DOT);
			State = 2361; ambiguousIdentifier();
			State = 2363;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 2362; typeHint();
				}
				break;
			}
			State = 2367;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				State = 2365; Match(WS);
				State = 2366; argsCall();
				}
				break;
			}
			State = 2370;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				State = 2369; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_implicitCallStmt_InStmt);
		try {
			State = 2376;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2372; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2373; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2374; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2375; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_iCS_S_VariableOrProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2378; ambiguousIdentifier();
			State = 2380;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				State = 2379; typeHint();
				}
				break;
			}
			State = 2383;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				State = 2382; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2387;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				State = 2385; ambiguousIdentifier();
				}
				break;

			case 2:
				{
				State = 2386; baseType();
				}
				break;
			}
			State = 2390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (AMPERSAND - 176)) | (1L << (AT - 176)) | (1L << (DOLLAR - 176)) | (1L << (EXCLAMATIONMARK - 176)) | (1L << (HASH - 176)) | (1L << (PERCENT - 176)))) != 0)) {
				{
				State = 2389; typeHint();
				}
			}

			State = 2393;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2392; Match(WS);
				}
			}

			State = 2395; Match(LPAREN);
			State = 2397;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				State = 2396; Match(WS);
				}
				break;
			}
			State = 2403;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (COMMA - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (SEMICOLON - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (WS - 192)))) != 0)) {
				{
				State = 2399; argsCall();
				State = 2401;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2400; Match(WS);
					}
				}

				}
			}

			State = 2405; Match(RPAREN);
			State = 2407;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				State = 2406; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MemberCallContext[] iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_iCS_S_MembersCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2411;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				State = 2409; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2410; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2414;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2413; iCS_S_MemberCall();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2416;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,395,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2419;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				State = 2418; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_iCS_S_MemberCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2421; Match(DOT);
			State = 2424;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				State = 2422; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2423; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_iCS_S_DictionaryCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2426; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public ArgCallContext[] argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(VisualBasic6Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VisualBasic6Parser.SEMICOLON, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2440;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,401,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2429;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (MINUS - 192)) | (1L << (PLUS - 192)) | (1L << (L_SQUARE_BRACKET - 192)) | (1L << (STRINGLITERAL - 192)) | (1L << (DATELITERAL - 192)) | (1L << (COLORLITERAL - 192)) | (1L << (INTEGERLITERAL - 192)) | (1L << (DOUBLELITERAL - 192)) | (1L << (FILENUMBER - 192)) | (1L << (IDENTIFIER - 192)))) != 0)) {
						{
						State = 2428; argCall();
						}
					}

					State = 2432;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2431; Match(WS);
						}
					}

					State = 2434;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2436;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
					case 1:
						{
						State = 2435; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 2442;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,401,_ctx);
			}
			State = 2443; argCall();
			State = 2456;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,405,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2445;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2444; Match(WS);
						}
					}

					State = 2447;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2449;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
					case 1:
						{
						State = 2448; Match(WS);
						}
						break;
					}
					State = 2452;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
					case 1:
						{
						State = 2451; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2458;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,405,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2461;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				State = 2459;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2460; Match(WS);
				}
				break;
			}
			State = 2463; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public ITerminalNode EXCLAMATIONMARK() { return GetToken(VisualBasic6Parser.EXCLAMATIONMARK, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_dictionaryCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2465; Match(EXCLAMATIONMARK);
			State = 2466; ambiguousIdentifier();
			State = 2468;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				State = 2467; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2470; Match(LPAREN);
			State = 2488;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 2472;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2471; Match(WS);
					}
				}

				State = 2474; arg();
				State = 2485;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,411,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2476;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2475; Match(WS);
							}
						}

						State = 2478; Match(COMMA);
						State = 2480;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2479; Match(WS);
							}
						}

						State = 2482; arg();
						}
						} 
					}
					State = 2487;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,411,_ctx);
				}
				}
				break;
			}
			State = 2491;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2490; Match(WS);
				}
			}

			State = 2493; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VisualBasic6Parser.OPTIONAL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2497;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				State = 2495; Match(OPTIONAL);
				State = 2496; Match(WS);
				}
				break;
			}
			State = 2501;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				State = 2499;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2500; Match(WS);
				}
				break;
			}
			State = 2505;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				State = 2503; Match(PARAMARRAY);
				State = 2504; Match(WS);
				}
				break;
			}
			State = 2507; ambiguousIdentifier();
			State = 2509;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (AMPERSAND - 176)) | (1L << (AT - 176)) | (1L << (DOLLAR - 176)) | (1L << (EXCLAMATIONMARK - 176)) | (1L << (HASH - 176)) | (1L << (PERCENT - 176)))) != 0)) {
				{
				State = 2508; typeHint();
				}
			}

			State = 2519;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				State = 2512;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2511; Match(WS);
					}
				}

				State = 2514; Match(LPAREN);
				State = 2516;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2515; Match(WS);
					}
				}

				State = 2518; Match(RPAREN);
				}
				break;
			}
			State = 2523;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				State = 2521; Match(WS);
				State = 2522; asTypeClause();
				}
				break;
			}
			State = 2529;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
			case 1:
				{
				State = 2526;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2525; Match(WS);
					}
				}

				State = 2528; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_argDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2531; Match(EQ);
			State = 2533;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2532; Match(WS);
				}
			}

			State = 2537;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
			case 1:
				{
				State = 2535; literal();
				}
				break;

			case 2:
				{
				State = 2536; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2539; subscript();
			State = 2550;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,428,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2541;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2540; Match(WS);
						}
					}

					State = 2543; Match(COMMA);
					State = 2545;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2544; Match(WS);
						}
					}

					State = 2547; subscript();
					}
					} 
				}
				State = 2552;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,428,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2558;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				State = 2553; valueStmt(0);
				State = 2554; Match(WS);
				State = 2555; Match(TO);
				State = 2556; Match(WS);
				}
				break;
			}
			State = 2560; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(VisualBasic6Parser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VisualBasic6Parser.IDENTIFIER, i);
		}
		public AmbiguousKeywordContext[] ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VisualBasic6Parser.L_SQUARE_BRACKET, 0); }
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VisualBasic6Parser.R_SQUARE_BRACKET, 0); }
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext ambiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_ambiguousIdentifier);
		int _la;
		try {
			int _alt;
			State = 2576;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2564;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2564;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case IDENTIFIER:
							{
							State = 2562; Match(IDENTIFIER);
							}
							break;
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2563; ambiguousKeyword();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2566;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,431,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2568; Match(L_SQUARE_BRACKET);
				State = 2571;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2571;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 2569; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2570; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2573;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER );
				State = 2575; Match(R_SQUARE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_asTypeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2578; Match(AS);
			State = 2579; Match(WS);
			State = 2582;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				State = 2580; Match(NEW);
				State = 2581; Match(WS);
				}
				break;
			}
			State = 2584; type();
			State = 2587;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,436,_ctx) ) {
			case 1:
				{
				State = 2585; Match(WS);
				State = 2586; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(VisualBasic6Parser.BOOLEAN, 0); }
		public ITerminalNode BYTE() { return GetToken(VisualBasic6Parser.BYTE, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VisualBasic6Parser.COLLECTION, 0); }
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VisualBasic6Parser.DOUBLE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VisualBasic6Parser.INTEGER, 0); }
		public ITerminalNode LONG() { return GetToken(VisualBasic6Parser.LONG, 0); }
		public ITerminalNode OBJECT() { return GetToken(VisualBasic6Parser.OBJECT, 0); }
		public ITerminalNode SINGLE() { return GetToken(VisualBasic6Parser.SINGLE, 0); }
		public ITerminalNode STRING() { return GetToken(VisualBasic6Parser.STRING, 0); }
		public ITerminalNode VARIANT() { return GetToken(VisualBasic6Parser.VARIANT, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2589;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INTEGER - 79)) | (1L << (LONG - 79)) | (1L << (OBJECT - 79)))) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & ((1L << (SINGLE - 149)) | (1L << (STRING - 149)) | (1L << (VARIANT - 149)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CertainIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(VisualBasic6Parser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VisualBasic6Parser.IDENTIFIER, i);
		}
		public AmbiguousKeywordContext[] ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_certainIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCertainIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCertainIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CertainIdentifierContext certainIdentifier() {
		CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_certainIdentifier);
		try {
			int _alt;
			State = 2606;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2591; Match(IDENTIFIER);
				State = 2596;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,438,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 2594;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2592; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2593; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 2598;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,438,_ctx);
				}
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2599; ambiguousKeyword();
				State = 2602;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2602;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2600; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2601; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2604;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,440,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(VisualBasic6Parser.LT, 0); }
		public ITerminalNode LEQ() { return GetToken(VisualBasic6Parser.LEQ, 0); }
		public ITerminalNode GT() { return GetToken(VisualBasic6Parser.GT, 0); }
		public ITerminalNode GEQ() { return GetToken(VisualBasic6Parser.GEQ, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VisualBasic6Parser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2608;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (EQ - 184)) | (1L << (GEQ - 184)) | (1L << (GT - 184)) | (1L << (LEQ - 184)) | (1L << (LT - 184)) | (1L << (NEQ - 184)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(VisualBasic6Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(VisualBasic6Parser.DOT, i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_complexType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2610; ambiguousIdentifier();
			State = 2615;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,442,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2611; Match(DOT);
					State = 2612; ambiguousIdentifier();
					}
					} 
				}
				State = 2617;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,442,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(VisualBasic6Parser.MULT, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2618; Match(MULT);
			State = 2620;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2619; Match(WS);
				}
			}

			State = 2624;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGERLITERAL:
				{
				State = 2622; Match(INTEGERLITERAL);
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2623; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public CertainIdentifierContext[] certainIdentifier() {
			return GetRuleContexts<CertainIdentifierContext>();
		}
		public CertainIdentifierContext certainIdentifier(int i) {
			return GetRuleContext<CertainIdentifierContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2626; certainIdentifier();
			State = 2635;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				State = 2628;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2627; Match(WS);
					}
				}

				State = 2630; Match(MINUS);
				State = 2632;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2631; Match(WS);
					}
				}

				State = 2634; certainIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VisualBasic6Parser.COLON, 0); }
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2637; ambiguousIdentifier();
			State = 2638; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode COLORLITERAL() { return GetToken(VisualBasic6Parser.COLORLITERAL, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VisualBasic6Parser.DATELITERAL, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VisualBasic6Parser.DOUBLELITERAL, 0); }
		public ITerminalNode FILENUMBER() { return GetToken(VisualBasic6Parser.FILENUMBER, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VisualBasic6Parser.STRINGLITERAL, 0); }
		public ITerminalNode TRUE() { return GetToken(VisualBasic6Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(VisualBasic6Parser.FALSE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VisualBasic6Parser.NOTHING, 0); }
		public ITerminalNode NULL() { return GetToken(VisualBasic6Parser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2640;
			_la = _input.La(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (TRUE - 161)) | (1L << (STRINGLITERAL - 161)) | (1L << (DATELITERAL - 161)) | (1L << (COLORLITERAL - 161)) | (1L << (INTEGERLITERAL - 161)) | (1L << (DOUBLELITERAL - 161)) | (1L << (FILENUMBER - 161)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublicPrivateVisibilityContext : ParserRuleContext {
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public PublicPrivateVisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publicPrivateVisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPublicPrivateVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPublicPrivateVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublicPrivateVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublicPrivateVisibilityContext publicPrivateVisibility() {
		PublicPrivateVisibilityContext _localctx = new PublicPrivateVisibilityContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_publicPrivateVisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2642;
			_la = _input.La(1);
			if ( !(_la==PRIVATE || _la==PUBLIC) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublicPrivateGlobalVisibilityContext : ParserRuleContext {
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VisualBasic6Parser.GLOBAL, 0); }
		public PublicPrivateGlobalVisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publicPrivateGlobalVisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPublicPrivateGlobalVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPublicPrivateGlobalVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublicPrivateGlobalVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublicPrivateGlobalVisibilityContext publicPrivateGlobalVisibility() {
		PublicPrivateGlobalVisibilityContext _localctx = new PublicPrivateGlobalVisibilityContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_publicPrivateGlobalVisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2644;
			_la = _input.La(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GLOBAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PUBLIC - 70)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2648;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				State = 2646; baseType();
				}
				break;

			case 2:
				{
				State = 2647; complexType();
				}
				break;
			}
			State = 2658;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				State = 2651;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2650; Match(WS);
					}
				}

				State = 2653; Match(LPAREN);
				State = 2655;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2654; Match(WS);
					}
				}

				State = 2657; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AMPERSAND() { return GetToken(VisualBasic6Parser.AMPERSAND, 0); }
		public ITerminalNode AT() { return GetToken(VisualBasic6Parser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VisualBasic6Parser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONMARK() { return GetToken(VisualBasic6Parser.EXCLAMATIONMARK, 0); }
		public ITerminalNode HASH() { return GetToken(VisualBasic6Parser.HASH, 0); }
		public ITerminalNode PERCENT() { return GetToken(VisualBasic6Parser.PERCENT, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2660;
			_la = _input.La(1);
			if ( !(((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (AMPERSAND - 176)) | (1L << (AT - 176)) | (1L << (DOLLAR - 176)) | (1L << (EXCLAMATIONMARK - 176)) | (1L << (HASH - 176)) | (1L << (PERCENT - 176)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public ITerminalNode FRIEND() { return GetToken(VisualBasic6Parser.FRIEND, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VisualBasic6Parser.GLOBAL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2662;
			_la = _input.La(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode ACCESS() { return GetToken(VisualBasic6Parser.ACCESS, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VisualBasic6Parser.ADDRESSOF, 0); }
		public ITerminalNode ALIAS() { return GetToken(VisualBasic6Parser.ALIAS, 0); }
		public ITerminalNode AND() { return GetToken(VisualBasic6Parser.AND, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VisualBasic6Parser.ATTRIBUTE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VisualBasic6Parser.APPACTIVATE, 0); }
		public ITerminalNode APPEND() { return GetToken(VisualBasic6Parser.APPEND, 0); }
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode BEEP() { return GetToken(VisualBasic6Parser.BEEP, 0); }
		public ITerminalNode BEGIN() { return GetToken(VisualBasic6Parser.BEGIN, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VisualBasic6Parser.BOOLEAN, 0); }
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ITerminalNode BYTE() { return GetToken(VisualBasic6Parser.BYTE, 0); }
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ITerminalNode CLASS() { return GetToken(VisualBasic6Parser.CLASS, 0); }
		public ITerminalNode CLOSE() { return GetToken(VisualBasic6Parser.CLOSE, 0); }
		public ITerminalNode CHDIR() { return GetToken(VisualBasic6Parser.CHDIR, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VisualBasic6Parser.CHDRIVE, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VisualBasic6Parser.COLLECTION, 0); }
		public ITerminalNode CONST() { return GetToken(VisualBasic6Parser.CONST, 0); }
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VisualBasic6Parser.DECLARE, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VisualBasic6Parser.DEFBOOL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VisualBasic6Parser.DEFBYTE, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VisualBasic6Parser.DEFCUR, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VisualBasic6Parser.DEFDBL, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VisualBasic6Parser.DEFDATE, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VisualBasic6Parser.DEFDEC, 0); }
		public ITerminalNode DEFINT() { return GetToken(VisualBasic6Parser.DEFINT, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VisualBasic6Parser.DEFLNG, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VisualBasic6Parser.DEFOBJ, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VisualBasic6Parser.DEFSNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VisualBasic6Parser.DEFSTR, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VisualBasic6Parser.DEFVAR, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VisualBasic6Parser.DELETESETTING, 0); }
		public ITerminalNode DIM() { return GetToken(VisualBasic6Parser.DIM, 0); }
		public ITerminalNode DO() { return GetToken(VisualBasic6Parser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VisualBasic6Parser.DOUBLE, 0); }
		public ITerminalNode EACH() { return GetToken(VisualBasic6Parser.EACH, 0); }
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VisualBasic6Parser.ELSEIF, 0); }
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public ITerminalNode ENUM() { return GetToken(VisualBasic6Parser.ENUM, 0); }
		public ITerminalNode EQV() { return GetToken(VisualBasic6Parser.EQV, 0); }
		public ITerminalNode ERASE() { return GetToken(VisualBasic6Parser.ERASE, 0); }
		public ITerminalNode ERROR() { return GetToken(VisualBasic6Parser.ERROR, 0); }
		public ITerminalNode EVENT() { return GetToken(VisualBasic6Parser.EVENT, 0); }
		public ITerminalNode FALSE() { return GetToken(VisualBasic6Parser.FALSE, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VisualBasic6Parser.FILECOPY, 0); }
		public ITerminalNode FRIEND() { return GetToken(VisualBasic6Parser.FRIEND, 0); }
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode GET() { return GetToken(VisualBasic6Parser.GET, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VisualBasic6Parser.GLOBAL, 0); }
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode IMP() { return GetToken(VisualBasic6Parser.IMP, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VisualBasic6Parser.IMPLEMENTS, 0); }
		public ITerminalNode IN() { return GetToken(VisualBasic6Parser.IN, 0); }
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ITerminalNode INTEGER() { return GetToken(VisualBasic6Parser.INTEGER, 0); }
		public ITerminalNode KILL() { return GetToken(VisualBasic6Parser.KILL, 0); }
		public ITerminalNode LOAD() { return GetToken(VisualBasic6Parser.LOAD, 0); }
		public ITerminalNode LOCK() { return GetToken(VisualBasic6Parser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(VisualBasic6Parser.LONG, 0); }
		public ITerminalNode LOOP() { return GetToken(VisualBasic6Parser.LOOP, 0); }
		public ITerminalNode LEN() { return GetToken(VisualBasic6Parser.LEN, 0); }
		public ITerminalNode LET() { return GetToken(VisualBasic6Parser.LET, 0); }
		public ITerminalNode LIB() { return GetToken(VisualBasic6Parser.LIB, 0); }
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public ITerminalNode LSET() { return GetToken(VisualBasic6Parser.LSET, 0); }
		public ITerminalNode ME() { return GetToken(VisualBasic6Parser.ME, 0); }
		public ITerminalNode MID() { return GetToken(VisualBasic6Parser.MID, 0); }
		public ITerminalNode MKDIR() { return GetToken(VisualBasic6Parser.MKDIR, 0); }
		public ITerminalNode MOD() { return GetToken(VisualBasic6Parser.MOD, 0); }
		public ITerminalNode NAME() { return GetToken(VisualBasic6Parser.NAME, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public ITerminalNode NOT() { return GetToken(VisualBasic6Parser.NOT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VisualBasic6Parser.NOTHING, 0); }
		public ITerminalNode NULL() { return GetToken(VisualBasic6Parser.NULL, 0); }
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode OPEN() { return GetToken(VisualBasic6Parser.OPEN, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VisualBasic6Parser.OPTIONAL, 0); }
		public ITerminalNode OR() { return GetToken(VisualBasic6Parser.OR, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VisualBasic6Parser.OUTPUT, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VisualBasic6Parser.PRESERVE, 0); }
		public ITerminalNode PRINT() { return GetToken(VisualBasic6Parser.PRINT, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public ITerminalNode PUT() { return GetToken(VisualBasic6Parser.PUT, 0); }
		public ITerminalNode RANDOM() { return GetToken(VisualBasic6Parser.RANDOM, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VisualBasic6Parser.RANDOMIZE, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VisualBasic6Parser.RAISEEVENT, 0); }
		public ITerminalNode READ() { return GetToken(VisualBasic6Parser.READ, 0); }
		public ITerminalNode REDIM() { return GetToken(VisualBasic6Parser.REDIM, 0); }
		public ITerminalNode REM() { return GetToken(VisualBasic6Parser.REM, 0); }
		public ITerminalNode RESET() { return GetToken(VisualBasic6Parser.RESET, 0); }
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode RETURN() { return GetToken(VisualBasic6Parser.RETURN, 0); }
		public ITerminalNode RMDIR() { return GetToken(VisualBasic6Parser.RMDIR, 0); }
		public ITerminalNode RSET() { return GetToken(VisualBasic6Parser.RSET, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VisualBasic6Parser.SAVEPICTURE, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VisualBasic6Parser.SAVESETTING, 0); }
		public ITerminalNode SEEK() { return GetToken(VisualBasic6Parser.SEEK, 0); }
		public ITerminalNode SELECT() { return GetToken(VisualBasic6Parser.SELECT, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VisualBasic6Parser.SENDKEYS, 0); }
		public ITerminalNode SET() { return GetToken(VisualBasic6Parser.SET, 0); }
		public ITerminalNode SETATTR() { return GetToken(VisualBasic6Parser.SETATTR, 0); }
		public ITerminalNode SHARED() { return GetToken(VisualBasic6Parser.SHARED, 0); }
		public ITerminalNode SINGLE() { return GetToken(VisualBasic6Parser.SINGLE, 0); }
		public ITerminalNode SPC() { return GetToken(VisualBasic6Parser.SPC, 0); }
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ITerminalNode STEP() { return GetToken(VisualBasic6Parser.STEP, 0); }
		public ITerminalNode STOP() { return GetToken(VisualBasic6Parser.STOP, 0); }
		public ITerminalNode STRING() { return GetToken(VisualBasic6Parser.STRING, 0); }
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public ITerminalNode TAB() { return GetToken(VisualBasic6Parser.TAB, 0); }
		public ITerminalNode TEXT() { return GetToken(VisualBasic6Parser.TEXT, 0); }
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode TIME() { return GetToken(VisualBasic6Parser.TIME, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public ITerminalNode TRUE() { return GetToken(VisualBasic6Parser.TRUE, 0); }
		public ITerminalNode TYPE() { return GetToken(VisualBasic6Parser.TYPE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VisualBasic6Parser.TYPEOF, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VisualBasic6Parser.UNLOAD, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VisualBasic6Parser.UNLOCK, 0); }
		public ITerminalNode UNTIL() { return GetToken(VisualBasic6Parser.UNTIL, 0); }
		public ITerminalNode VARIANT() { return GetToken(VisualBasic6Parser.VARIANT, 0); }
		public ITerminalNode VERSION() { return GetToken(VisualBasic6Parser.VERSION, 0); }
		public ITerminalNode WEND() { return GetToken(VisualBasic6Parser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode WIDTH() { return GetToken(VisualBasic6Parser.WIDTH, 0); }
		public ITerminalNode WITH() { return GetToken(VisualBasic6Parser.WITH, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VisualBasic6Parser.WITHEVENTS, 0); }
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode XOR() { return GetToken(VisualBasic6Parser.XOR, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2664;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 102: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 23);

		case 1: return Precpred(_ctx, 22);

		case 2: return Precpred(_ctx, 21);

		case 3: return Precpred(_ctx, 20);

		case 4: return Precpred(_ctx, 19);

		case 5: return Precpred(_ctx, 18);

		case 6: return Precpred(_ctx, 17);

		case 7: return Precpred(_ctx, 16);

		case 8: return Precpred(_ctx, 15);

		case 9: return Precpred(_ctx, 12);

		case 10: return Precpred(_ctx, 11);

		case 11: return Precpred(_ctx, 10);

		case 12: return Precpred(_ctx, 9);

		case 13: return Precpred(_ctx, 8);

		case 14: return Precpred(_ctx, 7);

		case 15: return Precpred(_ctx, 6);

		case 16: return Precpred(_ctx, 5);

		case 17: return Precpred(_ctx, 4);

		case 18: return Precpred(_ctx, 3);

		case 19: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xD8\xA6D\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x12B\n\x3\x3\x3\a\x3\x12E"+
		"\n\x3\f\x3\xE\x3\x131\v\x3\x3\x3\x3\x3\x6\x3\x135\n\x3\r\x3\xE\x3\x136"+
		"\x5\x3\x139\n\x3\x3\x3\x5\x3\x13C\n\x3\x3\x3\a\x3\x13F\n\x3\f\x3\xE\x3"+
		"\x142\v\x3\x3\x3\x5\x3\x145\n\x3\x3\x3\a\x3\x148\n\x3\f\x3\xE\x3\x14B"+
		"\v\x3\x3\x3\x5\x3\x14E\n\x3\x3\x3\a\x3\x151\n\x3\f\x3\xE\x3\x154\v\x3"+
		"\x3\x3\x5\x3\x157\n\x3\x3\x3\a\x3\x15A\n\x3\f\x3\xE\x3\x15D\v\x3\x3\x3"+
		"\x5\x3\x160\n\x3\x3\x3\a\x3\x163\n\x3\f\x3\xE\x3\x166\v\x3\x3\x3\x5\x3"+
		"\x169\n\x3\x3\x4\x6\x4\x16C\n\x4\r\x4\xE\x4\x16D\x3\x5\x3\x5\x5\x5\x172"+
		"\n\x5\x3\x5\x3\x5\x5\x5\x176\n\x5\x3\x5\x3\x5\x3\x5\x5\x5\x17B\n\x5\x3"+
		"\x5\x3\x5\a\x5\x17F\n\x5\f\x5\xE\x5\x182\v\x5\x3\x6\x3\x6\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x5\b\x18D\n\b\x3\t\x3\t\x6\t\x191\n\t\r\t\xE\t"+
		"\x192\x3\t\x6\t\x196\n\t\r\t\xE\t\x197\x3\t\x3\t\x6\t\x19C\n\t\r\t\xE"+
		"\t\x19D\x3\n\x3\n\x5\n\x1A2\n\n\x3\n\x3\n\x5\n\x1A6\n\n\x3\n\x3\n\x3\n"+
		"\x3\v\x3\v\x6\v\x1AD\n\v\r\v\xE\v\x1AE\x6\v\x1B1\n\v\r\v\xE\v\x1B2\x3"+
		"\f\x3\f\x6\f\x1B7\n\f\r\f\xE\f\x1B8\x6\f\x1BB\n\f\r\f\xE\f\x1BC\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x1C7\n\r\x3\xE\x3\xE\x6\xE\x1CB"+
		"\n\xE\r\xE\xE\xE\x1CC\x3\xE\a\xE\x1D0\n\xE\f\xE\xE\xE\x1D3\v\xE\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5"+
		"\xF\x1E1\n\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x1E9\n"+
		"\x11\x3\x11\x3\x11\x5\x11\x1ED\n\x11\x3\x11\x3\x11\x5\x11\x1F1\n\x11\x3"+
		"\x11\x3\x11\x5\x11\x1F5\n\x11\x3\x11\a\x11\x1F8\n\x11\f\x11\xE\x11\x1FB"+
		"\v\x11\x3\x12\x3\x12\x6\x12\x1FF\n\x12\r\x12\xE\x12\x200\x3\x12\x5\x12"+
		"\x204\n\x12\x3\x12\a\x12\x207\n\x12\f\x12\xE\x12\x20A\v\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x24F\n\x13\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x5\x14\x255\n\x14\x3\x14\x3\x14\x5\x14\x259\n\x14\x3\x14"+
		"\x5\x14\x25C\n\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x26C\n\x18\x3\x18"+
		"\x3\x18\x5\x18\x270\n\x18\x3\x18\a\x18\x273\n\x18\f\x18\xE\x18\x276\v"+
		"\x18\x5\x18\x278\n\x18\x3\x19\x3\x19\x3\x19\x5\x19\x27D\n\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x5\x19\x283\n\x19\x3\x19\x3\x19\x5\x19\x287\n\x19\x3"+
		"\x19\a\x19\x28A\n\x19\f\x19\xE\x19\x28D\v\x19\x3\x1A\x3\x1A\x5\x1A\x291"+
		"\n\x1A\x3\x1A\x3\x1A\x5\x1A\x295\n\x1A\x3\x1A\x5\x1A\x298\n\x1A\x3\x1A"+
		"\x3\x1A\x5\x1A\x29C\n\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x5\x1B\x2A2\n\x1B"+
		"\x3\x1B\x3\x1B\x5\x1B\x2A6\n\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x5"+
		"\x1C\x2AD\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2B3\n\x1C\x3\x1C\x5"+
		"\x1C\x2B6\n\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2BB\n\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2C5\n\x1C\x3\x1C\x5\x1C"+
		"\x2C8\n\x1C\x3\x1C\x5\x1C\x2CB\n\x1C\x3\x1C\x3\x1C\x5\x1C\x2CF\n\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2D5\n\x1D\x3\x1D\x3\x1D\x5\x1D\x2D9"+
		"\n\x1D\x3\x1D\a\x1D\x2DC\n\x1D\f\x1D\xE\x1D\x2DF\v\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x5\x1E\x2E5\n\x1E\x3\x1E\x3\x1E\x5\x1E\x2E9\n\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x2ED\n\x1E\x3\x1E\x3\x1E\x5\x1E\x2F1\n\x1E\x3\x1E\x5\x1E\x2F4"+
		"\n\x1E\x3\x1F\x3\x1F\x6\x1F\x2F8\n\x1F\r\x1F\xE\x1F\x2F9\x3\x1F\x3\x1F"+
		"\x6\x1F\x2FE\n\x1F\r\x1F\xE\x1F\x2FF\x5\x1F\x302\n\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x6\x1F\x30B\n\x1F\r\x1F\xE\x1F\x30C\x3"+
		"\x1F\x3\x1F\x6\x1F\x311\n\x1F\r\x1F\xE\x1F\x312\x5\x1F\x315\n\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x6\x1F\x31B\n\x1F\r\x1F\xE\x1F\x31C\x3\x1F\x3\x1F"+
		"\x6\x1F\x321\n\x1F\r\x1F\xE\x1F\x322\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x5\x1F\x32B\n\x1F\x3 \x3 \x3!\x3!\x3!\x5!\x332\n!\x3!\x3!\x3!"+
		"\x3!\x6!\x338\n!\r!\xE!\x339\x3!\a!\x33D\n!\f!\xE!\x340\v!\x3!\x3!\x3"+
		"\"\x3\"\x5\"\x346\n\"\x3\"\x3\"\x5\"\x34A\n\"\x3\"\x5\"\x34D\n\"\x3\""+
		"\x6\"\x350\n\"\r\"\xE\"\x351\x3#\x3#\x3#\x3#\x5#\x358\n#\x3#\x3#\x5#\x35C"+
		"\n#\x3#\a#\x35F\n#\f#\xE#\x362\v#\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x5%\x36B"+
		"\n%\x3%\x3%\x3%\x3%\x5%\x371\n%\x3%\x3%\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x5"+
		"\'\x37B\n\'\x3\'\x3\'\x5\'\x37F\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3("+
		"\x5(\x389\n(\x3(\x3(\x3(\x3(\x3(\x6(\x390\n(\r(\xE(\x391\x3(\x3(\x6(\x396"+
		"\n(\r(\xE(\x397\x5(\x39A\n(\x3(\x3(\x3(\x5(\x39F\n(\x3)\x3)\x3)\x3)\x5"+
		")\x3A5\n)\x3)\x3)\x5)\x3A9\n)\x3)\x5)\x3AC\n)\x3)\x3)\x5)\x3B0\n)\x3)"+
		"\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x3BB\n)\x3)\x6)\x3BE\n)\r)\xE)\x3BF"+
		"\x3)\x3)\x6)\x3C4\n)\r)\xE)\x3C5\x5)\x3C8\n)\x3)\x3)\x3)\x3)\x5)\x3CE"+
		"\n)\x5)\x3D0\n)\x3*\x3*\x3*\x5*\x3D5\n*\x3*\x3*\x5*\x3D9\n*\x3*\x3*\x3"+
		"*\x3*\x5*\x3DF\n*\x3*\x5*\x3E2\n*\x3*\x3*\x5*\x3E6\n*\x3*\x6*\x3E9\n*"+
		"\r*\xE*\x3EA\x3*\x3*\x6*\x3EF\n*\r*\xE*\x3F0\x5*\x3F3\n*\x3*\x3*\x3+\x3"+
		"+\x3+\x3+\x5+\x3FB\n+\x3+\x3+\x5+\x3FF\n+\x3+\x5+\x402\n+\x3+\x5+\x405"+
		"\n+\x3+\x3+\x5+\x409\n+\x3+\x3+\x3,\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x3.\x3"+
		".\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x5.\x420\n.\x3.\x3.\a.\x424\n.\f"+
		".\xE.\x427\v.\x3.\x5.\x42A\n.\x3.\x3.\x5.\x42E\n.\x3/\x3/\x3/\x3/\x3/"+
		"\x3/\x6/\x436\n/\r/\xE/\x437\x3/\x3/\x6/\x43C\n/\r/\xE/\x43D\x5/\x440"+
		"\n/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x6\x31\x44A"+
		"\n\x31\r\x31\xE\x31\x44B\x3\x31\x3\x31\x6\x31\x450\n\x31\r\x31\xE\x31"+
		"\x451\x5\x31\x454\n\x31\x3\x32\x3\x32\x6\x32\x458\n\x32\r\x32\xE\x32\x459"+
		"\x3\x32\x3\x32\x6\x32\x45E\n\x32\r\x32\xE\x32\x45F\x5\x32\x462\n\x32\x3"+
		"\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x46C\n\x34"+
		"\x3\x34\x3\x34\x5\x34\x470\n\x34\x3\x34\x6\x34\x473\n\x34\r\x34\xE\x34"+
		"\x474\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x5\x36\x47D\n\x36\x3\x36"+
		"\x3\x36\x5\x36\x481\n\x36\x3\x36\x3\x36\x5\x36\x485\n\x36\x3\x36\x3\x36"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x48D\n\x37\x3\x37\x3\x37\x5\x37\x491"+
		"\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39"+
		"\x3\x39\x5\x39\x49D\n\x39\x3\x39\x3\x39\x5\x39\x4A1\n\x39\x3\x39\x3\x39"+
		"\x3\x39\x3\x39\x3\x39\x5\x39\x4A8\n\x39\x5\x39\x4AA\n\x39\x3:\x3:\x3:"+
		"\x3:\x5:\x4B0\n:\x3:\x3:\x5:\x4B4\n:\x3:\x3:\x3;\x3;\a;\x4BA\n;\f;\xE"+
		";\x4BD\v;\x3;\x5;\x4C0\n;\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3<\x6<\x4CA\n<"+
		"\r<\xE<\x4CB\x3<\x3<\x6<\x4D0\n<\r<\xE<\x4D1\x5<\x4D4\n<\x3=\x3=\x3=\x3"+
		"=\x3=\x3=\x6=\x4DC\n=\r=\xE=\x4DD\x3=\x3=\x6=\x4E2\n=\r=\xE=\x4E3\x5="+
		"\x4E6\n=\x3>\x3>\x6>\x4EA\n>\r>\xE>\x4EB\x3>\x3>\x6>\x4F0\n>\r>\xE>\x4F1"+
		"\x5>\x4F4\n>\x3?\x3?\x5?\x4F8\n?\x3?\x3?\x5?\x4FC\n?\x3?\x3?\x5?\x500"+
		"\n?\x3?\x3?\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42"+
		"\x5\x42\x518\n\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3"+
		"\x43\x5\x43\x522\n\x43\x3\x43\x3\x43\x5\x43\x526\n\x43\x3\x43\a\x43\x529"+
		"\n\x43\f\x43\xE\x43\x52C\v\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x5\x44\x536\n\x44\x3\x44\x3\x44\x5\x44\x53A\n\x44\x3\x44"+
		"\a\x44\x53D\n\x44\f\x44\xE\x44\x540\v\x44\x3\x45\x3\x45\x3\x45\x3\x45"+
		"\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x54D\n\x45\x3"+
		"\x45\x3\x45\x5\x45\x551\n\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45"+
		"\x3\x45\x5\x45\x55A\n\x45\x3\x45\x3\x45\x5\x45\x55E\n\x45\x3\x45\x5\x45"+
		"\x561\n\x45\x3\x46\x3\x46\x5\x46\x565\n\x46\x3\x46\x3\x46\x5\x46\x569"+
		"\n\x46\x3\x46\x5\x46\x56C\n\x46\a\x46\x56E\n\x46\f\x46\xE\x46\x571\v\x46"+
		"\x3\x46\x5\x46\x574\n\x46\x3\x46\x5\x46\x577\n\x46\x3\x46\x3\x46\x5\x46"+
		"\x57B\n\x46\x3\x46\x5\x46\x57E\n\x46\x6\x46\x580\n\x46\r\x46\xE\x46\x581"+
		"\x5\x46\x584\n\x46\x3G\x3G\x3G\x5G\x589\nG\x3G\x3G\x5G\x58D\nG\x3G\x3"+
		"G\x5G\x591\nG\x3G\x3G\x5G\x595\nG\x5G\x597\nG\x3H\x3H\x3H\x3H\x5H\x59D"+
		"\nH\x3H\x3H\x5H\x5A1\nH\x3H\x5H\x5A4\nH\x3I\x3I\x3I\x5I\x5A9\nI\x3I\x3"+
		"I\x5I\x5AD\nI\x3I\x3I\x3I\x3I\x5I\x5B3\nI\x3I\x5I\x5B6\nI\x3I\x5I\x5B9"+
		"\nI\x3I\x3I\x5I\x5BD\nI\x3I\x6I\x5C0\nI\rI\xEI\x5C1\x3I\x3I\x6I\x5C6\n"+
		"I\rI\xEI\x5C7\x5I\x5CA\nI\x3I\x3I\x3J\x3J\x3J\x5J\x5D1\nJ\x3J\x3J\x5J"+
		"\x5D5\nJ\x3J\x3J\x3J\x3J\x5J\x5DB\nJ\x3J\x5J\x5DE\nJ\x3J\x6J\x5E1\nJ\r"+
		"J\xEJ\x5E2\x3J\x3J\x6J\x5E7\nJ\rJ\xEJ\x5E8\x5J\x5EB\nJ\x3J\x3J\x3K\x3"+
		"K\x3K\x5K\x5F2\nK\x3K\x3K\x5K\x5F6\nK\x3K\x3K\x3K\x3K\x5K\x5FC\nK\x3K"+
		"\x5K\x5FF\nK\x3K\x6K\x602\nK\rK\xEK\x603\x3K\x3K\x6K\x608\nK\rK\xEK\x609"+
		"\x5K\x60C\nK\x3K\x3K\x3L\x3L\x3L\x3L\x5L\x614\nL\x3L\x3L\x5L\x618\nL\x3"+
		"L\x5L\x61B\nL\x3L\x5L\x61E\nL\x3L\x3L\x5L\x622\nL\x3L\x3L\x3M\x3M\x3M"+
		"\x3M\x5M\x62A\nM\x3M\x3M\x5M\x62E\nM\x3M\x3M\x5M\x632\nM\x5M\x634\nM\x3"+
		"M\x5M\x637\nM\x3N\x3N\x3N\x5N\x63C\nN\x3O\x3O\x3O\x3O\x5O\x642\nO\x3O"+
		"\x3O\x5O\x646\nO\x3O\x3O\x5O\x64A\nO\x3O\aO\x64D\nO\fO\xEO\x650\vO\x3"+
		"P\x3P\x5P\x654\nP\x3P\x3P\x5P\x658\nP\x3P\x3P\x5P\x65C\nP\x3P\x3P\x3P"+
		"\x5P\x661\nP\x3Q\x3Q\x3R\x3R\x3R\x3R\x5R\x669\nR\x5R\x66B\nR\x3S\x3S\x3"+
		"T\x3T\x3T\x3T\x3U\x3U\x3U\x3U\x5U\x677\nU\x3U\x3U\x5U\x67B\nU\x3U\x3U"+
		"\x3V\x3V\x3V\x3V\x5V\x683\nV\x3V\x3V\x5V\x687\nV\x3V\x3V\x3W\x3W\x3W\x3"+
		"W\x5W\x68F\nW\x3W\x3W\x5W\x693\nW\x3W\x3W\x5W\x697\nW\x3W\x3W\x5W\x69B"+
		"\nW\x3W\x3W\x5W\x69F\nW\x3W\x3W\x5W\x6A3\nW\x3W\x3W\x3X\x3X\x3X\x3X\x5"+
		"X\x6AB\nX\x3X\x3X\x5X\x6AF\nX\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Y\x3Y\x6Y\x6B9"+
		"\nY\rY\xEY\x6BA\x3Y\aY\x6BE\nY\fY\xEY\x6C1\vY\x3Y\x5Y\x6C4\nY\x3Y\x3Y"+
		"\x3Z\x3Z\x3Z\x3Z\x5Z\x6CC\nZ\x3Z\x5Z\x6CF\nZ\x3Z\aZ\x6D2\nZ\fZ\xEZ\x6D5"+
		"\vZ\x3Z\x6Z\x6D8\nZ\rZ\xEZ\x6D9\x5Z\x6DC\nZ\x3Z\x3Z\x6Z\x6E0\nZ\rZ\xE"+
		"Z\x6E1\x5Z\x6E4\nZ\x3[\x3[\x3[\x5[\x6E9\n[\x3[\x3[\x5[\x6ED\n[\x3[\a["+
		"\x6F0\n[\f[\xE[\x6F3\v[\x5[\x6F5\n[\x3\\\x3\\\x5\\\x6F9\n\\\x3\\\x3\\"+
		"\x5\\\x6FD\n\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x5\\\x708"+
		"\n\\\x3]\x3]\x3]\x3]\x5]\x70E\n]\x3]\x3]\x5]\x712\n]\x3]\x5]\x715\n]\x3"+
		"^\x3^\x3^\x3^\x5^\x71B\n^\x3^\x3^\x5^\x71F\n^\x3^\x3^\x3_\x3_\x3_\x3_"+
		"\x5_\x727\n_\x3_\x3_\x5_\x72B\n_\x3_\x3_\x3`\x3`\x3\x61\x3\x61\x3\x61"+
		"\x5\x61\x734\n\x61\x3\x61\x3\x61\x5\x61\x738\n\x61\x3\x61\x3\x61\x3\x61"+
		"\x3\x61\x5\x61\x73E\n\x61\x3\x61\x5\x61\x741\n\x61\x3\x61\x6\x61\x744"+
		"\n\x61\r\x61\xE\x61\x745\x3\x61\x3\x61\x6\x61\x74A\n\x61\r\x61\xE\x61"+
		"\x74B\x5\x61\x74E\n\x61\x3\x61\x3\x61\x3\x62\x3\x62\x5\x62\x754\n\x62"+
		"\x3\x62\x3\x62\x5\x62\x758\n\x62\x3\x62\x3\x62\x3\x63\x3\x63\x3\x63\x5"+
		"\x63\x75F\n\x63\x3\x63\x3\x63\x3\x63\x3\x63\x6\x63\x765\n\x63\r\x63\xE"+
		"\x63\x766\x3\x63\a\x63\x76A\n\x63\f\x63\xE\x63\x76D\v\x63\x3\x63\x3\x63"+
		"\x3\x64\x3\x64\x5\x64\x773\n\x64\x3\x64\x3\x64\x5\x64\x777\n\x64\x3\x64"+
		"\x5\x64\x77A\n\x64\x3\x64\x5\x64\x77D\n\x64\x3\x64\x5\x64\x780\n\x64\x3"+
		"\x64\x3\x64\x5\x64\x784\n\x64\x3\x64\x6\x64\x787\n\x64\r\x64\xE\x64\x788"+
		"\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x792\n\x65\x3"+
		"\x66\x3\x66\x3\x66\x3\x66\x3g\x3g\x3g\x3g\x5g\x79C\ng\x3g\x3g\x5g\x7A0"+
		"\ng\x3g\x3g\x3g\x3g\x3g\x5g\x7A7\ng\x5g\x7A9\ng\x3h\x3h\x3h\x3h\x3h\x5"+
		"h\x7B0\nh\x3h\x3h\x5h\x7B4\nh\x3h\x3h\x5h\x7B8\nh\x3h\ah\x7BB\nh\fh\xE"+
		"h\x7BE\vh\x3h\x5h\x7C1\nh\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h"+
		"\x3h\x5h\x7CF\nh\x3h\x3h\x5h\x7D3\nh\x3h\x3h\x3h\x3h\x5h\x7D9\nh\x3h\x3"+
		"h\x3h\x5h\x7DE\nh\x3h\x3h\x3h\x3h\x5h\x7E4\nh\x3h\x3h\x3h\x3h\x3h\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x5h\x7F2\nh\x3h\x3h\x5h\x7F6\nh\x3h\x3h\x3h\x5"+
		"h\x7FB\nh\x3h\x3h\x5h\x7FF\nh\x3h\x3h\x3h\x5h\x804\nh\x3h\x3h\x5h\x808"+
		"\nh\x3h\x3h\x3h\x5h\x80D\nh\x3h\x3h\x5h\x811\nh\x3h\x3h\x3h\x5h\x816\n"+
		"h\x3h\x3h\x5h\x81A\nh\x3h\x3h\x3h\x5h\x81F\nh\x3h\x3h\x5h\x823\nh\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5h\x82D\nh\x3h\x3h\x5h\x831\nh\x3h\x3h\x3"+
		"h\x5h\x836\nh\x3h\x3h\x5h\x83A\nh\x3h\x3h\x3h\x5h\x83F\nh\x3h\x3h\x5h"+
		"\x843\nh\x3h\x3h\x3h\x5h\x848\nh\x3h\x3h\x5h\x84C\nh\x3h\x3h\x3h\x5h\x851"+
		"\nh\x3h\x3h\x5h\x855\nh\x3h\x3h\x3h\x5h\x85A\nh\x3h\x3h\x5h\x85E\nh\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5h\x86D\nh\x3h\x3h"+
		"\x5h\x871\nh\x3h\x3h\x3h\x5h\x876\nh\x3h\x3h\x5h\x87A\nh\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\ah\x882\nh\fh\xEh\x885\vh\x3i\x3i\x3i\x5i\x88A\ni\x3i\x3i\x3"+
		"i\x5i\x88F\ni\x3i\x3i\x3j\x3j\x5j\x895\nj\x3j\x3j\x5j\x899\nj\x3j\aj\x89C"+
		"\nj\fj\xEj\x89F\vj\x3k\x3k\x5k\x8A3\nk\x3k\x3k\x5k\x8A7\nk\x3k\x3k\x5"+
		"k\x8AB\nk\x5k\x8AD\nk\x3k\x3k\x5k\x8B1\nk\x5k\x8B3\nk\x3k\x5k\x8B6\nk"+
		"\x3k\x3k\x5k\x8BA\nk\x3l\x3l\x3l\x3l\x6l\x8C0\nl\rl\xEl\x8C1\x3l\al\x8C5"+
		"\nl\fl\xEl\x8C8\vl\x3l\al\x8CB\nl\fl\xEl\x8CE\vl\x3l\x3l\x3m\x3m\x3m\x3"+
		"m\x5m\x8D6\nm\x3m\x3m\x5m\x8DA\nm\x3m\x3m\x3n\x3n\x3n\x3n\x6n\x8E2\nn"+
		"\rn\xEn\x8E3\x3n\x3n\x6n\x8E8\nn\rn\xEn\x8E9\x5n\x8EC\nn\x3n\x3n\x3o\x3"+
		"o\x3o\x3o\x5o\x8F4\no\x3o\x3o\x5o\x8F8\no\x3o\x5o\x8FB\no\x3p\x3p\x5p"+
		"\x8FF\np\x3q\x3q\x3q\x3q\x5q\x905\nq\x3q\x5q\x908\nq\x3q\x3q\x5q\x90C"+
		"\nq\x3q\x3q\x5q\x910\nq\x3q\x3q\x5q\x914\nq\x3r\x3r\x3r\x5r\x919\nr\x3"+
		"r\x3r\x3r\x5r\x91E\nr\x3r\x5r\x921\nr\x3r\x3r\x5r\x925\nr\x3r\x3r\x5r"+
		"\x929\nr\x3r\x3r\x5r\x92D\nr\x3s\x3s\x5s\x931\ns\x3t\x3t\x3t\x5t\x936"+
		"\nt\x3u\x5u\x939\nu\x3u\x3u\x3u\x5u\x93E\nu\x3u\x3u\x5u\x942\nu\x3u\x5"+
		"u\x945\nu\x3v\x3v\x3v\x3v\x5v\x94B\nv\x3w\x3w\x5w\x94F\nw\x3w\x5w\x952"+
		"\nw\x3x\x3x\x5x\x956\nx\x3x\x5x\x959\nx\x3x\x5x\x95C\nx\x3x\x3x\x5x\x960"+
		"\nx\x3x\x3x\x5x\x964\nx\x5x\x966\nx\x3x\x3x\x5x\x96A\nx\x3y\x3y\x5y\x96E"+
		"\ny\x3y\x6y\x971\ny\ry\xEy\x972\x3y\x5y\x976\ny\x3z\x3z\x3z\x5z\x97B\n"+
		"z\x3{\x3{\x3|\x5|\x980\n|\x3|\x5|\x983\n|\x3|\x3|\x5|\x987\n|\a|\x989"+
		"\n|\f|\xE|\x98C\v|\x3|\x3|\x5|\x990\n|\x3|\x3|\x5|\x994\n|\x3|\x5|\x997"+
		"\n|\a|\x999\n|\f|\xE|\x99C\v|\x3}\x3}\x5}\x9A0\n}\x3}\x3}\x3~\x3~\x3~"+
		"\x5~\x9A7\n~\x3\x7F\x3\x7F\x5\x7F\x9AB\n\x7F\x3\x7F\x3\x7F\x5\x7F\x9AF"+
		"\n\x7F\x3\x7F\x3\x7F\x5\x7F\x9B3\n\x7F\x3\x7F\a\x7F\x9B6\n\x7F\f\x7F\xE"+
		"\x7F\x9B9\v\x7F\x5\x7F\x9BB\n\x7F\x3\x7F\x5\x7F\x9BE\n\x7F\x3\x7F\x3\x7F"+
		"\x3\x80\x3\x80\x5\x80\x9C4\n\x80\x3\x80\x3\x80\x5\x80\x9C8\n\x80\x3\x80"+
		"\x3\x80\x5\x80\x9CC\n\x80\x3\x80\x3\x80\x5\x80\x9D0\n\x80\x3\x80\x5\x80"+
		"\x9D3\n\x80\x3\x80\x3\x80\x5\x80\x9D7\n\x80\x3\x80\x5\x80\x9DA\n\x80\x3"+
		"\x80\x3\x80\x5\x80\x9DE\n\x80\x3\x80\x5\x80\x9E1\n\x80\x3\x80\x5\x80\x9E4"+
		"\n\x80\x3\x81\x3\x81\x5\x81\x9E8\n\x81\x3\x81\x3\x81\x5\x81\x9EC\n\x81"+
		"\x3\x82\x3\x82\x5\x82\x9F0\n\x82\x3\x82\x3\x82\x5\x82\x9F4\n\x82\x3\x82"+
		"\a\x82\x9F7\n\x82\f\x82\xE\x82\x9FA\v\x82\x3\x83\x3\x83\x3\x83\x3\x83"+
		"\x3\x83\x5\x83\xA01\n\x83\x3\x83\x3\x83\x3\x84\x3\x84\x6\x84\xA07\n\x84"+
		"\r\x84\xE\x84\xA08\x3\x84\x3\x84\x3\x84\x6\x84\xA0E\n\x84\r\x84\xE\x84"+
		"\xA0F\x3\x84\x5\x84\xA13\n\x84\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85\xA19"+
		"\n\x85\x3\x85\x3\x85\x3\x85\x5\x85\xA1E\n\x85\x3\x86\x3\x86\x3\x87\x3"+
		"\x87\x3\x87\a\x87\xA25\n\x87\f\x87\xE\x87\xA28\v\x87\x3\x87\x3\x87\x3"+
		"\x87\x6\x87\xA2D\n\x87\r\x87\xE\x87\xA2E\x5\x87\xA31\n\x87\x3\x88\x3\x88"+
		"\x3\x89\x3\x89\x3\x89\a\x89\xA38\n\x89\f\x89\xE\x89\xA3B\v\x89\x3\x8A"+
		"\x3\x8A\x5\x8A\xA3F\n\x8A\x3\x8A\x3\x8A\x5\x8A\xA43\n\x8A\x3\x8B\x3\x8B"+
		"\x5\x8B\xA47\n\x8B\x3\x8B\x3\x8B\x5\x8B\xA4B\n\x8B\x3\x8B\x5\x8B\xA4E"+
		"\n\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8F\x3\x8F"+
		"\x3\x90\x3\x90\x5\x90\xA5B\n\x90\x3\x90\x5\x90\xA5E\n\x90\x3\x90\x3\x90"+
		"\x5\x90\xA62\n\x90\x3\x90\x5\x90\xA65\n\x90\x3\x91\x3\x91\x3\x92\x3\x92"+
		"\x3\x93\x3\x93\x3\x93\x2\x2\x3\xCE\x94\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2"+
		"^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2"+
		"|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2"+
		"\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2"+
		"\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2"+
		"\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2"+
		"\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2"+
		"\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2"+
		"\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108"+
		"\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A"+
		"\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x2\x17\x4\x2\r\r\x9F\x9F\x3"+
		"\x2\x1C\'\x4\x2\xA8\xA8\xAC\xAC\x3\x2=\x41\x5\x2\xBA\xBA\xC3\xC3\xC8\xC8"+
		"\x3\x2pq\a\x2\t\t\r\rOOyy\x83\x83\x4\x2\x86\x87\xB0\xB0\x4\x2\\^\x96\x96"+
		"\x4\x2\xB6\xB6\xCB\xCB\x4\x2\x98\x98\x9E\x9E\x4\x2\xF\x10zz\x3\x2\xF\x10"+
		"\r\x2\xE\xE\x11\x11\x18\x18\x1A\x1A++QQUUnn\x97\x97\x9C\x9C\xA9\xA9\t"+
		"\x2PPZZ\xBA\xBA\xBC\xBD\xBF\xBF\xC1\xC1\xC5\xC5\x6\x2\x42\x42lm\xA3\xA3"+
		"\xCE\xD3\x4\x2}}\x81\x81\x5\x2HH}}\x81\x81\b\x2\xB2\xB2\xB4\xB4\xB8\xB8"+
		"\xBB\xBB\xBE\xBE\xC6\xC6\x6\x2\x44\x44HH}}\x81\x81\f\x2\x3.\x37<\x42Z"+
		"__\x64moorsx}\x81\x86\x88\xB1\xC0C\x2\x126\x3\x2\x2\x2\x4\x12A\x3\x2\x2"+
		"\x2\x6\x16B\x3\x2\x2\x2\b\x16F\x3\x2\x2\x2\n\x183\x3\x2\x2\x2\f\x185\x3"+
		"\x2\x2\x2\xE\x187\x3\x2\x2\x2\x10\x18E\x3\x2\x2\x2\x12\x19F\x3\x2\x2\x2"+
		"\x14\x1B0\x3\x2\x2\x2\x16\x1BA\x3\x2\x2\x2\x18\x1C6\x3\x2\x2\x2\x1A\x1C8"+
		"\x3\x2\x2\x2\x1C\x1E0\x3\x2\x2\x2\x1E\x1E2\x3\x2\x2\x2 \x1E4\x3\x2\x2"+
		"\x2\"\x1FC\x3\x2\x2\x2$\x24E\x3\x2\x2\x2&\x250\x3\x2\x2\x2(\x25D\x3\x2"+
		"\x2\x2*\x25F\x3\x2\x2\x2,\x263\x3\x2\x2\x2.\x267\x3\x2\x2\x2\x30\x27C"+
		"\x3\x2\x2\x2\x32\x28E\x3\x2\x2\x2\x34\x29F\x3\x2\x2\x2\x36\x2AC\x3\x2"+
		"\x2\x2\x38\x2D0\x3\x2\x2\x2:\x2E0\x3\x2\x2\x2<\x32A\x3\x2\x2\x2>\x32C"+
		"\x3\x2\x2\x2@\x331\x3\x2\x2\x2\x42\x343\x3\x2\x2\x2\x44\x353\x3\x2\x2"+
		"\x2\x46\x363\x3\x2\x2\x2H\x36A\x3\x2\x2\x2J\x374\x3\x2\x2\x2L\x376\x3"+
		"\x2\x2\x2N\x382\x3\x2\x2\x2P\x3A0\x3\x2\x2\x2R\x3D4\x3\x2\x2\x2T\x3F6"+
		"\x3\x2\x2\x2V\x40C\x3\x2\x2\x2X\x410\x3\x2\x2\x2Z\x42D\x3\x2\x2\x2\\\x42F"+
		"\x3\x2\x2\x2^\x441\x3\x2\x2\x2`\x443\x3\x2\x2\x2\x62\x455\x3\x2\x2\x2"+
		"\x64\x463\x3\x2\x2\x2\x66\x467\x3\x2\x2\x2h\x476\x3\x2\x2\x2j\x47C\x3"+
		"\x2\x2\x2l\x488\x3\x2\x2\x2n\x494\x3\x2\x2\x2p\x498\x3\x2\x2\x2r\x4AB"+
		"\x3\x2\x2\x2t\x4B7\x3\x2\x2\x2v\x4C3\x3\x2\x2\x2x\x4D5\x3\x2\x2\x2z\x4E7"+
		"\x3\x2\x2\x2|\x4F5\x3\x2\x2\x2~\x503\x3\x2\x2\x2\x80\x507\x3\x2\x2\x2"+
		"\x82\x50F\x3\x2\x2\x2\x84\x519\x3\x2\x2\x2\x86\x52D\x3\x2\x2\x2\x88\x541"+
		"\x3\x2\x2\x2\x8A\x583\x3\x2\x2\x2\x8C\x596\x3\x2\x2\x2\x8E\x598\x3\x2"+
		"\x2\x2\x90\x5A8\x3\x2\x2\x2\x92\x5D0\x3\x2\x2\x2\x94\x5F1\x3\x2\x2\x2"+
		"\x96\x60F\x3\x2\x2\x2\x98\x625\x3\x2\x2\x2\x9A\x638\x3\x2\x2\x2\x9C\x63D"+
		"\x3\x2\x2\x2\x9E\x651\x3\x2\x2\x2\xA0\x662\x3\x2\x2\x2\xA2\x664\x3\x2"+
		"\x2\x2\xA4\x66C\x3\x2\x2\x2\xA6\x66E\x3\x2\x2\x2\xA8\x672\x3\x2\x2\x2"+
		"\xAA\x67E\x3\x2\x2\x2\xAC\x68A\x3\x2\x2\x2\xAE\x6A6\x3\x2\x2\x2\xB0\x6B2"+
		"\x3\x2\x2\x2\xB2\x6C7\x3\x2\x2\x2\xB4\x6F4\x3\x2\x2\x2\xB6\x707\x3\x2"+
		"\x2\x2\xB8\x709\x3\x2\x2\x2\xBA\x716\x3\x2\x2\x2\xBC\x722\x3\x2\x2\x2"+
		"\xBE\x72E\x3\x2\x2\x2\xC0\x733\x3\x2\x2\x2\xC2\x751\x3\x2\x2\x2\xC4\x75E"+
		"\x3\x2\x2\x2\xC6\x770\x3\x2\x2\x2\xC8\x78A\x3\x2\x2\x2\xCA\x793\x3\x2"+
		"\x2\x2\xCC\x797\x3\x2\x2\x2\xCE\x7E3\x3\x2\x2\x2\xD0\x889\x3\x2\x2\x2"+
		"\xD2\x892\x3\x2\x2\x2\xD4\x8A0\x3\x2\x2\x2\xD6\x8BB\x3\x2\x2\x2\xD8\x8D1"+
		"\x3\x2\x2\x2\xDA\x8DD\x3\x2\x2\x2\xDC\x8EF\x3\x2\x2\x2\xDE\x8FE\x3\x2"+
		"\x2\x2\xE0\x900\x3\x2\x2\x2\xE2\x915\x3\x2\x2\x2\xE4\x930\x3\x2\x2\x2"+
		"\xE6\x932\x3\x2\x2\x2\xE8\x938\x3\x2\x2\x2\xEA\x94A\x3\x2\x2\x2\xEC\x94C"+
		"\x3\x2\x2\x2\xEE\x955\x3\x2\x2\x2\xF0\x96D\x3\x2\x2\x2\xF2\x977\x3\x2"+
		"\x2\x2\xF4\x97C\x3\x2\x2\x2\xF6\x98A\x3\x2\x2\x2\xF8\x99F\x3\x2\x2\x2"+
		"\xFA\x9A3\x3\x2\x2\x2\xFC\x9A8\x3\x2\x2\x2\xFE\x9C3\x3\x2\x2\x2\x100\x9E5"+
		"\x3\x2\x2\x2\x102\x9ED\x3\x2\x2\x2\x104\xA00\x3\x2\x2\x2\x106\xA12\x3"+
		"\x2\x2\x2\x108\xA14\x3\x2\x2\x2\x10A\xA1F\x3\x2\x2\x2\x10C\xA30\x3\x2"+
		"\x2\x2\x10E\xA32\x3\x2\x2\x2\x110\xA34\x3\x2\x2\x2\x112\xA3C\x3\x2\x2"+
		"\x2\x114\xA44\x3\x2\x2\x2\x116\xA4F\x3\x2\x2\x2\x118\xA52\x3\x2\x2\x2"+
		"\x11A\xA54\x3\x2\x2\x2\x11C\xA56\x3\x2\x2\x2\x11E\xA5A\x3\x2\x2\x2\x120"+
		"\xA66\x3\x2\x2\x2\x122\xA68\x3\x2\x2\x2\x124\xA6A\x3\x2\x2\x2\x126\x127"+
		"\x5\x4\x3\x2\x127\x128\a\x2\x2\x3\x128\x3\x3\x2\x2\x2\x129\x12B\a\xD8"+
		"\x2\x2\x12A\x129\x3\x2\x2\x2\x12A\x12B\x3\x2\x2\x2\x12B\x12F\x3\x2\x2"+
		"\x2\x12C\x12E\a\xD6\x2\x2\x12D\x12C\x3\x2\x2\x2\x12E\x131\x3\x2\x2\x2"+
		"\x12F\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x138\x3\x2\x2\x2\x131"+
		"\x12F\x3\x2\x2\x2\x132\x134\x5\xE\b\x2\x133\x135\a\xD6\x2\x2\x134\x133"+
		"\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2\x136\x137\x3"+
		"\x2\x2\x2\x137\x139\x3\x2\x2\x2\x138\x132\x3\x2\x2\x2\x138\x139\x3\x2"+
		"\x2\x2\x139\x13B\x3\x2\x2\x2\x13A\x13C\x5\x6\x4\x2\x13B\x13A\x3\x2\x2"+
		"\x2\x13B\x13C\x3\x2\x2\x2\x13C\x140\x3\x2\x2\x2\x13D\x13F\a\xD6\x2\x2"+
		"\x13E\x13D\x3\x2\x2\x2\x13F\x142\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x140"+
		"\x141\x3\x2\x2\x2\x141\x144\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2\x143\x145"+
		"\x5\x10\t\x2\x144\x143\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x149\x3"+
		"\x2\x2\x2\x146\x148\a\xD6\x2\x2\x147\x146\x3\x2\x2\x2\x148\x14B\x3\x2"+
		"\x2\x2\x149\x147\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x14D\x3\x2\x2"+
		"\x2\x14B\x149\x3\x2\x2\x2\x14C\x14E\x5\x14\v\x2\x14D\x14C\x3\x2\x2\x2"+
		"\x14D\x14E\x3\x2\x2\x2\x14E\x152\x3\x2\x2\x2\x14F\x151\a\xD6\x2\x2\x150"+
		"\x14F\x3\x2\x2\x2\x151\x154\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x152\x153"+
		"\x3\x2\x2\x2\x153\x156\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x155\x157\x5"+
		"\x16\f\x2\x156\x155\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x15B\x3\x2"+
		"\x2\x2\x158\x15A\a\xD6\x2\x2\x159\x158\x3\x2\x2\x2\x15A\x15D\x3\x2\x2"+
		"\x2\x15B\x159\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15F\x3\x2\x2\x2"+
		"\x15D\x15B\x3\x2\x2\x2\x15E\x160\x5\x1A\xE\x2\x15F\x15E\x3\x2\x2\x2\x15F"+
		"\x160\x3\x2\x2\x2\x160\x164\x3\x2\x2\x2\x161\x163\a\xD6\x2\x2\x162\x161"+
		"\x3\x2\x2\x2\x163\x166\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x164\x165\x3"+
		"\x2\x2\x2\x165\x168\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x167\x169\a\xD8"+
		"\x2\x2\x168\x167\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x5\x3\x2\x2\x2"+
		"\x16A\x16C\x5\b\x5\x2\x16B\x16A\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D"+
		"\x16B\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\a\x3\x2\x2\x2\x16F\x171\a"+
		"n\x2\x2\x170\x172\a\xD8\x2\x2\x171\x170\x3\x2\x2\x2\x171\x172\x3\x2\x2"+
		"\x2\x172\x173\x3\x2\x2\x2\x173\x175\a\xBA\x2\x2\x174\x176\a\xD8\x2\x2"+
		"\x175\x174\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177"+
		"\x178\x5\n\x6\x2\x178\x17A\a\xCB\x2\x2\x179\x17B\a\xD8\x2\x2\x17A\x179"+
		"\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17C\x180\x5"+
		"\f\a\x2\x17D\x17F\a\xD6\x2\x2\x17E\x17D\x3\x2\x2\x2\x17F\x182\x3\x2\x2"+
		"\x2\x180\x17E\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\t\x3\x2\x2\x2\x182"+
		"\x180\x3\x2\x2\x2\x183\x184\a\xCE\x2\x2\x184\v\x3\x2\x2\x2\x185\x186\a"+
		"\xCE\x2\x2\x186\r\x3\x2\x2\x2\x187\x188\a\xAA\x2\x2\x188\x189\a\xD8\x2"+
		"\x2\x189\x18C\a\xD2\x2\x2\x18A\x18B\a\xD8\x2\x2\x18B\x18D\a\x16\x2\x2"+
		"\x18C\x18A\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D\xF\x3\x2\x2\x2\x18E"+
		"\x190\a\v\x2\x2\x18F\x191\a\xD6\x2\x2\x190\x18F\x3\x2\x2\x2\x191\x192"+
		"\x3\x2\x2\x2\x192\x190\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x195\x3"+
		"\x2\x2\x2\x194\x196\x5\x12\n\x2\x195\x194\x3\x2\x2\x2\x196\x197\x3\x2"+
		"\x2\x2\x197\x195\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x198\x199\x3\x2\x2"+
		"\x2\x199\x19B\a\x37\x2\x2\x19A\x19C\a\xD6\x2\x2\x19B\x19A\x3\x2\x2\x2"+
		"\x19C\x19D\x3\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E"+
		"\x11\x3\x2\x2\x2\x19F\x1A1\x5\x106\x84\x2\x1A0\x1A2\a\xD8\x2\x2\x1A1\x1A0"+
		"\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x1A5\a\xBA"+
		"\x2\x2\x1A4\x1A6\a\xD8\x2\x2\x1A5\x1A4\x3\x2\x2\x2\x1A5\x1A6\x3\x2\x2"+
		"\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7\x1A8\x5\x118\x8D\x2\x1A8\x1A9\a\xD6\x2"+
		"\x2\x1A9\x13\x3\x2\x2\x2\x1AA\x1AC\x5 \x11\x2\x1AB\x1AD\a\xD6\x2\x2\x1AC"+
		"\x1AB\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AF"+
		"\x3\x2\x2\x2\x1AF\x1B1\x3\x2\x2\x2\x1B0\x1AA\x3\x2\x2\x2\x1B1\x1B2\x3"+
		"\x2\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x15\x3\x2\x2"+
		"\x2\x1B4\x1B6\x5\x18\r\x2\x1B5\x1B7\a\xD6\x2\x2\x1B6\x1B5\x3\x2\x2\x2"+
		"\x1B7\x1B8\x3\x2\x2\x2\x1B8\x1B6\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9"+
		"\x1BB\x3\x2\x2\x2\x1BA\x1B4\x3\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BA"+
		"\x3\x2\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BD\x17\x3\x2\x2\x2\x1BE\x1BF\at\x2"+
		"\x2\x1BF\x1C0\a\xD8\x2\x2\x1C0\x1C7\a\xD1\x2\x2\x1C1\x1C2\av\x2\x2\x1C2"+
		"\x1C3\a\xD8\x2\x2\x1C3\x1C7\t\x2\x2\x2\x1C4\x1C7\au\x2\x2\x1C5\x1C7\a"+
		"w\x2\x2\x1C6\x1BE\x3\x2\x2\x2\x1C6\x1C1\x3\x2\x2\x2\x1C6\x1C4\x3\x2\x2"+
		"\x2\x1C6\x1C5\x3\x2\x2\x2\x1C7\x19\x3\x2\x2\x2\x1C8\x1D1\x5\x1C\xF\x2"+
		"\x1C9\x1CB\a\xD6\x2\x2\x1CA\x1C9\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC"+
		"\x1CA\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1D0"+
		"\x5\x1C\xF\x2\x1CF\x1CA\x3\x2\x2\x2\x1D0\x1D3\x3\x2\x2\x2\x1D1\x1CF\x3"+
		"\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2\x1B\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2"+
		"\x2\x1D4\x1E1\x5\x1E\x10\x2\x1D5\x1E1\x5\x18\r\x2\x1D6\x1E1\x5\x36\x1C"+
		"\x2\x1D7\x1E1\x5@!\x2\x1D8\x1E1\x5H%\x2\x1D9\x1E1\x5R*\x2\x1DA\x1E1\x5"+
		"t;\x2\x1DB\x1E1\x5\x90I\x2\x1DC\x1E1\x5\x92J\x2\x1DD\x1E1\x5\x94K\x2\x1DE"+
		"\x1E1\x5\xC0\x61\x2\x1DF\x1E1\x5\xC4\x63\x2\x1E0\x1D4\x3\x2\x2\x2\x1E0"+
		"\x1D5\x3\x2\x2\x2\x1E0\x1D6\x3\x2\x2\x2\x1E0\x1D7\x3\x2\x2\x2\x1E0\x1D8"+
		"\x3\x2\x2\x2\x1E0\x1D9\x3\x2\x2\x2\x1E0\x1DA\x3\x2\x2\x2\x1E0\x1DB\x3"+
		"\x2\x2\x2\x1E0\x1DC\x3\x2\x2\x2\x1E0\x1DD\x3\x2\x2\x2\x1E0\x1DE\x3\x2"+
		"\x2\x2\x1E0\x1DF\x3\x2\x2\x2\x1E1\x1D\x3\x2\x2\x2\x1E2\x1E3\x5\"\x12\x2"+
		"\x1E3\x1F\x3\x2\x2\x2\x1E4\x1E5\a\a\x2\x2\x1E5\x1E6\a\xD8\x2\x2\x1E6\x1E8"+
		"\x5\xEAv\x2\x1E7\x1E9\a\xD8\x2\x2\x1E8\x1E7\x3\x2\x2\x2\x1E8\x1E9\x3\x2"+
		"\x2\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA\x1EC\a\xBA\x2\x2\x1EB\x1ED\a\xD8\x2"+
		"\x2\x1EC\x1EB\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1EE\x3\x2\x2\x2"+
		"\x1EE\x1F9\x5\x118\x8D\x2\x1EF\x1F1\a\xD8\x2\x2\x1F0\x1EF\x3\x2\x2\x2"+
		"\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F2\x3\x2\x2\x2\x1F2\x1F4\a\xB6\x2\x2\x1F3"+
		"\x1F5\a\xD8\x2\x2\x1F4\x1F3\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5\x1F6"+
		"\x3\x2\x2\x2\x1F6\x1F8\x5\x118\x8D\x2\x1F7\x1F0\x3\x2\x2\x2\x1F8\x1FB"+
		"\x3\x2\x2\x2\x1F9\x1F7\x3\x2\x2\x2\x1F9\x1FA\x3\x2\x2\x2\x1FA!\x3\x2\x2"+
		"\x2\x1FB\x1F9\x3\x2\x2\x2\x1FC\x208\x5$\x13\x2\x1FD\x1FF\a\xD6\x2\x2\x1FE"+
		"\x1FD\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200\x1FE\x3\x2\x2\x2\x200\x201"+
		"\x3\x2\x2\x2\x201\x203\x3\x2\x2\x2\x202\x204\a\xD8\x2\x2\x203\x202\x3"+
		"\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204\x205\x3\x2\x2\x2\x205\x207\x5$\x13"+
		"\x2\x206\x1FE\x3\x2\x2\x2\x207\x20A\x3\x2\x2\x2\x208\x206\x3\x2\x2\x2"+
		"\x208\x209\x3\x2\x2\x2\x209#\x3\x2\x2\x2\x20A\x208\x3\x2\x2\x2\x20B\x24F"+
		"\x5&\x14\x2\x20C\x24F\x5 \x11\x2\x20D\x24F\x5(\x15\x2\x20E\x24F\x5*\x16"+
		"\x2\x20F\x24F\x5,\x17\x2\x210\x24F\x5.\x18\x2\x211\x24F\x5\x30\x19\x2"+
		"\x212\x24F\x5\x34\x1B\x2\x213\x24F\x5:\x1E\x2\x214\x24F\x5\x38\x1D\x2"+
		"\x215\x24F\x5<\x1F\x2\x216\x24F\x5> \x2\x217\x24F\x5\x44#\x2\x218\x24F"+
		"\x5\x46$\x2\x219\x24F\x5J&\x2\x21A\x24F\x5\xDEp\x2\x21B\x24F\x5L\'\x2"+
		"\x21C\x24F\x5N(\x2\x21D\x24F\x5P)\x2\x21E\x24F\x5T+\x2\x21F\x24F\x5V,"+
		"\x2\x220\x24F\x5X-\x2\x221\x24F\x5Z.\x2\x222\x24F\x5\x64\x33\x2\x223\x24F"+
		"\x5\x66\x34\x2\x224\x24F\x5h\x35\x2\x225\x24F\x5j\x36\x2\x226\x24F\x5"+
		"l\x37\x2\x227\x24F\x5\x116\x8C\x2\x228\x24F\x5n\x38\x2\x229\x24F\x5p\x39"+
		"\x2\x22A\x24F\x5r:\x2\x22B\x24F\x5t;\x2\x22C\x24F\x5|?\x2\x22D\x24F\x5"+
		"~@\x2\x22E\x24F\x5\x80\x41\x2\x22F\x24F\x5\x82\x42\x2\x230\x24F\x5\x84"+
		"\x43\x2\x231\x24F\x5\x86\x44\x2\x232\x24F\x5\x88\x45\x2\x233\x24F\x5\x8E"+
		"H\x2\x234\x24F\x5\x96L\x2\x235\x24F\x5\x98M\x2\x236\x24F\x5\x9AN\x2\x237"+
		"\x24F\x5\x9CO\x2\x238\x24F\x5\xA0Q\x2\x239\x24F\x5\xA2R\x2\x23A\x24F\x5"+
		"\xA4S\x2\x23B\x24F\x5\xA6T\x2\x23C\x24F\x5\xA8U\x2\x23D\x24F\x5\xAAV\x2"+
		"\x23E\x24F\x5\xACW\x2\x23F\x24F\x5\xAEX\x2\x240\x24F\x5\xB0Y\x2\x241\x24F"+
		"\x5\xB8]\x2\x242\x24F\x5\xBA^\x2\x243\x24F\x5\xBC_\x2\x244\x24F\x5\xBE"+
		"`\x2\x245\x24F\x5\xC2\x62\x2\x246\x24F\x5\xCA\x66\x2\x247\x24F\x5\xCC"+
		"g\x2\x248\x24F\x5\xD0i\x2\x249\x24F\x5\xD6l\x2\x24A\x24F\x5\xD8m\x2\x24B"+
		"\x24F\x5\xDAn\x2\x24C\x24F\x5\xDCo\x2\x24D\x24F\x5\xE4s\x2\x24E\x20B\x3"+
		"\x2\x2\x2\x24E\x20C\x3\x2\x2\x2\x24E\x20D\x3\x2\x2\x2\x24E\x20E\x3\x2"+
		"\x2\x2\x24E\x20F\x3\x2\x2\x2\x24E\x210\x3\x2\x2\x2\x24E\x211\x3\x2\x2"+
		"\x2\x24E\x212\x3\x2\x2\x2\x24E\x213\x3\x2\x2\x2\x24E\x214\x3\x2\x2\x2"+
		"\x24E\x215\x3\x2\x2\x2\x24E\x216\x3\x2\x2\x2\x24E\x217\x3\x2\x2\x2\x24E"+
		"\x218\x3\x2\x2\x2\x24E\x219\x3\x2\x2\x2\x24E\x21A\x3\x2\x2\x2\x24E\x21B"+
		"\x3\x2\x2\x2\x24E\x21C\x3\x2\x2\x2\x24E\x21D\x3\x2\x2\x2\x24E\x21E\x3"+
		"\x2\x2\x2\x24E\x21F\x3\x2\x2\x2\x24E\x220\x3\x2\x2\x2\x24E\x221\x3\x2"+
		"\x2\x2\x24E\x222\x3\x2\x2\x2\x24E\x223\x3\x2\x2\x2\x24E\x224\x3\x2\x2"+
		"\x2\x24E\x225\x3\x2\x2\x2\x24E\x226\x3\x2\x2\x2\x24E\x227\x3\x2\x2\x2"+
		"\x24E\x228\x3\x2\x2\x2\x24E\x229\x3\x2\x2\x2\x24E\x22A\x3\x2\x2\x2\x24E"+
		"\x22B\x3\x2\x2\x2\x24E\x22C\x3\x2\x2\x2\x24E\x22D\x3\x2\x2\x2\x24E\x22E"+
		"\x3\x2\x2\x2\x24E\x22F\x3\x2\x2\x2\x24E\x230\x3\x2\x2\x2\x24E\x231\x3"+
		"\x2\x2\x2\x24E\x232\x3\x2\x2\x2\x24E\x233\x3\x2\x2\x2\x24E\x234\x3\x2"+
		"\x2\x2\x24E\x235\x3\x2\x2\x2\x24E\x236\x3\x2\x2\x2\x24E\x237\x3\x2\x2"+
		"\x2\x24E\x238\x3\x2\x2\x2\x24E\x239\x3\x2\x2\x2\x24E\x23A\x3\x2\x2\x2"+
		"\x24E\x23B\x3\x2\x2\x2\x24E\x23C\x3\x2\x2\x2\x24E\x23D\x3\x2\x2\x2\x24E"+
		"\x23E\x3\x2\x2\x2\x24E\x23F\x3\x2\x2\x2\x24E\x240\x3\x2\x2\x2\x24E\x241"+
		"\x3\x2\x2\x2\x24E\x242\x3\x2\x2\x2\x24E\x243\x3\x2\x2\x2\x24E\x244\x3"+
		"\x2\x2\x2\x24E\x245\x3\x2\x2\x2\x24E\x246\x3\x2\x2\x2\x24E\x247\x3\x2"+
		"\x2\x2\x24E\x248\x3\x2\x2\x2\x24E\x249\x3\x2\x2\x2\x24E\x24A\x3\x2\x2"+
		"\x2\x24E\x24B\x3\x2\x2\x2\x24E\x24C\x3\x2\x2\x2\x24E\x24D\x3\x2\x2\x2"+
		"\x24F%\x3\x2\x2\x2\x250\x251\a\b\x2\x2\x251\x252\a\xD8\x2\x2\x252\x25B"+
		"\x5\xCEh\x2\x253\x255\a\xD8\x2\x2\x254\x253\x3\x2\x2\x2\x254\x255\x3\x2"+
		"\x2\x2\x255\x256\x3\x2\x2\x2\x256\x258\a\xB6\x2\x2\x257\x259\a\xD8\x2"+
		"\x2\x258\x257\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2"+
		"\x25A\x25C\x5\xCEh\x2\x25B\x254\x3\x2\x2\x2\x25B\x25C\x3\x2\x2\x2\x25C"+
		"\'\x3\x2\x2\x2\x25D\x25E\a\f\x2\x2\x25E)\x3\x2\x2\x2\x25F\x260\a\x14\x2"+
		"\x2\x260\x261\a\xD8\x2\x2\x261\x262\x5\xCEh\x2\x262+\x3\x2\x2\x2\x263"+
		"\x264\a\x15\x2\x2\x264\x265\a\xD8\x2\x2\x265\x266\x5\xCEh\x2\x266-\x3"+
		"\x2\x2\x2\x267\x277\a\x17\x2\x2\x268\x269\a\xD8\x2\x2\x269\x274\x5\xCE"+
		"h\x2\x26A\x26C\a\xD8\x2\x2\x26B\x26A\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2"+
		"\x26C\x26D\x3\x2\x2\x2\x26D\x26F\a\xB6\x2\x2\x26E\x270\a\xD8\x2\x2\x26F"+
		"\x26E\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x271\x3\x2\x2\x2\x271\x273"+
		"\x5\xCEh\x2\x272\x26B\x3\x2\x2\x2\x273\x276\x3\x2\x2\x2\x274\x272\x3\x2"+
		"\x2\x2\x274\x275\x3\x2\x2\x2\x275\x278\x3\x2\x2\x2\x276\x274\x3\x2\x2"+
		"\x2\x277\x268\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278/\x3\x2\x2\x2\x279"+
		"\x27A\x5\x11C\x8F\x2\x27A\x27B\a\xD8\x2\x2\x27B\x27D\x3\x2\x2\x2\x27C"+
		"\x279\x3\x2\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2\x27E\x27F"+
		"\a\x19\x2\x2\x27F\x280\a\xD8\x2\x2\x280\x28B\x5\x32\x1A\x2\x281\x283\a"+
		"\xD8\x2\x2\x282\x281\x3\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x284\x3\x2"+
		"\x2\x2\x284\x286\a\xB6\x2\x2\x285\x287\a\xD8\x2\x2\x286\x285\x3\x2\x2"+
		"\x2\x286\x287\x3\x2\x2\x2\x287\x288\x3\x2\x2\x2\x288\x28A\x5\x32\x1A\x2"+
		"\x289\x282\x3\x2\x2\x2\x28A\x28D\x3\x2\x2\x2\x28B\x289\x3\x2\x2\x2\x28B"+
		"\x28C\x3\x2\x2\x2\x28C\x31\x3\x2\x2\x2\x28D\x28B\x3\x2\x2\x2\x28E\x290"+
		"\x5\x106\x84\x2\x28F\x291\x5\x120\x91\x2\x290\x28F\x3\x2\x2\x2\x290\x291"+
		"\x3\x2\x2\x2\x291\x294\x3\x2\x2\x2\x292\x293\a\xD8\x2\x2\x293\x295\x5"+
		"\x108\x85\x2\x294\x292\x3\x2\x2\x2\x294\x295\x3\x2\x2\x2\x295\x297\x3"+
		"\x2\x2\x2\x296\x298\a\xD8\x2\x2\x297\x296\x3\x2\x2\x2\x297\x298\x3\x2"+
		"\x2\x2\x298\x299\x3\x2\x2\x2\x299\x29B\a\xBA\x2\x2\x29A\x29C\a\xD8\x2"+
		"\x2\x29B\x29A\x3\x2\x2\x2\x29B\x29C\x3\x2\x2\x2\x29C\x29D\x3\x2\x2\x2"+
		"\x29D\x29E\x5\xCEh\x2\x29E\x33\x3\x2\x2\x2\x29F\x2A1\a\x1A\x2\x2\x2A0"+
		"\x2A2\a\xD8\x2\x2\x2A1\x2A0\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2A3"+
		"\x3\x2\x2\x2\x2A3\x2A5\a\xBA\x2\x2\x2A4\x2A6\a\xD8\x2\x2\x2A5\x2A4\x3"+
		"\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A8\x5\xCE"+
		"h\x2\x2A8\x35\x3\x2\x2\x2\x2A9\x2AA\x5\x122\x92\x2\x2AA\x2AB\a\xD8\x2"+
		"\x2\x2AB\x2AD\x3\x2\x2\x2\x2AC\x2A9\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2\x2"+
		"\x2AD\x2AE\x3\x2\x2\x2\x2AE\x2AF\a\x1B\x2\x2\x2AF\x2B5\a\xD8\x2\x2\x2B0"+
		"\x2B2\a\x46\x2\x2\x2B1\x2B3\x5\x120\x91\x2\x2B2\x2B1\x3\x2\x2\x2\x2B2"+
		"\x2B3\x3\x2\x2\x2\x2B3\x2B6\x3\x2\x2\x2\x2B4\x2B6\a\x9D\x2\x2\x2B5\x2B0"+
		"\x3\x2\x2\x2\x2B5\x2B4\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x2B8\a\xD8"+
		"\x2\x2\x2B8\x2BA\x5\x106\x84\x2\x2B9\x2BB\x5\x120\x91\x2\x2BA\x2B9\x3"+
		"\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2\x2BC\x2BD\a\xD8"+
		"\x2\x2\x2BD\x2BE\aY\x2\x2\x2BE\x2BF\a\xD8\x2\x2\x2BF\x2C4\a\xCE\x2\x2"+
		"\x2C0\x2C1\a\xD8\x2\x2\x2C1\x2C2\a\x5\x2\x2\x2C2\x2C3\a\xD8\x2\x2\x2C3"+
		"\x2C5\a\xCE\x2\x2\x2C4\x2C0\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2CA"+
		"\x3\x2\x2\x2\x2C6\x2C8\a\xD8\x2\x2\x2C7\x2C6\x3\x2\x2\x2\x2C7\x2C8\x3"+
		"\x2\x2\x2\x2C8\x2C9\x3\x2\x2\x2\x2C9\x2CB\x5\xFC\x7F\x2\x2CA\x2C7\x3\x2"+
		"\x2\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB\x2CE\x3\x2\x2\x2\x2CC\x2CD\a\xD8\x2"+
		"\x2\x2CD\x2CF\x5\x108\x85\x2\x2CE\x2CC\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2"+
		"\x2\x2CF\x37\x3\x2\x2\x2\x2D0\x2D1\t\x3\x2\x2\x2D1\x2D2\a\xD8\x2\x2\x2D2"+
		"\x2DD\x5\x114\x8B\x2\x2D3\x2D5\a\xD8\x2\x2\x2D4\x2D3\x3\x2\x2\x2\x2D4"+
		"\x2D5\x3\x2\x2\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2D8\a\xB6\x2\x2\x2D7\x2D9"+
		"\a\xD8\x2\x2\x2D8\x2D7\x3\x2\x2\x2\x2D8\x2D9\x3\x2\x2\x2\x2D9\x2DA\x3"+
		"\x2\x2\x2\x2DA\x2DC\x5\x114\x8B\x2\x2DB\x2D4\x3\x2\x2\x2\x2DC\x2DF\x3"+
		"\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2\x2DE\x39\x3\x2\x2"+
		"\x2\x2DF\x2DD\x3\x2\x2\x2\x2E0\x2E1\a(\x2\x2\x2E1\x2E2\a\xD8\x2\x2\x2E2"+
		"\x2E4\x5\xCEh\x2\x2E3\x2E5\a\xD8\x2\x2\x2E4\x2E3\x3\x2\x2\x2\x2E4\x2E5"+
		"\x3\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E8\a\xB6\x2\x2\x2E7\x2E9\a\xD8"+
		"\x2\x2\x2E8\x2E7\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2\x2E9\x2EA\x3\x2\x2"+
		"\x2\x2EA\x2F3\x5\xCEh\x2\x2EB\x2ED\a\xD8\x2\x2\x2EC\x2EB\x3\x2\x2\x2\x2EC"+
		"\x2ED\x3\x2\x2\x2\x2ED\x2EE\x3\x2\x2\x2\x2EE\x2F0\a\xB6\x2\x2\x2EF\x2F1"+
		"\a\xD8\x2\x2\x2F0\x2EF\x3\x2\x2\x2\x2F0\x2F1\x3\x2\x2\x2\x2F1\x2F2\x3"+
		"\x2\x2\x2\x2F2\x2F4\x5\xCEh\x2\x2F3\x2EC\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2"+
		"\x2\x2F4;\x3\x2\x2\x2\x2F5\x2F7\a*\x2\x2\x2F6\x2F8\a\xD6\x2\x2\x2F7\x2F6"+
		"\x3\x2\x2\x2\x2F8\x2F9\x3\x2\x2\x2\x2F9\x2F7\x3\x2\x2\x2\x2F9\x2FA\x3"+
		"\x2\x2\x2\x2FA\x301\x3\x2\x2\x2\x2FB\x2FD\x5\"\x12\x2\x2FC\x2FE\a\xD6"+
		"\x2\x2\x2FD\x2FC\x3\x2\x2\x2\x2FE\x2FF\x3\x2\x2\x2\x2FF\x2FD\x3\x2\x2"+
		"\x2\x2FF\x300\x3\x2\x2\x2\x300\x302\x3\x2\x2\x2\x301\x2FB\x3\x2\x2\x2"+
		"\x301\x302\x3\x2\x2\x2\x302\x303\x3\x2\x2\x2\x303\x32B\aV\x2\x2\x304\x305"+
		"\a*\x2\x2\x305\x306\a\xD8\x2\x2\x306\x307\t\x4\x2\x2\x307\x308\a\xD8\x2"+
		"\x2\x308\x30A\x5\xCEh\x2\x309\x30B\a\xD6\x2\x2\x30A\x309\x3\x2\x2\x2\x30B"+
		"\x30C\x3\x2\x2\x2\x30C\x30A\x3\x2\x2\x2\x30C\x30D\x3\x2\x2\x2\x30D\x314"+
		"\x3\x2\x2\x2\x30E\x310\x5\"\x12\x2\x30F\x311\a\xD6\x2\x2\x310\x30F\x3"+
		"\x2\x2\x2\x311\x312\x3\x2\x2\x2\x312\x310\x3\x2\x2\x2\x312\x313\x3\x2"+
		"\x2\x2\x313\x315\x3\x2\x2\x2\x314\x30E\x3\x2\x2\x2\x314\x315\x3\x2\x2"+
		"\x2\x315\x316\x3\x2\x2\x2\x316\x317\aV\x2\x2\x317\x32B\x3\x2\x2\x2\x318"+
		"\x31A\a*\x2\x2\x319\x31B\a\xD6\x2\x2\x31A\x319\x3\x2\x2\x2\x31B\x31C\x3"+
		"\x2\x2\x2\x31C\x31A\x3\x2\x2\x2\x31C\x31D\x3\x2\x2\x2\x31D\x31E\x3\x2"+
		"\x2\x2\x31E\x320\x5\"\x12\x2\x31F\x321\a\xD6\x2\x2\x320\x31F\x3\x2\x2"+
		"\x2\x321\x322\x3\x2\x2\x2\x322\x320\x3\x2\x2\x2\x322\x323\x3\x2\x2\x2"+
		"\x323\x324\x3\x2\x2\x2\x324\x325\aV\x2\x2\x325\x326\a\xD8\x2\x2\x326\x327"+
		"\t\x4\x2\x2\x327\x328\a\xD8\x2\x2\x328\x329\x5\xCEh\x2\x329\x32B\x3\x2"+
		"\x2\x2\x32A\x2F5\x3\x2\x2\x2\x32A\x304\x3\x2\x2\x2\x32A\x318\x3\x2\x2"+
		"\x2\x32B=\x3\x2\x2\x2\x32C\x32D\a\x37\x2\x2\x32D?\x3\x2\x2\x2\x32E\x32F"+
		"\x5\x11A\x8E\x2\x32F\x330\a\xD8\x2\x2\x330\x332\x3\x2\x2\x2\x331\x32E"+
		"\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x333\x3\x2\x2\x2\x333\x334\a\x38"+
		"\x2\x2\x334\x335\a\xD8\x2\x2\x335\x337\x5\x106\x84\x2\x336\x338\a\xD6"+
		"\x2\x2\x337\x336\x3\x2\x2\x2\x338\x339\x3\x2\x2\x2\x339\x337\x3\x2\x2"+
		"\x2\x339\x33A\x3\x2\x2\x2\x33A\x33E\x3\x2\x2\x2\x33B\x33D\x5\x42\"\x2"+
		"\x33C\x33B\x3\x2\x2\x2\x33D\x340\x3\x2\x2\x2\x33E\x33C\x3\x2\x2\x2\x33E"+
		"\x33F\x3\x2\x2\x2\x33F\x341\x3\x2\x2\x2\x340\x33E\x3\x2\x2\x2\x341\x342"+
		"\a/\x2\x2\x342\x41\x3\x2\x2\x2\x343\x34C\x5\x106\x84\x2\x344\x346\a\xD8"+
		"\x2\x2\x345\x344\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346\x347\x3\x2\x2"+
		"\x2\x347\x349\a\xBA\x2\x2\x348\x34A\a\xD8\x2\x2\x349\x348\x3\x2\x2\x2"+
		"\x349\x34A\x3\x2\x2\x2\x34A\x34B\x3\x2\x2\x2\x34B\x34D\x5\xCEh\x2\x34C"+
		"\x345\x3\x2\x2\x2\x34C\x34D\x3\x2\x2\x2\x34D\x34F\x3\x2\x2\x2\x34E\x350"+
		"\a\xD6\x2\x2\x34F\x34E\x3\x2\x2\x2\x350\x351\x3\x2\x2\x2\x351\x34F\x3"+
		"\x2\x2\x2\x351\x352\x3\x2\x2\x2\x352\x43\x3\x2\x2\x2\x353\x354\a:\x2\x2"+
		"\x354\x355\a\xD8\x2\x2\x355\x360\x5\xCEh\x2\x356\x358\a\xD8\x2\x2\x357"+
		"\x356\x3\x2\x2\x2\x357\x358\x3\x2\x2\x2\x358\x359\x3\x2\x2\x2\x359\x35B"+
		"\a\xB6\x2\x2\x35A\x35C\a\xD8\x2\x2\x35B\x35A\x3\x2\x2\x2\x35B\x35C\x3"+
		"\x2\x2\x2\x35C\x35D\x3\x2\x2\x2\x35D\x35F\x5\xCEh\x2\x35E\x357\x3\x2\x2"+
		"\x2\x35F\x362\x3\x2\x2\x2\x360\x35E\x3\x2\x2\x2\x360\x361\x3\x2\x2\x2"+
		"\x361\x45\x3\x2\x2\x2\x362\x360\x3\x2\x2\x2\x363\x364\a;\x2\x2\x364\x365"+
		"\a\xD8\x2\x2\x365\x366\x5\xCEh\x2\x366G\x3\x2\x2\x2\x367\x368\x5\x122"+
		"\x92\x2\x368\x369\a\xD8\x2\x2\x369\x36B\x3\x2\x2\x2\x36A\x367\x3\x2\x2"+
		"\x2\x36A\x36B\x3\x2\x2\x2\x36B\x36C\x3\x2\x2\x2\x36C\x36D\a<\x2\x2\x36D"+
		"\x36E\a\xD8\x2\x2\x36E\x370\x5\x106\x84\x2\x36F\x371\a\xD8\x2\x2\x370"+
		"\x36F\x3\x2\x2\x2\x370\x371\x3\x2\x2\x2\x371\x372\x3\x2\x2\x2\x372\x373"+
		"\x5\xFC\x7F\x2\x373I\x3\x2\x2\x2\x374\x375\t\x5\x2\x2\x375K\x3\x2\x2\x2"+
		"\x376\x377\a\x43\x2\x2\x377\x378\a\xD8\x2\x2\x378\x37A\x5\xCEh\x2\x379"+
		"\x37B\a\xD8\x2\x2\x37A\x379\x3\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37C"+
		"\x3\x2\x2\x2\x37C\x37E\a\xB6\x2\x2\x37D\x37F\a\xD8\x2\x2\x37E\x37D\x3"+
		"\x2\x2\x2\x37E\x37F\x3\x2\x2\x2\x37F\x380\x3\x2\x2\x2\x380\x381\x5\xCE"+
		"h\x2\x381M\x3\x2\x2\x2\x382\x383\a\x45\x2\x2\x383\x384\a\xD8\x2\x2\x384"+
		"\x385\a,\x2\x2\x385\x386\a\xD8\x2\x2\x386\x388\x5\x106\x84\x2\x387\x389"+
		"\x5\x120\x91\x2\x388\x387\x3\x2\x2\x2\x388\x389\x3\x2\x2\x2\x389\x38A"+
		"\x3\x2\x2\x2\x38A\x38B\a\xD8\x2\x2\x38B\x38C\aN\x2\x2\x38C\x38D\a\xD8"+
		"\x2\x2\x38D\x38F\x5\xCEh\x2\x38E\x390\a\xD6\x2\x2\x38F\x38E\x3\x2\x2\x2"+
		"\x390\x391\x3\x2\x2\x2\x391\x38F\x3\x2\x2\x2\x391\x392\x3\x2\x2\x2\x392"+
		"\x399\x3\x2\x2\x2\x393\x395\x5\"\x12\x2\x394\x396\a\xD6\x2\x2\x395\x394"+
		"\x3\x2\x2\x2\x396\x397\x3\x2\x2\x2\x397\x395\x3\x2\x2\x2\x397\x398\x3"+
		"\x2\x2\x2\x398\x39A\x3\x2\x2\x2\x399\x393\x3\x2\x2\x2\x399\x39A\x3\x2"+
		"\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x39E\ai\x2\x2\x39C\x39D\a\xD8\x2\x2"+
		"\x39D\x39F\x5\x106\x84\x2\x39E\x39C\x3\x2\x2\x2\x39E\x39F\x3\x2\x2\x2"+
		"\x39FO\x3\x2\x2\x2\x3A0\x3A1\a\x45\x2\x2\x3A1\x3A2\a\xD8\x2\x2\x3A2\x3A4"+
		"\x5\x106\x84\x2\x3A3\x3A5\x5\x120\x91\x2\x3A4\x3A3\x3\x2\x2\x2\x3A4\x3A5"+
		"\x3\x2\x2\x2\x3A5\x3A8\x3\x2\x2\x2\x3A6\x3A7\a\xD8\x2\x2\x3A7\x3A9\x5"+
		"\x108\x85\x2\x3A8\x3A6\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9\x3AB\x3"+
		"\x2\x2\x2\x3AA\x3AC\a\xD8\x2\x2\x3AB\x3AA\x3\x2\x2\x2\x3AB\x3AC\x3\x2"+
		"\x2\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3AF\a\xBA\x2\x2\x3AE\x3B0\a\xD8\x2"+
		"\x2\x3AF\x3AE\x3\x2\x2\x2\x3AF\x3B0\x3\x2\x2\x2\x3B0\x3B1\x3\x2\x2\x2"+
		"\x3B1\x3B2\x5\xCEh\x2\x3B2\x3B3\a\xD8\x2\x2\x3B3\x3B4\a\xA2\x2\x2\x3B4"+
		"\x3B5\a\xD8\x2\x2\x3B5\x3BA\x5\xCEh\x2\x3B6\x3B7\a\xD8\x2\x2\x3B7\x3B8"+
		"\a\x9A\x2\x2\x3B8\x3B9\a\xD8\x2\x2\x3B9\x3BB\x5\xCEh\x2\x3BA\x3B6\x3\x2"+
		"\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB\x3BD\x3\x2\x2\x2\x3BC\x3BE\a\xD6\x2"+
		"\x2\x3BD\x3BC\x3\x2\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3BD\x3\x2\x2\x2"+
		"\x3BF\x3C0\x3\x2\x2\x2\x3C0\x3C7\x3\x2\x2\x2\x3C1\x3C3\x5\"\x12\x2\x3C2"+
		"\x3C4\a\xD6\x2\x2\x3C3\x3C2\x3\x2\x2\x2\x3C4\x3C5\x3\x2\x2\x2\x3C5\x3C3"+
		"\x3\x2\x2\x2\x3C5\x3C6\x3\x2\x2\x2\x3C6\x3C8\x3\x2\x2\x2\x3C7\x3C1\x3"+
		"\x2\x2\x2\x3C7\x3C8\x3\x2\x2\x2\x3C8\x3C9\x3\x2\x2\x2\x3C9\x3CF\ai\x2"+
		"\x2\x3CA\x3CB\a\xD8\x2\x2\x3CB\x3CD\x5\x106\x84\x2\x3CC\x3CE\x5\x120\x91"+
		"\x2\x3CD\x3CC\x3\x2\x2\x2\x3CD\x3CE\x3\x2\x2\x2\x3CE\x3D0\x3\x2\x2\x2"+
		"\x3CF\x3CA\x3\x2\x2\x2\x3CF\x3D0\x3\x2\x2\x2\x3D0Q\x3\x2\x2\x2\x3D1\x3D2"+
		"\x5\x122\x92\x2\x3D2\x3D3\a\xD8\x2\x2\x3D3\x3D5\x3\x2\x2\x2\x3D4\x3D1"+
		"\x3\x2\x2\x2\x3D4\x3D5\x3\x2\x2\x2\x3D5\x3D8\x3\x2\x2\x2\x3D6\x3D7\a\x99"+
		"\x2\x2\x3D7\x3D9\a\xD8\x2\x2\x3D8\x3D6\x3\x2\x2\x2\x3D8\x3D9\x3\x2\x2"+
		"\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DB\a\x46\x2\x2\x3DB\x3DC\a\xD8\x2\x2"+
		"\x3DC\x3E1\x5\x106\x84\x2\x3DD\x3DF\a\xD8\x2\x2\x3DE\x3DD\x3\x2\x2\x2"+
		"\x3DE\x3DF\x3\x2\x2\x2\x3DF\x3E0\x3\x2\x2\x2\x3E0\x3E2\x5\xFC\x7F\x2\x3E1"+
		"\x3DE\x3\x2\x2\x2\x3E1\x3E2\x3\x2\x2\x2\x3E2\x3E5\x3\x2\x2\x2\x3E3\x3E4"+
		"\a\xD8\x2\x2\x3E4\x3E6\x5\x108\x85\x2\x3E5\x3E3\x3\x2\x2\x2\x3E5\x3E6"+
		"\x3\x2\x2\x2\x3E6\x3E8\x3\x2\x2\x2\x3E7\x3E9\a\xD6\x2\x2\x3E8\x3E7\x3"+
		"\x2\x2\x2\x3E9\x3EA\x3\x2\x2\x2\x3EA\x3E8\x3\x2\x2\x2\x3EA\x3EB\x3\x2"+
		"\x2\x2\x3EB\x3F2\x3\x2\x2\x2\x3EC\x3EE\x5\"\x12\x2\x3ED\x3EF\a\xD6\x2"+
		"\x2\x3EE\x3ED\x3\x2\x2\x2\x3EF\x3F0\x3\x2\x2\x2\x3F0\x3EE\x3\x2\x2\x2"+
		"\x3F0\x3F1\x3\x2\x2\x2\x3F1\x3F3\x3\x2\x2\x2\x3F2\x3EC\x3\x2\x2\x2\x3F2"+
		"\x3F3\x3\x2\x2\x2\x3F3\x3F4\x3\x2\x2\x2\x3F4\x3F5\a\x30\x2\x2\x3F5S\x3"+
		"\x2\x2\x2\x3F6\x3F7\aG\x2\x2\x3F7\x3F8\a\xD8\x2\x2\x3F8\x3FA\x5\xCEh\x2"+
		"\x3F9\x3FB\a\xD8\x2\x2\x3FA\x3F9\x3\x2\x2\x2\x3FA\x3FB\x3\x2\x2\x2\x3FB"+
		"\x3FC\x3\x2\x2\x2\x3FC\x3FE\a\xB6\x2\x2\x3FD\x3FF\a\xD8\x2\x2\x3FE\x3FD"+
		"\x3\x2\x2\x2\x3FE\x3FF\x3\x2\x2\x2\x3FF\x401\x3\x2\x2\x2\x400\x402\x5"+
		"\xCEh\x2\x401\x400\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x404\x3\x2\x2"+
		"\x2\x403\x405\a\xD8\x2\x2\x404\x403\x3\x2\x2\x2\x404\x405\x3\x2\x2\x2"+
		"\x405\x406\x3\x2\x2\x2\x406\x408\a\xB6\x2\x2\x407\x409\a\xD8\x2\x2\x408"+
		"\x407\x3\x2\x2\x2\x408\x409\x3\x2\x2\x2\x409\x40A\x3\x2\x2\x2\x40A\x40B"+
		"\x5\xCEh\x2\x40BU\x3\x2\x2\x2\x40C\x40D\aI\x2\x2\x40D\x40E\a\xD8\x2\x2"+
		"\x40E\x40F\x5\xCEh\x2\x40FW\x3\x2\x2\x2\x410\x411\aJ\x2\x2\x411\x412\a"+
		"\xD8\x2\x2\x412\x413\x5\xCEh\x2\x413Y\x3\x2\x2\x2\x414\x415\aK\x2\x2\x415"+
		"\x416\a\xD8\x2\x2\x416\x417\x5^\x30\x2\x417\x418\a\xD8\x2\x2\x418\x419"+
		"\a\xA0\x2\x2\x419\x41A\a\xD8\x2\x2\x41A\x41F\x5$\x13\x2\x41B\x41C\a\xD8"+
		"\x2\x2\x41C\x41D\a-\x2\x2\x41D\x41E\a\xD8\x2\x2\x41E\x420\x5$\x13\x2\x41F"+
		"\x41B\x3\x2\x2\x2\x41F\x420\x3\x2\x2\x2\x420\x42E\x3\x2\x2\x2\x421\x425"+
		"\x5\\/\x2\x422\x424\x5`\x31\x2\x423\x422\x3\x2\x2\x2\x424\x427\x3\x2\x2"+
		"\x2\x425\x423\x3\x2\x2\x2\x425\x426\x3\x2\x2\x2\x426\x429\x3\x2\x2\x2"+
		"\x427\x425\x3\x2\x2\x2\x428\x42A\x5\x62\x32\x2\x429\x428\x3\x2\x2\x2\x429"+
		"\x42A\x3\x2\x2\x2\x42A\x42B\x3\x2\x2\x2\x42B\x42C\a\x31\x2\x2\x42C\x42E"+
		"\x3\x2\x2\x2\x42D\x414\x3\x2\x2\x2\x42D\x421\x3\x2\x2\x2\x42E[\x3\x2\x2"+
		"\x2\x42F\x430\aK\x2\x2\x430\x431\a\xD8\x2\x2\x431\x432\x5^\x30\x2\x432"+
		"\x433\a\xD8\x2\x2\x433\x435\a\xA0\x2\x2\x434\x436\a\xD6\x2\x2\x435\x434"+
		"\x3\x2\x2\x2\x436\x437\x3\x2\x2\x2\x437\x435\x3\x2\x2\x2\x437\x438\x3"+
		"\x2\x2\x2\x438\x43F\x3\x2\x2\x2\x439\x43B\x5\"\x12\x2\x43A\x43C\a\xD6"+
		"\x2\x2\x43B\x43A\x3\x2\x2\x2\x43C\x43D\x3\x2\x2\x2\x43D\x43B\x3\x2\x2"+
		"\x2\x43D\x43E\x3\x2\x2\x2\x43E\x440\x3\x2\x2\x2\x43F\x439\x3\x2\x2\x2"+
		"\x43F\x440\x3\x2\x2\x2\x440]\x3\x2\x2\x2\x441\x442\x5\xCEh\x2\x442_\x3"+
		"\x2\x2\x2\x443\x444\a.\x2\x2\x444\x445\a\xD8\x2\x2\x445\x446\x5^\x30\x2"+
		"\x446\x447\a\xD8\x2\x2\x447\x449\a\xA0\x2\x2\x448\x44A\a\xD6\x2\x2\x449"+
		"\x448\x3\x2\x2\x2\x44A\x44B\x3\x2\x2\x2\x44B\x449\x3\x2\x2\x2\x44B\x44C"+
		"\x3\x2\x2\x2\x44C\x453\x3\x2\x2\x2\x44D\x44F\x5\"\x12\x2\x44E\x450\a\xD6"+
		"\x2\x2\x44F\x44E\x3\x2\x2\x2\x450\x451\x3\x2\x2\x2\x451\x44F\x3\x2\x2"+
		"\x2\x451\x452\x3\x2\x2\x2\x452\x454\x3\x2\x2\x2\x453\x44D\x3\x2\x2\x2"+
		"\x453\x454\x3\x2\x2\x2\x454\x61\x3\x2\x2\x2\x455\x457\a-\x2\x2\x456\x458"+
		"\a\xD6\x2\x2\x457\x456\x3\x2\x2\x2\x458\x459\x3\x2\x2\x2\x459\x457\x3"+
		"\x2\x2\x2\x459\x45A\x3\x2\x2\x2\x45A\x461\x3\x2\x2\x2\x45B\x45D\x5\"\x12"+
		"\x2\x45C\x45E\a\xD6\x2\x2\x45D\x45C\x3\x2\x2\x2\x45E\x45F\x3\x2\x2\x2"+
		"\x45F\x45D\x3\x2\x2\x2\x45F\x460\x3\x2\x2\x2\x460\x462\x3\x2\x2\x2\x461"+
		"\x45B\x3\x2\x2\x2\x461\x462\x3\x2\x2\x2\x462\x63\x3\x2\x2\x2\x463\x464"+
		"\aM\x2\x2\x464\x465\a\xD8\x2\x2\x465\x466\x5\x106\x84\x2\x466\x65\x3\x2"+
		"\x2\x2\x467\x468\aO\x2\x2\x468\x469\a\xD8\x2\x2\x469\x472\x5\xCEh\x2\x46A"+
		"\x46C\a\xD8\x2\x2\x46B\x46A\x3\x2\x2\x2\x46B\x46C\x3\x2\x2\x2\x46C\x46D"+
		"\x3\x2\x2\x2\x46D\x46F\a\xB6\x2\x2\x46E\x470\a\xD8\x2\x2\x46F\x46E\x3"+
		"\x2\x2\x2\x46F\x470\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2\x471\x473\x5\xCE"+
		"h\x2\x472\x46B\x3\x2\x2\x2\x473\x474\x3\x2\x2\x2\x474\x472\x3\x2\x2\x2"+
		"\x474\x475\x3\x2\x2\x2\x475g\x3\x2\x2\x2\x476\x477\aR\x2\x2\x477\x478"+
		"\a\xD8\x2\x2\x478\x479\x5\xCEh\x2\x479i\x3\x2\x2\x2\x47A\x47B\aX\x2\x2"+
		"\x47B\x47D\a\xD8\x2\x2\x47C\x47A\x3\x2\x2\x2\x47C\x47D\x3\x2\x2\x2\x47D"+
		"\x47E\x3\x2\x2\x2\x47E\x480\x5\xEAv\x2\x47F\x481\a\xD8\x2\x2\x480\x47F"+
		"\x3\x2\x2\x2\x480\x481\x3\x2\x2\x2\x481\x482\x3\x2\x2\x2\x482\x484\t\x6"+
		"\x2\x2\x483\x485\a\xD8\x2\x2\x484\x483\x3\x2\x2\x2\x484\x485\x3\x2\x2"+
		"\x2\x485\x486\x3\x2\x2\x2\x486\x487\x5\xCEh\x2\x487k\x3\x2\x2\x2\x488"+
		"\x489\a[\x2\x2\x489\x48A\a\xD8\x2\x2\x48A\x48C\x5\xCEh\x2\x48B\x48D\a"+
		"\xD8\x2\x2\x48C\x48B\x3\x2\x2\x2\x48C\x48D\x3\x2\x2\x2\x48D\x48E\x3\x2"+
		"\x2\x2\x48E\x490\a\xB6\x2\x2\x48F\x491\a\xD8\x2\x2\x490\x48F\x3\x2\x2"+
		"\x2\x490\x491\x3\x2\x2\x2\x491\x492\x3\x2\x2\x2\x492\x493\x5\xCEh\x2\x493"+
		"m\x3\x2\x2\x2\x494\x495\aS\x2\x2\x495\x496\a\xD8\x2\x2\x496\x497\x5\xCE"+
		"h\x2\x497o\x3\x2\x2\x2\x498\x499\aT\x2\x2\x499\x49A\a\xD8\x2\x2\x49A\x4A9"+
		"\x5\xCEh\x2\x49B\x49D\a\xD8\x2\x2\x49C\x49B\x3\x2\x2\x2\x49C\x49D\x3\x2"+
		"\x2\x2\x49D\x49E\x3\x2\x2\x2\x49E\x4A0\a\xB6\x2\x2\x49F\x4A1\a\xD8\x2"+
		"\x2\x4A0\x49F\x3\x2\x2\x2\x4A0\x4A1\x3\x2\x2\x2\x4A1\x4A2\x3\x2\x2\x2"+
		"\x4A2\x4A7\x5\xCEh\x2\x4A3\x4A4\a\xD8\x2\x2\x4A4\x4A5\a\xA2\x2\x2\x4A5"+
		"\x4A6\a\xD8\x2\x2\x4A6\x4A8\x5\xCEh\x2\x4A7\x4A3\x3\x2\x2\x2\x4A7\x4A8"+
		"\x3\x2\x2\x2\x4A8\x4AA\x3\x2\x2\x2\x4A9\x49C\x3\x2\x2\x2\x4A9\x4AA\x3"+
		"\x2\x2\x2\x4AAq\x3\x2\x2\x2\x4AB\x4AC\a_\x2\x2\x4AC\x4AD\a\xD8\x2\x2\x4AD"+
		"\x4AF\x5\xEAv\x2\x4AE\x4B0\a\xD8\x2\x2\x4AF\x4AE\x3\x2\x2\x2\x4AF\x4B0"+
		"\x3\x2\x2\x2\x4B0\x4B1\x3\x2\x2\x2\x4B1\x4B3\a\xBA\x2\x2\x4B2\x4B4\a\xD8"+
		"\x2\x2\x4B3\x4B2\x3\x2\x2\x2\x4B3\x4B4\x3\x2\x2\x2\x4B4\x4B5\x3\x2\x2"+
		"\x2\x4B5\x4B6\x5\xCEh\x2\x4B6s\x3\x2\x2\x2\x4B7\x4BB\x5v<\x2\x4B8\x4BA"+
		"\x5x=\x2\x4B9\x4B8\x3\x2\x2\x2\x4BA\x4BD\x3\x2\x2\x2\x4BB\x4B9\x3\x2\x2"+
		"\x2\x4BB\x4BC\x3\x2\x2\x2\x4BC\x4BF\x3\x2\x2\x2\x4BD\x4BB\x3\x2\x2\x2"+
		"\x4BE\x4C0\x5z>\x2\x4BF\x4BE\x3\x2\x2\x2\x4BF\x4C0\x3\x2\x2\x2\x4C0\x4C1"+
		"\x3\x2\x2\x2\x4C1\x4C2\a\x63\x2\x2\x4C2u\x3\x2\x2\x2\x4C3\x4C4\a`\x2\x2"+
		"\x4C4\x4C5\a\xD8\x2\x2\x4C5\x4C6\x5^\x30\x2\x4C6\x4C7\a\xD8\x2\x2\x4C7"+
		"\x4C9\a\xA0\x2\x2\x4C8\x4CA\a\xD6\x2\x2\x4C9\x4C8\x3\x2\x2\x2\x4CA\x4CB"+
		"\x3\x2\x2\x2\x4CB\x4C9\x3\x2\x2\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC\x4D3\x3"+
		"\x2\x2\x2\x4CD\x4CF\x5\x1A\xE\x2\x4CE\x4D0\a\xD6\x2\x2\x4CF\x4CE\x3\x2"+
		"\x2\x2\x4D0\x4D1\x3\x2\x2\x2\x4D1\x4CF\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2"+
		"\x2\x4D2\x4D4\x3\x2\x2\x2\x4D3\x4CD\x3\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2"+
		"\x4D4w\x3\x2\x2\x2\x4D5\x4D6\a\x61\x2\x2\x4D6\x4D7\a\xD8\x2\x2\x4D7\x4D8"+
		"\x5^\x30\x2\x4D8\x4D9\a\xD8\x2\x2\x4D9\x4DB\a\xA0\x2\x2\x4DA\x4DC\a\xD6"+
		"\x2\x2\x4DB\x4DA\x3\x2\x2\x2\x4DC\x4DD\x3\x2\x2\x2\x4DD\x4DB\x3\x2\x2"+
		"\x2\x4DD\x4DE\x3\x2\x2\x2\x4DE\x4E5\x3\x2\x2\x2\x4DF\x4E1\x5\x1A\xE\x2"+
		"\x4E0\x4E2\a\xD6\x2\x2\x4E1\x4E0\x3\x2\x2\x2\x4E2\x4E3\x3\x2\x2\x2\x4E3"+
		"\x4E1\x3\x2\x2\x2\x4E3\x4E4\x3\x2\x2\x2\x4E4\x4E6\x3\x2\x2\x2\x4E5\x4DF"+
		"\x3\x2\x2\x2\x4E5\x4E6\x3\x2\x2\x2\x4E6y\x3\x2\x2\x2\x4E7\x4E9\a\x62\x2"+
		"\x2\x4E8\x4EA\a\xD6\x2\x2\x4E9\x4E8\x3\x2\x2\x2\x4EA\x4EB\x3\x2\x2\x2"+
		"\x4EB\x4E9\x3\x2\x2\x2\x4EB\x4EC\x3\x2\x2\x2\x4EC\x4F3\x3\x2\x2\x2\x4ED"+
		"\x4EF\x5\x1A\xE\x2\x4EE\x4F0\a\xD6\x2\x2\x4EF\x4EE\x3\x2\x2\x2\x4F0\x4F1"+
		"\x3\x2\x2\x2\x4F1\x4EF\x3\x2\x2\x2\x4F1\x4F2\x3\x2\x2\x2\x4F2\x4F4\x3"+
		"\x2\x2\x2\x4F3\x4ED\x3\x2\x2\x2\x4F3\x4F4\x3\x2\x2\x2\x4F4{\x3\x2\x2\x2"+
		"\x4F5\x4F7\a\x65\x2\x2\x4F6\x4F8\a\xD8\x2\x2\x4F7\x4F6\x3\x2\x2\x2\x4F7"+
		"\x4F8\x3\x2\x2\x2\x4F8\x4F9\x3\x2\x2\x2\x4F9\x4FB\a\xC0\x2\x2\x4FA\x4FC"+
		"\a\xD8\x2\x2\x4FB\x4FA\x3\x2\x2\x2\x4FB\x4FC\x3\x2\x2\x2\x4FC\x4FD\x3"+
		"\x2\x2\x2\x4FD\x4FF\x5\xF6|\x2\x4FE\x500\a\xD8\x2\x2\x4FF\x4FE\x3\x2\x2"+
		"\x2\x4FF\x500\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501\x502\a\xCA\x2\x2"+
		"\x502}\x3\x2\x2\x2\x503\x504\a\x66\x2\x2\x504\x505\a\xD8\x2\x2\x505\x506"+
		"\x5\xCEh\x2\x506\x7F\x3\x2\x2\x2\x507\x508\ah\x2\x2\x508\x509\a\xD8\x2"+
		"\x2\x509\x50A\x5\xCEh\x2\x50A\x50B\a\xD8\x2\x2\x50B\x50C\a\n\x2\x2\x50C"+
		"\x50D\a\xD8\x2\x2\x50D\x50E\x5\xCEh\x2\x50E\x81\x3\x2\x2\x2\x50F\x510"+
		"\t\a\x2\x2\x510\x517\a\xD8\x2\x2\x511\x512\aJ\x2\x2\x512\x513\a\xD8\x2"+
		"\x2\x513\x518\x5\xCEh\x2\x514\x515\a\x8B\x2\x2\x515\x516\a\xD8\x2\x2\x516"+
		"\x518\ai\x2\x2\x517\x511\x3\x2\x2\x2\x517\x514\x3\x2\x2\x2\x518\x83\x3"+
		"\x2\x2\x2\x519\x51A\ao\x2\x2\x51A\x51B\a\xD8\x2\x2\x51B\x51C\x5\xCEh\x2"+
		"\x51C\x51D\a\xD8\x2\x2\x51D\x51E\aJ\x2\x2\x51E\x51F\a\xD8\x2\x2\x51F\x52A"+
		"\x5\xCEh\x2\x520\x522\a\xD8\x2\x2\x521\x520\x3\x2\x2\x2\x521\x522\x3\x2"+
		"\x2\x2\x522\x523\x3\x2\x2\x2\x523\x525\a\xB6\x2\x2\x524\x526\a\xD8\x2"+
		"\x2\x525\x524\x3\x2\x2\x2\x525\x526\x3\x2\x2\x2\x526\x527\x3\x2\x2\x2"+
		"\x527\x529\x5\xCEh\x2\x528\x521\x3\x2\x2\x2\x529\x52C\x3\x2\x2\x2\x52A"+
		"\x528\x3\x2\x2\x2\x52A\x52B\x3\x2\x2\x2\x52B\x85\x3\x2\x2\x2\x52C\x52A"+
		"\x3\x2\x2\x2\x52D\x52E\ao\x2\x2\x52E\x52F\a\xD8\x2\x2\x52F\x530\x5\xCE"+
		"h\x2\x530\x531\a\xD8\x2\x2\x531\x532\aI\x2\x2\x532\x533\a\xD8\x2\x2\x533"+
		"\x53E\x5\xCEh\x2\x534\x536\a\xD8\x2\x2\x535\x534\x3\x2\x2\x2\x535\x536"+
		"\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537\x539\a\xB6\x2\x2\x538\x53A\a\xD8"+
		"\x2\x2\x539\x538\x3\x2\x2\x2\x539\x53A\x3\x2\x2\x2\x53A\x53B\x3\x2\x2"+
		"\x2\x53B\x53D\x5\xCEh\x2\x53C\x535\x3\x2\x2\x2\x53D\x540\x3\x2\x2\x2\x53E"+
		"\x53C\x3\x2\x2\x2\x53E\x53F\x3\x2\x2\x2\x53F\x87\x3\x2\x2\x2\x540\x53E"+
		"\x3\x2\x2\x2\x541\x542\ar\x2\x2\x542\x543\a\xD8\x2\x2\x543\x544\x5\xCE"+
		"h\x2\x544\x545\a\xD8\x2\x2\x545\x546\a\x45\x2\x2\x546\x547\a\xD8\x2\x2"+
		"\x547\x54C\t\b\x2\x2\x548\x549\a\xD8\x2\x2\x549\x54A\a\x3\x2\x2\x54A\x54B"+
		"\a\xD8\x2\x2\x54B\x54D\t\t\x2\x2\x54C\x548\x3\x2\x2\x2\x54C\x54D\x3\x2"+
		"\x2\x2\x54D\x550\x3\x2\x2\x2\x54E\x54F\a\xD8\x2\x2\x54F\x551\t\n\x2\x2"+
		"\x550\x54E\x3\x2\x2\x2\x550\x551\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552"+
		"\x553\a\xD8\x2\x2\x553\x554\a\n\x2\x2\x554\x555\a\xD8\x2\x2\x555\x560"+
		"\x5\xCEh\x2\x556\x557\a\xD8\x2\x2\x557\x559\aW\x2\x2\x558\x55A\a\xD8\x2"+
		"\x2\x559\x558\x3\x2\x2\x2\x559\x55A\x3\x2\x2\x2\x55A\x55B\x3\x2\x2\x2"+
		"\x55B\x55D\a\xBA\x2\x2\x55C\x55E\a\xD8\x2\x2\x55D\x55C\x3\x2\x2\x2\x55D"+
		"\x55E\x3\x2\x2\x2\x55E\x55F\x3\x2\x2\x2\x55F\x561\x5\xCEh\x2\x560\x556"+
		"\x3\x2\x2\x2\x560\x561\x3\x2\x2\x2\x561\x89\x3\x2\x2\x2\x562\x56F\x5\x8C"+
		"G\x2\x563\x565\a\xD8\x2\x2\x564\x563\x3\x2\x2\x2\x564\x565\x3\x2\x2\x2"+
		"\x565\x566\x3\x2\x2\x2\x566\x568\t\v\x2\x2\x567\x569\a\xD8\x2\x2\x568"+
		"\x567\x3\x2\x2\x2\x568\x569\x3\x2\x2\x2\x569\x56B\x3\x2\x2\x2\x56A\x56C"+
		"\x5\x8CG\x2\x56B\x56A\x3\x2\x2\x2\x56B\x56C\x3\x2\x2\x2\x56C\x56E\x3\x2"+
		"\x2\x2\x56D\x564\x3\x2\x2\x2\x56E\x571\x3\x2\x2\x2\x56F\x56D\x3\x2\x2"+
		"\x2\x56F\x570\x3\x2\x2\x2\x570\x584\x3\x2\x2\x2\x571\x56F\x3\x2\x2\x2"+
		"\x572\x574\x5\x8CG\x2\x573\x572\x3\x2\x2\x2\x573\x574\x3\x2\x2\x2\x574"+
		"\x57F\x3\x2\x2\x2\x575\x577\a\xD8\x2\x2\x576\x575\x3\x2\x2\x2\x576\x577"+
		"\x3\x2\x2\x2\x577\x578\x3\x2\x2\x2\x578\x57A\t\v\x2\x2\x579\x57B\a\xD8"+
		"\x2\x2\x57A\x579\x3\x2\x2\x2\x57A\x57B\x3\x2\x2\x2\x57B\x57D\x3\x2\x2"+
		"\x2\x57C\x57E\x5\x8CG\x2\x57D\x57C\x3\x2\x2\x2\x57D\x57E\x3\x2\x2\x2\x57E"+
		"\x580\x3\x2\x2\x2\x57F\x576\x3\x2\x2\x2\x580\x581\x3\x2\x2\x2\x581\x57F"+
		"\x3\x2\x2\x2\x581\x582\x3\x2\x2\x2\x582\x584\x3\x2\x2\x2\x583\x562\x3"+
		"\x2\x2\x2\x583\x573\x3\x2\x2\x2\x584\x8B\x3\x2\x2\x2\x585\x597\x5\xCE"+
		"h\x2\x586\x594\t\f\x2\x2\x587\x589\a\xD8\x2\x2\x588\x587\x3\x2\x2\x2\x588"+
		"\x589\x3\x2\x2\x2\x589\x58A\x3\x2\x2\x2\x58A\x58C\a\xC0\x2\x2\x58B\x58D"+
		"\a\xD8\x2\x2\x58C\x58B\x3\x2\x2\x2\x58C\x58D\x3\x2\x2\x2\x58D\x58E\x3"+
		"\x2\x2\x2\x58E\x590\x5\xF6|\x2\x58F\x591\a\xD8\x2\x2\x590\x58F\x3\x2\x2"+
		"\x2\x590\x591\x3\x2\x2\x2\x591\x592\x3\x2\x2\x2\x592\x593\a\xCA\x2\x2"+
		"\x593\x595\x3\x2\x2\x2\x594\x588\x3\x2\x2\x2\x594\x595\x3\x2\x2\x2\x595"+
		"\x597\x3\x2\x2\x2\x596\x585\x3\x2\x2\x2\x596\x586\x3\x2\x2\x2\x597\x8D"+
		"\x3\x2\x2\x2\x598\x599\a|\x2\x2\x599\x59A\a\xD8\x2\x2\x59A\x59C\x5\xCE"+
		"h\x2\x59B\x59D\a\xD8\x2\x2\x59C\x59B\x3\x2\x2\x2\x59C\x59D\x3\x2\x2\x2"+
		"\x59D\x59E\x3\x2\x2\x2\x59E\x5A3\a\xB6\x2\x2\x59F\x5A1\a\xD8\x2\x2\x5A0"+
		"\x59F\x3\x2\x2\x2\x5A0\x5A1\x3\x2\x2\x2\x5A1\x5A2\x3\x2\x2\x2\x5A2\x5A4"+
		"\x5\x8A\x46\x2\x5A3\x5A0\x3\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4\x8F\x3"+
		"\x2\x2\x2\x5A5\x5A6\x5\x122\x92\x2\x5A6\x5A7\a\xD8\x2\x2\x5A7\x5A9\x3"+
		"\x2\x2\x2\x5A8\x5A5\x3\x2\x2\x2\x5A8\x5A9\x3\x2\x2\x2\x5A9\x5AC\x3\x2"+
		"\x2\x2\x5AA\x5AB\a\x99\x2\x2\x5AB\x5AD\a\xD8\x2\x2\x5AC\x5AA\x3\x2\x2"+
		"\x2\x5AC\x5AD\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2\x5AE\x5AF\a~\x2\x2\x5AF"+
		"\x5B0\a\xD8\x2\x2\x5B0\x5B2\x5\x106\x84\x2\x5B1\x5B3\x5\x120\x91\x2\x5B2"+
		"\x5B1\x3\x2\x2\x2\x5B2\x5B3\x3\x2\x2\x2\x5B3\x5B8\x3\x2\x2\x2\x5B4\x5B6"+
		"\a\xD8\x2\x2\x5B5\x5B4\x3\x2\x2\x2\x5B5\x5B6\x3\x2\x2\x2\x5B6\x5B7\x3"+
		"\x2\x2\x2\x5B7\x5B9\x5\xFC\x7F\x2\x5B8\x5B5\x3\x2\x2\x2\x5B8\x5B9\x3\x2"+
		"\x2\x2\x5B9\x5BC\x3\x2\x2\x2\x5BA\x5BB\a\xD8\x2\x2\x5BB\x5BD\x5\x108\x85"+
		"\x2\x5BC\x5BA\x3\x2\x2\x2\x5BC\x5BD\x3\x2\x2\x2\x5BD\x5BF\x3\x2\x2\x2"+
		"\x5BE\x5C0\a\xD6\x2\x2\x5BF\x5BE\x3\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2\x5C1"+
		"\x5BF\x3\x2\x2\x2\x5C1\x5C2\x3\x2\x2\x2\x5C2\x5C9\x3\x2\x2\x2\x5C3\x5C5"+
		"\x5\"\x12\x2\x5C4\x5C6\a\xD6\x2\x2\x5C5\x5C4\x3\x2\x2\x2\x5C6\x5C7\x3"+
		"\x2\x2\x2\x5C7\x5C5\x3\x2\x2\x2\x5C7\x5C8\x3\x2\x2\x2\x5C8\x5CA\x3\x2"+
		"\x2\x2\x5C9\x5C3\x3\x2\x2\x2\x5C9\x5CA\x3\x2\x2\x2\x5CA\x5CB\x3\x2\x2"+
		"\x2\x5CB\x5CC\a\x32\x2\x2\x5CC\x91\x3\x2\x2\x2\x5CD\x5CE\x5\x122\x92\x2"+
		"\x5CE\x5CF\a\xD8\x2\x2\x5CF\x5D1\x3\x2\x2\x2\x5D0\x5CD\x3\x2\x2\x2\x5D0"+
		"\x5D1\x3\x2\x2\x2\x5D1\x5D4\x3\x2\x2\x2\x5D2\x5D3\a\x99\x2\x2\x5D3\x5D5"+
		"\a\xD8\x2\x2\x5D4\x5D2\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2\x2\x5D5\x5D6\x3"+
		"\x2\x2\x2\x5D6\x5D7\a\x80\x2\x2\x5D7\x5D8\a\xD8\x2\x2\x5D8\x5DD\x5\x106"+
		"\x84\x2\x5D9\x5DB\a\xD8\x2\x2\x5DA\x5D9\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2"+
		"\x2\x5DB\x5DC\x3\x2\x2\x2\x5DC\x5DE\x5\xFC\x7F\x2\x5DD\x5DA\x3\x2\x2\x2"+
		"\x5DD\x5DE\x3\x2\x2\x2\x5DE\x5E0\x3\x2\x2\x2\x5DF\x5E1\a\xD6\x2\x2\x5E0"+
		"\x5DF\x3\x2\x2\x2\x5E1\x5E2\x3\x2\x2\x2\x5E2\x5E0\x3\x2\x2\x2\x5E2\x5E3"+
		"\x3\x2\x2\x2\x5E3\x5EA\x3\x2\x2\x2\x5E4\x5E6\x5\"\x12\x2\x5E5\x5E7\a\xD6"+
		"\x2\x2\x5E6\x5E5\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2\x2\x5E8\x5E6\x3\x2\x2"+
		"\x2\x5E8\x5E9\x3\x2\x2\x2\x5E9\x5EB\x3\x2\x2\x2\x5EA\x5E4\x3\x2\x2\x2"+
		"\x5EA\x5EB\x3\x2\x2\x2\x5EB\x5EC\x3\x2\x2\x2\x5EC\x5ED\a\x32\x2\x2\x5ED"+
		"\x93\x3\x2\x2\x2\x5EE\x5EF\x5\x122\x92\x2\x5EF\x5F0\a\xD8\x2\x2\x5F0\x5F2"+
		"\x3\x2\x2\x2\x5F1\x5EE\x3\x2\x2\x2\x5F1\x5F2\x3\x2\x2\x2\x5F2\x5F5\x3"+
		"\x2\x2\x2\x5F3\x5F4\a\x99\x2\x2\x5F4\x5F6\a\xD8\x2\x2\x5F5\x5F3\x3\x2"+
		"\x2\x2\x5F5\x5F6\x3\x2\x2\x2\x5F6\x5F7\x3\x2\x2\x2\x5F7\x5F8\a\x7F\x2"+
		"\x2\x5F8\x5F9\a\xD8\x2\x2\x5F9\x5FE\x5\x106\x84\x2\x5FA\x5FC\a\xD8\x2"+
		"\x2\x5FB\x5FA\x3\x2\x2\x2\x5FB\x5FC\x3\x2\x2\x2\x5FC\x5FD\x3\x2\x2\x2"+
		"\x5FD\x5FF\x5\xFC\x7F\x2\x5FE\x5FB\x3\x2\x2\x2\x5FE\x5FF\x3\x2\x2\x2\x5FF"+
		"\x601\x3\x2\x2\x2\x600\x602\a\xD6\x2\x2\x601\x600\x3\x2\x2\x2\x602\x603"+
		"\x3\x2\x2\x2\x603\x601\x3\x2\x2\x2\x603\x604\x3\x2\x2\x2\x604\x60B\x3"+
		"\x2\x2\x2\x605\x607\x5\"\x12\x2\x606\x608\a\xD6\x2\x2\x607\x606\x3\x2"+
		"\x2\x2\x608\x609\x3\x2\x2\x2\x609\x607\x3\x2\x2\x2\x609\x60A\x3\x2\x2"+
		"\x2\x60A\x60C\x3\x2\x2\x2\x60B\x605\x3\x2\x2\x2\x60B\x60C\x3\x2\x2\x2"+
		"\x60C\x60D\x3\x2\x2\x2\x60D\x60E\a\x32\x2\x2\x60E\x95\x3\x2\x2\x2\x60F"+
		"\x610\a\x82\x2\x2\x610\x611\a\xD8\x2\x2\x611\x613\x5\xCEh\x2\x612\x614"+
		"\a\xD8\x2\x2\x613\x612\x3\x2\x2\x2\x613\x614\x3\x2\x2\x2\x614\x615\x3"+
		"\x2\x2\x2\x615\x617\a\xB6\x2\x2\x616\x618\a\xD8\x2\x2\x617\x616\x3\x2"+
		"\x2\x2\x617\x618\x3\x2\x2\x2\x618\x61A\x3\x2\x2\x2\x619\x61B\x5\xCEh\x2"+
		"\x61A\x619\x3\x2\x2\x2\x61A\x61B\x3\x2\x2\x2\x61B\x61D\x3\x2\x2\x2\x61C"+
		"\x61E\a\xD8\x2\x2\x61D\x61C\x3\x2\x2\x2\x61D\x61E\x3\x2\x2\x2\x61E\x61F"+
		"\x3\x2\x2\x2\x61F\x621\a\xB6\x2\x2\x620\x622\a\xD8\x2\x2\x621\x620\x3"+
		"\x2\x2\x2\x621\x622\x3\x2\x2\x2\x622\x623\x3\x2\x2\x2\x623\x624\x5\xCE"+
		"h\x2\x624\x97\x3\x2\x2\x2\x625\x626\a\x85\x2\x2\x626\x627\a\xD8\x2\x2"+
		"\x627\x636\x5\x106\x84\x2\x628\x62A\a\xD8\x2\x2\x629\x628\x3\x2\x2\x2"+
		"\x629\x62A\x3\x2\x2\x2\x62A\x62B\x3\x2\x2\x2\x62B\x62D\a\xC0\x2\x2\x62C"+
		"\x62E\a\xD8\x2\x2\x62D\x62C\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E\x633"+
		"\x3\x2\x2\x2\x62F\x631\x5\xF6|\x2\x630\x632\a\xD8\x2\x2\x631\x630\x3\x2"+
		"\x2\x2\x631\x632\x3\x2\x2\x2\x632\x634\x3\x2\x2\x2\x633\x62F\x3\x2\x2"+
		"\x2\x633\x634\x3\x2\x2\x2\x634\x635\x3\x2\x2\x2\x635\x637\a\xCA\x2\x2"+
		"\x636\x629\x3\x2\x2\x2\x636\x637\x3\x2\x2\x2\x637\x99\x3\x2\x2\x2\x638"+
		"\x63B\a\x84\x2\x2\x639\x63A\a\xD8\x2\x2\x63A\x63C\x5\xCEh\x2\x63B\x639"+
		"\x3\x2\x2\x2\x63B\x63C\x3\x2\x2\x2\x63C\x9B\x3\x2\x2\x2\x63D\x63E\a\x88"+
		"\x2\x2\x63E\x641\a\xD8\x2\x2\x63F\x640\a{\x2\x2\x640\x642\a\xD8\x2\x2"+
		"\x641\x63F\x3\x2\x2\x2\x641\x642\x3\x2\x2\x2\x642\x643\x3\x2\x2\x2\x643"+
		"\x64E\x5\x9EP\x2\x644\x646\a\xD8\x2\x2\x645\x644\x3\x2\x2\x2\x645\x646"+
		"\x3\x2\x2\x2\x646\x647\x3\x2\x2\x2\x647\x649\a\xB6\x2\x2\x648\x64A\a\xD8"+
		"\x2\x2\x649\x648\x3\x2\x2\x2\x649\x64A\x3\x2\x2\x2\x64A\x64B\x3\x2\x2"+
		"\x2\x64B\x64D\x5\x9EP\x2\x64C\x645\x3\x2\x2\x2\x64D\x650\x3\x2\x2\x2\x64E"+
		"\x64C\x3\x2\x2\x2\x64E\x64F\x3\x2\x2\x2\x64F\x9D\x3\x2\x2\x2\x650\x64E"+
		"\x3\x2\x2\x2\x651\x653\x5\xEAv\x2\x652\x654\a\xD8\x2\x2\x653\x652\x3\x2"+
		"\x2\x2\x653\x654\x3\x2\x2\x2\x654\x655\x3\x2\x2\x2\x655\x657\a\xC0\x2"+
		"\x2\x656\x658\a\xD8\x2\x2\x657\x656\x3\x2\x2\x2\x657\x658\x3\x2\x2\x2"+
		"\x658\x659\x3\x2\x2\x2\x659\x65B\x5\x102\x82\x2\x65A\x65C\a\xD8\x2\x2"+
		"\x65B\x65A\x3\x2\x2\x2\x65B\x65C\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D"+
		"\x660\a\xCA\x2\x2\x65E\x65F\a\xD8\x2\x2\x65F\x661\x5\x108\x85\x2\x660"+
		"\x65E\x3\x2\x2\x2\x660\x661\x3\x2\x2\x2\x661\x9F\x3\x2\x2\x2\x662\x663"+
		"\a\x8A\x2\x2\x663\xA1\x3\x2\x2\x2\x664\x66A\a\x8B\x2\x2\x665\x668\a\xD8"+
		"\x2\x2\x666\x669\ai\x2\x2\x667\x669\x5\x106\x84\x2\x668\x666\x3\x2\x2"+
		"\x2\x668\x667\x3\x2\x2\x2\x669\x66B\x3\x2\x2\x2\x66A\x665\x3\x2\x2\x2"+
		"\x66A\x66B\x3\x2\x2\x2\x66B\xA3\x3\x2\x2\x2\x66C\x66D\a\x8C\x2\x2\x66D"+
		"\xA5\x3\x2\x2\x2\x66E\x66F\a\x8D\x2\x2\x66F\x670\a\xD8\x2\x2\x670\x671"+
		"\x5\xCEh\x2\x671\xA7\x3\x2\x2\x2\x672\x673\a\x8E\x2\x2\x673\x674\a\xD8"+
		"\x2\x2\x674\x676\x5\xEAv\x2\x675\x677\a\xD8\x2\x2\x676\x675\x3\x2\x2\x2"+
		"\x676\x677\x3\x2\x2\x2\x677\x678\x3\x2\x2\x2\x678\x67A\a\xBA\x2\x2\x679"+
		"\x67B\a\xD8\x2\x2\x67A\x679\x3\x2\x2\x2\x67A\x67B\x3\x2\x2\x2\x67B\x67C"+
		"\x3\x2\x2\x2\x67C\x67D\x5\xCEh\x2\x67D\xA9\x3\x2\x2\x2\x67E\x67F\a\x8F"+
		"\x2\x2\x67F\x680\a\xD8\x2\x2\x680\x682\x5\xCEh\x2\x681\x683\a\xD8\x2\x2"+
		"\x682\x681\x3\x2\x2\x2\x682\x683\x3\x2\x2\x2\x683\x684\x3\x2\x2\x2\x684"+
		"\x686\a\xB6\x2\x2\x685\x687\a\xD8\x2\x2\x686\x685\x3\x2\x2\x2\x686\x687"+
		"\x3\x2\x2\x2\x687\x688\x3\x2\x2\x2\x688\x689\x5\xCEh\x2\x689\xAB\x3\x2"+
		"\x2\x2\x68A\x68B\a\x90\x2\x2\x68B\x68C\a\xD8\x2\x2\x68C\x68E\x5\xCEh\x2"+
		"\x68D\x68F\a\xD8\x2\x2\x68E\x68D\x3\x2\x2\x2\x68E\x68F\x3\x2\x2\x2\x68F"+
		"\x690\x3\x2\x2\x2\x690\x692\a\xB6\x2\x2\x691\x693\a\xD8\x2\x2\x692\x691"+
		"\x3\x2\x2\x2\x692\x693\x3\x2\x2\x2\x693\x694\x3\x2\x2\x2\x694\x696\x5"+
		"\xCEh\x2\x695\x697\a\xD8\x2\x2\x696\x695\x3\x2\x2\x2\x696\x697\x3\x2\x2"+
		"\x2\x697\x698\x3\x2\x2\x2\x698\x69A\a\xB6\x2\x2\x699\x69B\a\xD8\x2\x2"+
		"\x69A\x699\x3\x2\x2\x2\x69A\x69B\x3\x2\x2\x2\x69B\x69C\x3\x2\x2\x2\x69C"+
		"\x69E\x5\xCEh\x2\x69D\x69F\a\xD8\x2\x2\x69E\x69D\x3\x2\x2\x2\x69E\x69F"+
		"\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x6A2\a\xB6\x2\x2\x6A1\x6A3\a\xD8"+
		"\x2\x2\x6A2\x6A1\x3\x2\x2\x2\x6A2\x6A3\x3\x2\x2\x2\x6A3\x6A4\x3\x2\x2"+
		"\x2\x6A4\x6A5\x5\xCEh\x2\x6A5\xAD\x3\x2\x2\x2\x6A6\x6A7\a\x91\x2\x2\x6A7"+
		"\x6A8\a\xD8\x2\x2\x6A8\x6AA\x5\xCEh\x2\x6A9\x6AB\a\xD8\x2\x2\x6AA\x6A9"+
		"\x3\x2\x2\x2\x6AA\x6AB\x3\x2\x2\x2\x6AB\x6AC\x3\x2\x2\x2\x6AC\x6AE\a\xB6"+
		"\x2\x2\x6AD\x6AF\a\xD8\x2\x2\x6AE\x6AD\x3\x2\x2\x2\x6AE\x6AF\x3\x2\x2"+
		"\x2\x6AF\x6B0\x3\x2\x2\x2\x6B0\x6B1\x5\xCEh\x2\x6B1\xAF\x3\x2\x2\x2\x6B2"+
		"\x6B3\a\x92\x2\x2\x6B3\x6B4\a\xD8\x2\x2\x6B4\x6B5\a\x13\x2\x2\x6B5\x6B6"+
		"\a\xD8\x2\x2\x6B6\x6B8\x5\xCEh\x2\x6B7\x6B9\a\xD6\x2\x2\x6B8\x6B7\x3\x2"+
		"\x2\x2\x6B9\x6BA\x3\x2\x2\x2\x6BA\x6B8\x3\x2\x2\x2\x6BA\x6BB\x3\x2\x2"+
		"\x2\x6BB\x6BF\x3\x2\x2\x2\x6BC\x6BE\x5\xB2Z\x2\x6BD\x6BC\x3\x2\x2\x2\x6BE"+
		"\x6C1\x3\x2\x2\x2\x6BF\x6BD\x3\x2\x2\x2\x6BF\x6C0\x3\x2\x2\x2\x6C0\x6C3"+
		"\x3\x2\x2\x2\x6C1\x6BF\x3\x2\x2\x2\x6C2\x6C4\a\xD8\x2\x2\x6C3\x6C2\x3"+
		"\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2\x6C4\x6C5\x3\x2\x2\x2\x6C5\x6C6\a\x33"+
		"\x2\x2\x6C6\xB1\x3\x2\x2\x2\x6C7\x6C8\a\x13\x2\x2\x6C8\x6C9\a\xD8\x2\x2"+
		"\x6C9\x6CB\x5\xB4[\x2\x6CA\x6CC\a\xD8\x2\x2\x6CB\x6CA\x3\x2\x2\x2\x6CB"+
		"\x6CC\x3\x2\x2\x2\x6CC\x6DB\x3\x2\x2\x2\x6CD\x6CF\a\xB5\x2\x2\x6CE\x6CD"+
		"\x3\x2\x2\x2\x6CE\x6CF\x3\x2\x2\x2\x6CF\x6D3\x3\x2\x2\x2\x6D0\x6D2\a\xD6"+
		"\x2\x2\x6D1\x6D0\x3\x2\x2\x2\x6D2\x6D5\x3\x2\x2\x2\x6D3\x6D1\x3\x2\x2"+
		"\x2\x6D3\x6D4\x3\x2\x2\x2\x6D4\x6DC\x3\x2\x2\x2\x6D5\x6D3\x3\x2\x2\x2"+
		"\x6D6\x6D8\a\xD6\x2\x2\x6D7\x6D6\x3\x2\x2\x2\x6D8\x6D9\x3\x2\x2\x2\x6D9"+
		"\x6D7\x3\x2\x2\x2\x6D9\x6DA\x3\x2\x2\x2\x6DA\x6DC\x3\x2\x2\x2\x6DB\x6CE"+
		"\x3\x2\x2\x2\x6DB\x6D7\x3\x2\x2\x2\x6DC\x6E3\x3\x2\x2\x2\x6DD\x6DF\x5"+
		"\"\x12\x2\x6DE\x6E0\a\xD6\x2\x2\x6DF\x6DE\x3\x2\x2\x2\x6E0\x6E1\x3\x2"+
		"\x2\x2\x6E1\x6DF\x3\x2\x2\x2\x6E1\x6E2\x3\x2\x2\x2\x6E2\x6E4\x3\x2\x2"+
		"\x2\x6E3\x6DD\x3\x2\x2\x2\x6E3\x6E4\x3\x2\x2\x2\x6E4\xB3\x3\x2\x2\x2\x6E5"+
		"\x6F5\a-\x2\x2\x6E6\x6F1\x5\xB6\\\x2\x6E7\x6E9\a\xD8\x2\x2\x6E8\x6E7\x3"+
		"\x2\x2\x2\x6E8\x6E9\x3\x2\x2\x2\x6E9\x6EA\x3\x2\x2\x2\x6EA\x6EC\a\xB6"+
		"\x2\x2\x6EB\x6ED\a\xD8\x2\x2\x6EC\x6EB\x3\x2\x2\x2\x6EC\x6ED\x3\x2\x2"+
		"\x2\x6ED\x6EE\x3\x2\x2\x2\x6EE\x6F0\x5\xB6\\\x2\x6EF\x6E8\x3\x2\x2\x2"+
		"\x6F0\x6F3\x3\x2\x2\x2\x6F1\x6EF\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2\x2\x6F2"+
		"\x6F5\x3\x2\x2\x2\x6F3\x6F1\x3\x2\x2\x2\x6F4\x6E5\x3\x2\x2\x2\x6F4\x6E6"+
		"\x3\x2\x2\x2\x6F5\xB5\x3\x2\x2\x2\x6F6\x6F8\aP\x2\x2\x6F7\x6F9\a\xD8\x2"+
		"\x2\x6F8\x6F7\x3\x2\x2\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9\x6FA\x3\x2\x2\x2"+
		"\x6FA\x6FC\x5\x10E\x88\x2\x6FB\x6FD\a\xD8\x2\x2\x6FC\x6FB\x3\x2\x2\x2"+
		"\x6FC\x6FD\x3\x2\x2\x2\x6FD\x6FE\x3\x2\x2\x2\x6FE\x6FF\x5\xCEh\x2\x6FF"+
		"\x708\x3\x2\x2\x2\x700\x708\x5\xCEh\x2\x701\x702\x5\xCEh\x2\x702\x703"+
		"\a\xD8\x2\x2\x703\x704\a\xA2\x2\x2\x704\x705\a\xD8\x2\x2\x705\x706\x5"+
		"\xCEh\x2\x706\x708\x3\x2\x2\x2\x707\x6F6\x3\x2\x2\x2\x707\x700\x3\x2\x2"+
		"\x2\x707\x701\x3\x2\x2\x2\x708\xB7\x3\x2\x2\x2\x709\x70A\a\x93\x2\x2\x70A"+
		"\x70B\a\xD8\x2\x2\x70B\x714\x5\xCEh\x2\x70C\x70E\a\xD8\x2\x2\x70D\x70C"+
		"\x3\x2\x2\x2\x70D\x70E\x3\x2\x2\x2\x70E\x70F\x3\x2\x2\x2\x70F\x711\a\xB6"+
		"\x2\x2\x710\x712\a\xD8\x2\x2\x711\x710\x3\x2\x2\x2\x711\x712\x3\x2\x2"+
		"\x2\x712\x713\x3\x2\x2\x2\x713\x715\x5\xCEh\x2\x714\x70D\x3\x2\x2\x2\x714"+
		"\x715\x3\x2\x2\x2\x715\xB9\x3\x2\x2\x2\x716\x717\a\x95\x2\x2\x717\x718"+
		"\a\xD8\x2\x2\x718\x71A\x5\xCEh\x2\x719\x71B\a\xD8\x2\x2\x71A\x719\x3\x2"+
		"\x2\x2\x71A\x71B\x3\x2\x2\x2\x71B\x71C\x3\x2\x2\x2\x71C\x71E\a\xB6\x2"+
		"\x2\x71D\x71F\a\xD8\x2\x2\x71E\x71D\x3\x2\x2\x2\x71E\x71F\x3\x2\x2\x2"+
		"\x71F\x720\x3\x2\x2\x2\x720\x721\x5\xCEh\x2\x721\xBB\x3\x2\x2\x2\x722"+
		"\x723\a\x94\x2\x2\x723\x724\a\xD8\x2\x2\x724\x726\x5\xEAv\x2\x725\x727"+
		"\a\xD8\x2\x2\x726\x725\x3\x2\x2\x2\x726\x727\x3\x2\x2\x2\x727\x728\x3"+
		"\x2\x2\x2\x728\x72A\a\xBA\x2\x2\x729\x72B\a\xD8\x2\x2\x72A\x729\x3\x2"+
		"\x2\x2\x72A\x72B\x3\x2\x2\x2\x72B\x72C\x3\x2\x2\x2\x72C\x72D\x5\xCEh\x2"+
		"\x72D\xBD\x3\x2\x2\x2\x72E\x72F\a\x9B\x2\x2\x72F\xBF\x3\x2\x2\x2\x730"+
		"\x731\x5\x122\x92\x2\x731\x732\a\xD8\x2\x2\x732\x734\x3\x2\x2\x2\x733"+
		"\x730\x3\x2\x2\x2\x733\x734\x3\x2\x2\x2\x734\x737\x3\x2\x2\x2\x735\x736"+
		"\a\x99\x2\x2\x736\x738\a\xD8\x2\x2\x737\x735\x3\x2\x2\x2\x737\x738\x3"+
		"\x2\x2\x2\x738\x739\x3\x2\x2\x2\x739\x73A\a\x9D\x2\x2\x73A\x73B\a\xD8"+
		"\x2\x2\x73B\x740\x5\x106\x84\x2\x73C\x73E\a\xD8\x2\x2\x73D\x73C\x3\x2"+
		"\x2\x2\x73D\x73E\x3\x2\x2\x2\x73E\x73F\x3\x2\x2\x2\x73F\x741\x5\xFC\x7F"+
		"\x2\x740\x73D\x3\x2\x2\x2\x740\x741\x3\x2\x2\x2\x741\x743\x3\x2\x2\x2"+
		"\x742\x744\a\xD6\x2\x2\x743\x742\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2\x745"+
		"\x743\x3\x2\x2\x2\x745\x746\x3\x2\x2\x2\x746\x74D\x3\x2\x2\x2\x747\x749"+
		"\x5\"\x12\x2\x748\x74A\a\xD6\x2\x2\x749\x748\x3\x2\x2\x2\x74A\x74B\x3"+
		"\x2\x2\x2\x74B\x749\x3\x2\x2\x2\x74B\x74C\x3\x2\x2\x2\x74C\x74E\x3\x2"+
		"\x2\x2\x74D\x747\x3\x2\x2\x2\x74D\x74E\x3\x2\x2\x2\x74E\x74F\x3\x2\x2"+
		"\x2\x74F\x750\a\x34\x2\x2\x750\xC1\x3\x2\x2\x2\x751\x753\a\xA1\x2\x2\x752"+
		"\x754\a\xD8\x2\x2\x753\x752\x3\x2\x2\x2\x753\x754\x3\x2\x2\x2\x754\x755"+
		"\x3\x2\x2\x2\x755\x757\a\xBA\x2\x2\x756\x758\a\xD8\x2\x2\x757\x756\x3"+
		"\x2\x2\x2\x757\x758\x3\x2\x2\x2\x758\x759\x3\x2\x2\x2\x759\x75A\x5\xCE"+
		"h\x2\x75A\xC3\x3\x2\x2\x2\x75B\x75C\x5\x122\x92\x2\x75C\x75D\a\xD8\x2"+
		"\x2\x75D\x75F\x3\x2\x2\x2\x75E\x75B\x3\x2\x2\x2\x75E\x75F\x3\x2\x2\x2"+
		"\x75F\x760\x3\x2\x2\x2\x760\x761\a\xA4\x2\x2\x761\x762\a\xD8\x2\x2\x762"+
		"\x764\x5\x106\x84\x2\x763\x765\a\xD6\x2\x2\x764\x763\x3\x2\x2\x2\x765"+
		"\x766\x3\x2\x2\x2\x766\x764\x3\x2\x2\x2\x766\x767\x3\x2\x2\x2\x767\x76B"+
		"\x3\x2\x2\x2\x768\x76A\x5\xC6\x64\x2\x769\x768\x3\x2\x2\x2\x76A\x76D\x3"+
		"\x2\x2\x2\x76B\x769\x3\x2\x2\x2\x76B\x76C\x3\x2\x2\x2\x76C\x76E\x3\x2"+
		"\x2\x2\x76D\x76B\x3\x2\x2\x2\x76E\x76F\a\x35\x2\x2\x76F\xC5\x3\x2\x2\x2"+
		"\x770\x77F\x5\x106\x84\x2\x771\x773\a\xD8\x2\x2\x772\x771\x3\x2\x2\x2"+
		"\x772\x773\x3\x2\x2\x2\x773\x774\x3\x2\x2\x2\x774\x779\a\xC0\x2\x2\x775"+
		"\x777\a\xD8\x2\x2\x776\x775\x3\x2\x2\x2\x776\x777\x3\x2\x2\x2\x777\x778"+
		"\x3\x2\x2\x2\x778\x77A\x5\x102\x82\x2\x779\x776\x3\x2\x2\x2\x779\x77A"+
		"\x3\x2\x2\x2\x77A\x77C\x3\x2\x2\x2\x77B\x77D\a\xD8\x2\x2\x77C\x77B\x3"+
		"\x2\x2\x2\x77C\x77D\x3\x2\x2\x2\x77D\x77E\x3\x2\x2\x2\x77E\x780\a\xCA"+
		"\x2\x2\x77F\x772\x3\x2\x2\x2\x77F\x780\x3\x2\x2\x2\x780\x783\x3\x2\x2"+
		"\x2\x781\x782\a\xD8\x2\x2\x782\x784\x5\x108\x85\x2\x783\x781\x3\x2\x2"+
		"\x2\x783\x784\x3\x2\x2\x2\x784\x786\x3\x2\x2\x2\x785\x787\a\xD6\x2\x2"+
		"\x786\x785\x3\x2\x2\x2\x787\x788\x3\x2\x2\x2\x788\x786\x3\x2\x2\x2\x788"+
		"\x789\x3\x2\x2\x2\x789\xC7\x3\x2\x2\x2\x78A\x78B\a\xA5\x2\x2\x78B\x78C"+
		"\a\xD8\x2\x2\x78C\x791\x5\xCEh\x2\x78D\x78E\a\xD8\x2\x2\x78E\x78F\aP\x2"+
		"\x2\x78F\x790\a\xD8\x2\x2\x790\x792\x5\x11E\x90\x2\x791\x78D\x3\x2\x2"+
		"\x2\x791\x792\x3\x2\x2\x2\x792\xC9\x3\x2\x2\x2\x793\x794\a\xA6\x2\x2\x794"+
		"\x795\a\xD8\x2\x2\x795\x796\x5\xCEh\x2\x796\xCB\x3\x2\x2\x2\x797\x798"+
		"\a\xA7\x2\x2\x798\x799\a\xD8\x2\x2\x799\x7A8\x5\xCEh\x2\x79A\x79C\a\xD8"+
		"\x2\x2\x79B\x79A\x3\x2\x2\x2\x79B\x79C\x3\x2\x2\x2\x79C\x79D\x3\x2\x2"+
		"\x2\x79D\x79F\a\xB6\x2\x2\x79E\x7A0\a\xD8\x2\x2\x79F\x79E\x3\x2\x2\x2"+
		"\x79F\x7A0\x3\x2\x2\x2\x7A0\x7A1\x3\x2\x2\x2\x7A1\x7A6\x5\xCEh\x2\x7A2"+
		"\x7A3\a\xD8\x2\x2\x7A3\x7A4\a\xA2\x2\x2\x7A4\x7A5\a\xD8\x2\x2\x7A5\x7A7"+
		"\x5\xCEh\x2\x7A6\x7A2\x3\x2\x2\x2\x7A6\x7A7\x3\x2\x2\x2\x7A7\x7A9\x3\x2"+
		"\x2\x2\x7A8\x79B\x3\x2\x2\x2\x7A8\x7A9\x3\x2\x2\x2\x7A9\xCD\x3\x2\x2\x2"+
		"\x7AA\x7AB\bh\x1\x2\x7AB\x7E4\x5\x118\x8D\x2\x7AC\x7E4\x5\xEAv\x2\x7AD"+
		"\x7AF\a\xC0\x2\x2\x7AE\x7B0\a\xD8\x2\x2\x7AF\x7AE\x3\x2\x2\x2\x7AF\x7B0"+
		"\x3\x2\x2\x2\x7B0\x7B1\x3\x2\x2\x2\x7B1\x7BC\x5\xCEh\x2\x7B2\x7B4\a\xD8"+
		"\x2\x2\x7B3\x7B2\x3\x2\x2\x2\x7B3\x7B4\x3\x2\x2\x2\x7B4\x7B5\x3\x2\x2"+
		"\x2\x7B5\x7B7\a\xB6\x2\x2\x7B6\x7B8\a\xD8\x2\x2\x7B7\x7B6\x3\x2\x2\x2"+
		"\x7B7\x7B8\x3\x2\x2\x2\x7B8\x7B9\x3\x2\x2\x2\x7B9\x7BB\x5\xCEh\x2\x7BA"+
		"\x7B3\x3\x2\x2\x2\x7BB\x7BE\x3\x2\x2\x2\x7BC\x7BA\x3\x2\x2\x2\x7BC\x7BD"+
		"\x3\x2\x2\x2\x7BD\x7C0\x3\x2\x2\x2\x7BE\x7BC\x3\x2\x2\x2\x7BF\x7C1\a\xD8"+
		"\x2\x2\x7C0\x7BF\x3\x2\x2\x2\x7C0\x7C1\x3\x2\x2\x2\x7C1\x7C2\x3\x2\x2"+
		"\x2\x7C2\x7C3\a\xCA\x2\x2\x7C3\x7E4\x3\x2\x2\x2\x7C4\x7C5\aj\x2\x2\x7C5"+
		"\x7C6\a\xD8\x2\x2\x7C6\x7E4\x5\xCEh\x1E\x7C7\x7E4\x5\xC8\x65\x2\x7C8\x7E4"+
		"\x5|?\x2\x7C9\x7CA\a\x4\x2\x2\x7CA\x7CB\a\xD8\x2\x2\x7CB\x7E4\x5\xCEh"+
		"\x1B\x7CC\x7CE\x5\xEAv\x2\x7CD\x7CF\a\xD8\x2\x2\x7CE\x7CD\x3\x2\x2\x2"+
		"\x7CE\x7CF\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2\x7D0\x7D2\a\xB3\x2\x2\x7D1"+
		"\x7D3\a\xD8\x2\x2\x7D2\x7D1\x3\x2\x2\x2\x7D2\x7D3\x3\x2\x2\x2\x7D3\x7D4"+
		"\x3\x2\x2\x2\x7D4\x7D5\x5\xCEh\x1A\x7D5\x7E4\x3\x2\x2\x2\x7D6\x7D8\a\xC2"+
		"\x2\x2\x7D7\x7D9\a\xD8\x2\x2\x7D8\x7D7\x3\x2\x2\x2\x7D8\x7D9\x3\x2\x2"+
		"\x2\x7D9\x7DA\x3\x2\x2\x2\x7DA\x7E4\x5\xCEh\x10\x7DB\x7DD\a\xC7\x2\x2"+
		"\x7DC\x7DE\a\xD8\x2\x2\x7DD\x7DC\x3\x2\x2\x2\x7DD\x7DE\x3\x2\x2\x2\x7DE"+
		"\x7DF\x3\x2\x2\x2\x7DF\x7E4\x5\xCEh\xF\x7E0\x7E1\ak\x2\x2\x7E1\x7E2\a"+
		"\xD8\x2\x2\x7E2\x7E4\x5\xCEh\x3\x7E3\x7AA\x3\x2\x2\x2\x7E3\x7AC\x3\x2"+
		"\x2\x2\x7E3\x7AD\x3\x2\x2\x2\x7E3\x7C4\x3\x2\x2\x2\x7E3\x7C7\x3\x2\x2"+
		"\x2\x7E3\x7C8\x3\x2\x2\x2\x7E3\x7C9\x3\x2\x2\x2\x7E3\x7CC\x3\x2\x2\x2"+
		"\x7E3\x7D6\x3\x2\x2\x2\x7E3\x7DB\x3\x2\x2\x2\x7E3\x7E0\x3\x2\x2\x2\x7E4"+
		"\x883\x3\x2\x2\x2\x7E5\x7E6\f\x19\x2\x2\x7E6\x7E7\a\xD8\x2\x2\x7E7\x7E8"+
		"\aP\x2\x2\x7E8\x7E9\a\xD8\x2\x2\x7E9\x882\x5\xCEh\x1A\x7EA\x7EB\f\x18"+
		"\x2\x2\x7EB\x7EC\a\xD8\x2\x2\x7EC\x7ED\aZ\x2\x2\x7ED\x7EE\a\xD8\x2\x2"+
		"\x7EE\x882\x5\xCEh\x19\x7EF\x7F1\f\x17\x2\x2\x7F0\x7F2\a\xD8\x2\x2\x7F1"+
		"\x7F0\x3\x2\x2\x2\x7F1\x7F2\x3\x2\x2\x2\x7F2\x7F3\x3\x2\x2\x2\x7F3\x7F5"+
		"\a\xBC\x2\x2\x7F4\x7F6\a\xD8\x2\x2\x7F5\x7F4\x3\x2\x2\x2\x7F5\x7F6\x3"+
		"\x2\x2\x2\x7F6\x7F7\x3\x2\x2\x2\x7F7\x882\x5\xCEh\x18\x7F8\x7FA\f\x16"+
		"\x2\x2\x7F9\x7FB\a\xD8\x2\x2\x7FA\x7F9\x3\x2\x2\x2\x7FA\x7FB\x3\x2\x2"+
		"\x2\x7FB\x7FC\x3\x2\x2\x2\x7FC\x7FE\a\xBF\x2\x2\x7FD\x7FF\a\xD8\x2\x2"+
		"\x7FE\x7FD\x3\x2\x2\x2\x7FE\x7FF\x3\x2\x2\x2\x7FF\x800\x3\x2\x2\x2\x800"+
		"\x882\x5\xCEh\x17\x801\x803\f\x15\x2\x2\x802\x804\a\xD8\x2\x2\x803\x802"+
		"\x3\x2\x2\x2\x803\x804\x3\x2\x2\x2\x804\x805\x3\x2\x2\x2\x805\x807\a\xBD"+
		"\x2\x2\x806\x808\a\xD8\x2\x2\x807\x806\x3\x2\x2\x2\x807\x808\x3\x2\x2"+
		"\x2\x808\x809\x3\x2\x2\x2\x809\x882\x5\xCEh\x16\x80A\x80C\f\x14\x2\x2"+
		"\x80B\x80D\a\xD8\x2\x2\x80C\x80B\x3\x2\x2\x2\x80C\x80D\x3\x2\x2\x2\x80D"+
		"\x80E\x3\x2\x2\x2\x80E\x810\a\xC1\x2\x2\x80F\x811\a\xD8\x2\x2\x810\x80F"+
		"\x3\x2\x2\x2\x810\x811\x3\x2\x2\x2\x811\x812\x3\x2\x2\x2\x812\x882\x5"+
		"\xCEh\x15\x813\x815\f\x13\x2\x2\x814\x816\a\xD8\x2\x2\x815\x814\x3\x2"+
		"\x2\x2\x815\x816\x3\x2\x2\x2\x816\x817\x3\x2\x2\x2\x817\x819\a\xC5\x2"+
		"\x2\x818\x81A\a\xD8\x2\x2\x819\x818\x3\x2\x2\x2\x819\x81A\x3\x2\x2\x2"+
		"\x81A\x81B\x3\x2\x2\x2\x81B\x882\x5\xCEh\x14\x81C\x81E\f\x12\x2\x2\x81D"+
		"\x81F\a\xD8\x2\x2\x81E\x81D\x3\x2\x2\x2\x81E\x81F\x3\x2\x2\x2\x81F\x820"+
		"\x3\x2\x2\x2\x820\x822\a\xBA\x2\x2\x821\x823\a\xD8\x2\x2\x822\x821\x3"+
		"\x2\x2\x2\x822\x823\x3\x2\x2\x2\x823\x824\x3\x2\x2\x2\x824\x882\x5\xCE"+
		"h\x13\x825\x826\f\x11\x2\x2\x826\x827\a\xD8\x2\x2\x827\x828\a\xB2\x2\x2"+
		"\x828\x829\a\xD8\x2\x2\x829\x882\x5\xCEh\x12\x82A\x82C\f\xE\x2\x2\x82B"+
		"\x82D\a\xD8\x2\x2\x82C\x82B\x3\x2\x2\x2\x82C\x82D\x3\x2\x2\x2\x82D\x82E"+
		"\x3\x2\x2\x2\x82E\x830\a\xC7\x2\x2\x82F\x831\a\xD8\x2\x2\x830\x82F\x3"+
		"\x2\x2\x2\x830\x831\x3\x2\x2\x2\x831\x832\x3\x2\x2\x2\x832\x882\x5\xCE"+
		"h\xF\x833\x835\f\r\x2\x2\x834\x836\a\xD8\x2\x2\x835\x834\x3\x2\x2\x2\x835"+
		"\x836\x3\x2\x2\x2\x836\x837\x3\x2\x2\x2\x837\x839\ag\x2\x2\x838\x83A\a"+
		"\xD8\x2\x2\x839\x838\x3\x2\x2\x2\x839\x83A\x3\x2\x2\x2\x83A\x83B\x3\x2"+
		"\x2\x2\x83B\x882\x5\xCEh\xE\x83C\x83E\f\f\x2\x2\x83D\x83F\a\xD8\x2\x2"+
		"\x83E\x83D\x3\x2\x2\x2\x83E\x83F\x3\x2\x2\x2\x83F\x840\x3\x2\x2\x2\x840"+
		"\x842\a\xB7\x2\x2\x841\x843\a\xD8\x2\x2\x842\x841\x3\x2\x2\x2\x842\x843"+
		"\x3\x2\x2\x2\x843\x844\x3\x2\x2\x2\x844\x882\x5\xCEh\r\x845\x847\f\v\x2"+
		"\x2\x846\x848\a\xD8\x2\x2\x847\x846\x3\x2\x2\x2\x847\x848\x3\x2\x2\x2"+
		"\x848\x849\x3\x2\x2\x2\x849\x84B\a\xC4\x2\x2\x84A\x84C\a\xD8\x2\x2\x84B"+
		"\x84A\x3\x2\x2\x2\x84B\x84C\x3\x2\x2\x2\x84C\x84D\x3\x2\x2\x2\x84D\x882"+
		"\x5\xCEh\f\x84E\x850\f\n\x2\x2\x84F\x851\a\xD8\x2\x2\x850\x84F\x3\x2\x2"+
		"\x2\x850\x851\x3\x2\x2\x2\x851\x852\x3\x2\x2\x2\x852\x854\a\xC2\x2\x2"+
		"\x853\x855\a\xD8\x2\x2\x854\x853\x3\x2\x2\x2\x854\x855\x3\x2\x2\x2\x855"+
		"\x856\x3\x2\x2\x2\x856\x882\x5\xCEh\v\x857\x859\f\t\x2\x2\x858\x85A\a"+
		"\xD8\x2\x2\x859\x858\x3\x2\x2\x2\x859\x85A\x3\x2\x2\x2\x85A\x85B\x3\x2"+
		"\x2\x2\x85B\x85D\a\xC9\x2\x2\x85C\x85E\a\xD8\x2\x2\x85D\x85C\x3\x2\x2"+
		"\x2\x85D\x85E\x3\x2\x2\x2\x85E\x85F\x3\x2\x2\x2\x85F\x882\x5\xCEh\n\x860"+
		"\x861\f\b\x2\x2\x861\x862\a\xD8\x2\x2\x862\x863\aL\x2\x2\x863\x864\a\xD8"+
		"\x2\x2\x864\x882\x5\xCEh\t\x865\x866\f\a\x2\x2\x866\x867\a\xD8\x2\x2\x867"+
		"\x868\a\x39\x2\x2\x868\x869\a\xD8\x2\x2\x869\x882\x5\xCEh\b\x86A\x86C"+
		"\f\x6\x2\x2\x86B\x86D\a\xD8\x2\x2\x86C\x86B\x3\x2\x2\x2\x86C\x86D\x3\x2"+
		"\x2\x2\x86D\x86E\x3\x2\x2\x2\x86E\x870\a\xB1\x2\x2\x86F\x871\a\xD8\x2"+
		"\x2\x870\x86F\x3\x2\x2\x2\x870\x871\x3\x2\x2\x2\x871\x872\x3\x2\x2\x2"+
		"\x872\x882\x5\xCEh\a\x873\x875\f\x5\x2\x2\x874\x876\a\xD8\x2\x2\x875\x874"+
		"\x3\x2\x2\x2\x875\x876\x3\x2\x2\x2\x876\x877\x3\x2\x2\x2\x877\x879\ax"+
		"\x2\x2\x878\x87A\a\xD8\x2\x2\x879\x878\x3\x2\x2\x2\x879\x87A\x3\x2\x2"+
		"\x2\x87A\x87B\x3\x2\x2\x2\x87B\x882\x5\xCEh\x6\x87C\x87D\f\x4\x2\x2\x87D"+
		"\x87E\a\xD8\x2\x2\x87E\x87F\a\x6\x2\x2\x87F\x880\a\xD8\x2\x2\x880\x882"+
		"\x5\xCEh\x5\x881\x7E5\x3\x2\x2\x2\x881\x7EA\x3\x2\x2\x2\x881\x7EF\x3\x2"+
		"\x2\x2\x881\x7F8\x3\x2\x2\x2\x881\x801\x3\x2\x2\x2\x881\x80A\x3\x2\x2"+
		"\x2\x881\x813\x3\x2\x2\x2\x881\x81C\x3\x2\x2\x2\x881\x825\x3\x2\x2\x2"+
		"\x881\x82A\x3\x2\x2\x2\x881\x833\x3\x2\x2\x2\x881\x83C\x3\x2\x2\x2\x881"+
		"\x845\x3\x2\x2\x2\x881\x84E\x3\x2\x2\x2\x881\x857\x3\x2\x2\x2\x881\x860"+
		"\x3\x2\x2\x2\x881\x865\x3\x2\x2\x2\x881\x86A\x3\x2\x2\x2\x881\x873\x3"+
		"\x2\x2\x2\x881\x87C\x3\x2\x2\x2\x882\x885\x3\x2\x2\x2\x883\x881\x3\x2"+
		"\x2\x2\x883\x884\x3\x2\x2\x2\x884\xCF\x3\x2\x2\x2\x885\x883\x3\x2\x2\x2"+
		"\x886\x88A\a)\x2\x2\x887\x88A\a\x99\x2\x2\x888\x88A\x5\x122\x92\x2\x889"+
		"\x886\x3\x2\x2\x2\x889\x887\x3\x2\x2\x2\x889\x888\x3\x2\x2\x2\x88A\x88B"+
		"\x3\x2\x2\x2\x88B\x88E\a\xD8\x2\x2\x88C\x88D\a\xAF\x2\x2\x88D\x88F\a\xD8"+
		"\x2\x2\x88E\x88C\x3\x2\x2\x2\x88E\x88F\x3\x2\x2\x2\x88F\x890\x3\x2\x2"+
		"\x2\x890\x891\x5\xD2j\x2\x891\xD1\x3\x2\x2\x2\x892\x89D\x5\xD4k\x2\x893"+
		"\x895\a\xD8\x2\x2\x894\x893\x3\x2\x2\x2\x894\x895\x3\x2\x2\x2\x895\x896"+
		"\x3\x2\x2\x2\x896\x898\a\xB6\x2\x2\x897\x899\a\xD8\x2\x2\x898\x897\x3"+
		"\x2\x2\x2\x898\x899\x3\x2\x2\x2\x899\x89A\x3\x2\x2\x2\x89A\x89C\x5\xD4"+
		"k\x2\x89B\x894\x3\x2\x2\x2\x89C\x89F\x3\x2\x2\x2\x89D\x89B\x3\x2\x2\x2"+
		"\x89D\x89E\x3\x2\x2\x2\x89E\xD3\x3\x2\x2\x2\x89F\x89D\x3\x2\x2\x2\x8A0"+
		"\x8B2\x5\x106\x84\x2\x8A1\x8A3\a\xD8\x2\x2\x8A2\x8A1\x3\x2\x2\x2\x8A2"+
		"\x8A3\x3\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A6\a\xC0\x2\x2\x8A5\x8A7"+
		"\a\xD8\x2\x2\x8A6\x8A5\x3\x2\x2\x2\x8A6\x8A7\x3\x2\x2\x2\x8A7\x8AC\x3"+
		"\x2\x2\x2\x8A8\x8AA\x5\x102\x82\x2\x8A9\x8AB\a\xD8\x2\x2\x8AA\x8A9\x3"+
		"\x2\x2\x2\x8AA\x8AB\x3\x2\x2\x2\x8AB\x8AD\x3\x2\x2\x2\x8AC\x8A8\x3\x2"+
		"\x2\x2\x8AC\x8AD\x3\x2\x2\x2\x8AD\x8AE\x3\x2\x2\x2\x8AE\x8B0\a\xCA\x2"+
		"\x2\x8AF\x8B1\a\xD8\x2\x2\x8B0\x8AF\x3\x2\x2\x2\x8B0\x8B1\x3\x2\x2\x2"+
		"\x8B1\x8B3\x3\x2\x2\x2\x8B2\x8A2\x3\x2\x2\x2\x8B2\x8B3\x3\x2\x2\x2\x8B3"+
		"\x8B5\x3\x2\x2\x2\x8B4\x8B6\x5\x120\x91\x2\x8B5\x8B4\x3\x2\x2\x2\x8B5"+
		"\x8B6\x3\x2\x2\x2\x8B6\x8B9\x3\x2\x2\x2\x8B7\x8B8\a\xD8\x2\x2\x8B8\x8BA"+
		"\x5\x108\x85\x2\x8B9\x8B7\x3\x2\x2\x2\x8B9\x8BA\x3\x2\x2\x2\x8BA\xD5\x3"+
		"\x2\x2\x2\x8BB\x8BC\a\xAC\x2\x2\x8BC\x8BD\a\xD8\x2\x2\x8BD\x8BF\x5\xCE"+
		"h\x2\x8BE\x8C0\a\xD6\x2\x2\x8BF\x8BE\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2"+
		"\x8C1\x8BF\x3\x2\x2\x2\x8C1\x8C2\x3\x2\x2\x2\x8C2\x8C6\x3\x2\x2\x2\x8C3"+
		"\x8C5\x5\"\x12\x2\x8C4\x8C3\x3\x2\x2\x2\x8C5\x8C8\x3\x2\x2\x2\x8C6\x8C4"+
		"\x3\x2\x2\x2\x8C6\x8C7\x3\x2\x2\x2\x8C7\x8CC\x3\x2\x2\x2\x8C8\x8C6\x3"+
		"\x2\x2\x2\x8C9\x8CB\a\xD6\x2\x2\x8CA\x8C9\x3\x2\x2\x2\x8CB\x8CE\x3\x2"+
		"\x2\x2\x8CC\x8CA\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CF\x3\x2\x2"+
		"\x2\x8CE\x8CC\x3\x2\x2\x2\x8CF\x8D0\a\xAB\x2\x2\x8D0\xD7\x3\x2\x2\x2\x8D1"+
		"\x8D2\a\xAD\x2\x2\x8D2\x8D3\a\xD8\x2\x2\x8D3\x8D5\x5\xCEh\x2\x8D4\x8D6"+
		"\a\xD8\x2\x2\x8D5\x8D4\x3\x2\x2\x2\x8D5\x8D6\x3\x2\x2\x2\x8D6\x8D7\x3"+
		"\x2\x2\x2\x8D7\x8D9\a\xB6\x2\x2\x8D8\x8DA\a\xD8\x2\x2\x8D9\x8D8\x3\x2"+
		"\x2\x2\x8D9\x8DA\x3\x2\x2\x2\x8DA\x8DB\x3\x2\x2\x2\x8DB\x8DC\x5\xCEh\x2"+
		"\x8DC\xD9\x3\x2\x2\x2\x8DD\x8DE\a\xAE\x2\x2\x8DE\x8DF\a\xD8\x2\x2\x8DF"+
		"\x8E1\x5\xEAv\x2\x8E0\x8E2\a\xD6\x2\x2\x8E1\x8E0\x3\x2\x2\x2\x8E2\x8E3"+
		"\x3\x2\x2\x2\x8E3\x8E1\x3\x2\x2\x2\x8E3\x8E4\x3\x2\x2\x2\x8E4\x8EB\x3"+
		"\x2\x2\x2\x8E5\x8E7\x5\"\x12\x2\x8E6\x8E8\a\xD6\x2\x2\x8E7\x8E6\x3\x2"+
		"\x2\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\x8E7\x3\x2\x2\x2\x8E9\x8EA\x3\x2\x2"+
		"\x2\x8EA\x8EC\x3\x2\x2\x2\x8EB\x8E5\x3\x2\x2\x2\x8EB\x8EC\x3\x2\x2\x2"+
		"\x8EC\x8ED\x3\x2\x2\x2\x8ED\x8EE\a\x36\x2\x2\x8EE\xDB\x3\x2\x2\x2\x8EF"+
		"\x8F0\a\xB0\x2\x2\x8F0\x8F1\a\xD8\x2\x2\x8F1\x8F3\x5\xCEh\x2\x8F2\x8F4"+
		"\a\xD8\x2\x2\x8F3\x8F2\x3\x2\x2\x2\x8F3\x8F4\x3\x2\x2\x2\x8F4\x8F5\x3"+
		"\x2\x2\x2\x8F5\x8FA\a\xB6\x2\x2\x8F6\x8F8\a\xD8\x2\x2\x8F7\x8F6\x3\x2"+
		"\x2\x2\x8F7\x8F8\x3\x2\x2\x2\x8F8\x8F9\x3\x2\x2\x2\x8F9\x8FB\x5\x8A\x46"+
		"\x2\x8FA\x8F7\x3\x2\x2\x2\x8FA\x8FB\x3\x2\x2\x2\x8FB\xDD\x3\x2\x2\x2\x8FC"+
		"\x8FF\x5\xE0q\x2\x8FD\x8FF\x5\xE2r\x2\x8FE\x8FC\x3\x2\x2\x2\x8FE\x8FD"+
		"\x3\x2\x2\x2\x8FF\xDF\x3\x2\x2\x2\x900\x901\a\x12\x2\x2\x901\x902\a\xD8"+
		"\x2\x2\x902\x904\x5\x106\x84\x2\x903\x905\x5\x120\x91\x2\x904\x903\x3"+
		"\x2\x2\x2\x904\x905\x3\x2\x2\x2\x905\x913\x3\x2\x2\x2\x906\x908\a\xD8"+
		"\x2\x2\x907\x906\x3\x2\x2\x2\x907\x908\x3\x2\x2\x2\x908\x909\x3\x2\x2"+
		"\x2\x909\x90B\a\xC0\x2\x2\x90A\x90C\a\xD8\x2\x2\x90B\x90A\x3\x2\x2\x2"+
		"\x90B\x90C\x3\x2\x2\x2\x90C\x90D\x3\x2\x2\x2\x90D\x90F\x5\xF6|\x2\x90E"+
		"\x910\a\xD8\x2\x2\x90F\x90E\x3\x2\x2\x2\x90F\x910\x3\x2\x2\x2\x910\x911"+
		"\x3\x2\x2\x2\x911\x912\a\xCA\x2\x2\x912\x914\x3\x2\x2\x2\x913\x907\x3"+
		"\x2\x2\x2\x913\x914\x3\x2\x2\x2\x914\xE1\x3\x2\x2\x2\x915\x916\a\x12\x2"+
		"\x2\x916\x918\a\xD8\x2\x2\x917\x919\x5\xEAv\x2\x918\x917\x3\x2\x2\x2\x918"+
		"\x919\x3\x2\x2\x2\x919\x91A\x3\x2\x2\x2\x91A\x91B\a\xB9\x2\x2\x91B\x91D"+
		"\x5\x106\x84\x2\x91C\x91E\x5\x120\x91\x2\x91D\x91C\x3\x2\x2\x2\x91D\x91E"+
		"\x3\x2\x2\x2\x91E\x92C\x3\x2\x2\x2\x91F\x921\a\xD8\x2\x2\x920\x91F\x3"+
		"\x2\x2\x2\x920\x921\x3\x2\x2\x2\x921\x922\x3\x2\x2\x2\x922\x924\a\xC0"+
		"\x2\x2\x923\x925\a\xD8\x2\x2\x924\x923\x3\x2\x2\x2\x924\x925\x3\x2\x2"+
		"\x2\x925\x926\x3\x2\x2\x2\x926\x928\x5\xF6|\x2\x927\x929\a\xD8\x2\x2\x928"+
		"\x927\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929\x92A\x3\x2\x2\x2\x92A\x92B"+
		"\a\xCA\x2\x2\x92B\x92D\x3\x2\x2\x2\x92C\x920\x3\x2\x2\x2\x92C\x92D\x3"+
		"\x2\x2\x2\x92D\xE3\x3\x2\x2\x2\x92E\x931\x5\xE6t\x2\x92F\x931\x5\xE8u"+
		"\x2\x930\x92E\x3\x2\x2\x2\x930\x92F\x3\x2\x2\x2\x931\xE5\x3\x2\x2\x2\x932"+
		"\x935\x5\x10C\x87\x2\x933\x934\a\xD8\x2\x2\x934\x936\x5\xF6|\x2\x935\x933"+
		"\x3\x2\x2\x2\x935\x936\x3\x2\x2\x2\x936\xE7\x3\x2\x2\x2\x937\x939\x5\xEA"+
		"v\x2\x938\x937\x3\x2\x2\x2\x938\x939\x3\x2\x2\x2\x939\x93A\x3\x2\x2\x2"+
		"\x93A\x93B\a\xB9\x2\x2\x93B\x93D\x5\x106\x84\x2\x93C\x93E\x5\x120\x91"+
		"\x2\x93D\x93C\x3\x2\x2\x2\x93D\x93E\x3\x2\x2\x2\x93E\x941\x3\x2\x2\x2"+
		"\x93F\x940\a\xD8\x2\x2\x940\x942\x5\xF6|\x2\x941\x93F\x3\x2\x2\x2\x941"+
		"\x942\x3\x2\x2\x2\x942\x944\x3\x2\x2\x2\x943\x945\x5\xFA~\x2\x944\x943"+
		"\x3\x2\x2\x2\x944\x945\x3\x2\x2\x2\x945\xE9\x3\x2\x2\x2\x946\x94B\x5\xF0"+
		"y\x2\x947\x94B\x5\xECw\x2\x948\x94B\x5\xEEx\x2\x949\x94B\x5\xF4{\x2\x94A"+
		"\x946\x3\x2\x2\x2\x94A\x947\x3\x2\x2\x2\x94A\x948\x3\x2\x2\x2\x94A\x949"+
		"\x3\x2\x2\x2\x94B\xEB\x3\x2\x2\x2\x94C\x94E\x5\x106\x84\x2\x94D\x94F\x5"+
		"\x120\x91\x2\x94E\x94D\x3\x2\x2\x2\x94E\x94F\x3\x2\x2\x2\x94F\x951\x3"+
		"\x2\x2\x2\x950\x952\x5\xFA~\x2\x951\x950\x3\x2\x2\x2\x951\x952\x3\x2\x2"+
		"\x2\x952\xED\x3\x2\x2\x2\x953\x956\x5\x106\x84\x2\x954\x956\x5\x10A\x86"+
		"\x2\x955\x953\x3\x2\x2\x2\x955\x954\x3\x2\x2\x2\x956\x958\x3\x2\x2\x2"+
		"\x957\x959\x5\x120\x91\x2\x958\x957\x3\x2\x2\x2\x958\x959\x3\x2\x2\x2"+
		"\x959\x95B\x3\x2\x2\x2\x95A\x95C\a\xD8\x2\x2\x95B\x95A\x3\x2\x2\x2\x95B"+
		"\x95C\x3\x2\x2\x2\x95C\x95D\x3\x2\x2\x2\x95D\x95F\a\xC0\x2\x2\x95E\x960"+
		"\a\xD8\x2\x2\x95F\x95E\x3\x2\x2\x2\x95F\x960\x3\x2\x2\x2\x960\x965\x3"+
		"\x2\x2\x2\x961\x963\x5\xF6|\x2\x962\x964\a\xD8\x2\x2\x963\x962\x3\x2\x2"+
		"\x2\x963\x964\x3\x2\x2\x2\x964\x966\x3\x2\x2\x2\x965\x961\x3\x2\x2\x2"+
		"\x965\x966\x3\x2\x2\x2\x966\x967\x3\x2\x2\x2\x967\x969\a\xCA\x2\x2\x968"+
		"\x96A\x5\xFA~\x2\x969\x968\x3\x2\x2\x2\x969\x96A\x3\x2\x2\x2\x96A\xEF"+
		"\x3\x2\x2\x2\x96B\x96E\x5\xECw\x2\x96C\x96E\x5\xEEx\x2\x96D\x96B\x3\x2"+
		"\x2\x2\x96D\x96C\x3\x2\x2\x2\x96D\x96E\x3\x2\x2\x2\x96E\x970\x3\x2\x2"+
		"\x2\x96F\x971\x5\xF2z\x2\x970\x96F\x3\x2\x2\x2\x971\x972\x3\x2\x2\x2\x972"+
		"\x970\x3\x2\x2\x2\x972\x973\x3\x2\x2\x2\x973\x975\x3\x2\x2\x2\x974\x976"+
		"\x5\xFA~\x2\x975\x974\x3\x2\x2\x2\x975\x976\x3\x2\x2\x2\x976\xF1\x3\x2"+
		"\x2\x2\x977\x97A\a\xB9\x2\x2\x978\x97B\x5\xECw\x2\x979\x97B\x5\xEEx\x2"+
		"\x97A\x978\x3\x2\x2\x2\x97A\x979\x3\x2\x2\x2\x97B\xF3\x3\x2\x2\x2\x97C"+
		"\x97D\x5\xFA~\x2\x97D\xF5\x3\x2\x2\x2\x97E\x980\x5\xF8}\x2\x97F\x97E\x3"+
		"\x2\x2\x2\x97F\x980\x3\x2\x2\x2\x980\x982\x3\x2\x2\x2\x981\x983\a\xD8"+
		"\x2\x2\x982\x981\x3\x2\x2\x2\x982\x983\x3\x2\x2\x2\x983\x984\x3\x2\x2"+
		"\x2\x984\x986\t\v\x2\x2\x985\x987\a\xD8\x2\x2\x986\x985\x3\x2\x2\x2\x986"+
		"\x987\x3\x2\x2\x2\x987\x989\x3\x2\x2\x2\x988\x97F\x3\x2\x2\x2\x989\x98C"+
		"\x3\x2\x2\x2\x98A\x988\x3\x2\x2\x2\x98A\x98B\x3\x2\x2\x2\x98B\x98D\x3"+
		"\x2\x2\x2\x98C\x98A\x3\x2\x2\x2\x98D\x99A\x5\xF8}\x2\x98E\x990\a\xD8\x2"+
		"\x2\x98F\x98E\x3\x2\x2\x2\x98F\x990\x3\x2\x2\x2\x990\x991\x3\x2\x2\x2"+
		"\x991\x993\t\v\x2\x2\x992\x994\a\xD8\x2\x2\x993\x992\x3\x2\x2\x2\x993"+
		"\x994\x3\x2\x2\x2\x994\x996\x3\x2\x2\x2\x995\x997\x5\xF8}\x2\x996\x995"+
		"\x3\x2\x2\x2\x996\x997\x3\x2\x2\x2\x997\x999\x3\x2\x2\x2\x998\x98F\x3"+
		"\x2\x2\x2\x999\x99C\x3\x2\x2\x2\x99A\x998\x3\x2\x2\x2\x99A\x99B\x3\x2"+
		"\x2\x2\x99B\xF7\x3\x2\x2\x2\x99C\x99A\x3\x2\x2\x2\x99D\x99E\t\r\x2\x2"+
		"\x99E\x9A0\a\xD8\x2\x2\x99F\x99D\x3\x2\x2\x2\x99F\x9A0\x3\x2\x2\x2\x9A0"+
		"\x9A1\x3\x2\x2\x2\x9A1\x9A2\x5\xCEh\x2\x9A2\xF9\x3\x2\x2\x2\x9A3\x9A4"+
		"\a\xBB\x2\x2\x9A4\x9A6\x5\x106\x84\x2\x9A5\x9A7\x5\x120\x91\x2\x9A6\x9A5"+
		"\x3\x2\x2\x2\x9A6\x9A7\x3\x2\x2\x2\x9A7\xFB\x3\x2\x2\x2\x9A8\x9BA\a\xC0"+
		"\x2\x2\x9A9\x9AB\a\xD8\x2\x2\x9AA\x9A9\x3\x2\x2\x2\x9AA\x9AB\x3\x2\x2"+
		"\x2\x9AB\x9AC\x3\x2\x2\x2\x9AC\x9B7\x5\xFE\x80\x2\x9AD\x9AF\a\xD8\x2\x2"+
		"\x9AE\x9AD\x3\x2\x2\x2\x9AE\x9AF\x3\x2\x2\x2\x9AF\x9B0\x3\x2\x2\x2\x9B0"+
		"\x9B2\a\xB6\x2\x2\x9B1\x9B3\a\xD8\x2\x2\x9B2\x9B1\x3\x2\x2\x2\x9B2\x9B3"+
		"\x3\x2\x2\x2\x9B3\x9B4\x3\x2\x2\x2\x9B4\x9B6\x5\xFE\x80\x2\x9B5\x9AE\x3"+
		"\x2\x2\x2\x9B6\x9B9\x3\x2\x2\x2\x9B7\x9B5\x3\x2\x2\x2\x9B7\x9B8\x3\x2"+
		"\x2\x2\x9B8\x9BB\x3\x2\x2\x2\x9B9\x9B7\x3\x2\x2\x2\x9BA\x9AA\x3\x2\x2"+
		"\x2\x9BA\x9BB\x3\x2\x2\x2\x9BB\x9BD\x3\x2\x2\x2\x9BC\x9BE\a\xD8\x2\x2"+
		"\x9BD\x9BC\x3\x2\x2\x2\x9BD\x9BE\x3\x2\x2\x2\x9BE\x9BF\x3\x2\x2\x2\x9BF"+
		"\x9C0\a\xCA\x2\x2\x9C0\xFD\x3\x2\x2\x2\x9C1\x9C2\as\x2\x2\x9C2\x9C4\a"+
		"\xD8\x2\x2\x9C3\x9C1\x3\x2\x2\x2\x9C3\x9C4\x3\x2\x2\x2\x9C4\x9C7\x3\x2"+
		"\x2\x2\x9C5\x9C6\t\xE\x2\x2\x9C6\x9C8\a\xD8\x2\x2\x9C7\x9C5\x3\x2\x2\x2"+
		"\x9C7\x9C8\x3\x2\x2\x2\x9C8\x9CB\x3\x2\x2\x2\x9C9\x9CA\az\x2\x2\x9CA\x9CC"+
		"\a\xD8\x2\x2\x9CB\x9C9\x3\x2\x2\x2\x9CB\x9CC\x3\x2\x2\x2\x9CC\x9CD\x3"+
		"\x2\x2\x2\x9CD\x9CF\x5\x106\x84\x2\x9CE\x9D0\x5\x120\x91\x2\x9CF\x9CE"+
		"\x3\x2\x2\x2\x9CF\x9D0\x3\x2\x2\x2\x9D0\x9D9\x3\x2\x2\x2\x9D1\x9D3\a\xD8"+
		"\x2\x2\x9D2\x9D1\x3\x2\x2\x2\x9D2\x9D3\x3\x2\x2\x2\x9D3\x9D4\x3\x2\x2"+
		"\x2\x9D4\x9D6\a\xC0\x2\x2\x9D5\x9D7\a\xD8\x2\x2\x9D6\x9D5\x3\x2\x2\x2"+
		"\x9D6\x9D7\x3\x2\x2\x2\x9D7\x9D8\x3\x2\x2\x2\x9D8\x9DA\a\xCA\x2\x2\x9D9"+
		"\x9D2\x3\x2\x2\x2\x9D9\x9DA\x3\x2\x2\x2\x9DA\x9DD\x3\x2\x2\x2\x9DB\x9DC"+
		"\a\xD8\x2\x2\x9DC\x9DE\x5\x108\x85\x2\x9DD\x9DB\x3\x2\x2\x2\x9DD\x9DE"+
		"\x3\x2\x2\x2\x9DE\x9E3\x3\x2\x2\x2\x9DF\x9E1\a\xD8\x2\x2\x9E0\x9DF\x3"+
		"\x2\x2\x2\x9E0\x9E1\x3\x2\x2\x2\x9E1\x9E2\x3\x2\x2\x2\x9E2\x9E4\x5\x100"+
		"\x81\x2\x9E3\x9E0\x3\x2\x2\x2\x9E3\x9E4\x3\x2\x2\x2\x9E4\xFF\x3\x2\x2"+
		"\x2\x9E5\x9E7\a\xBA\x2\x2\x9E6\x9E8\a\xD8\x2\x2\x9E7\x9E6\x3\x2\x2\x2"+
		"\x9E7\x9E8\x3\x2\x2\x2\x9E8\x9EB\x3\x2\x2\x2\x9E9\x9EC\x5\x118\x8D\x2"+
		"\x9EA\x9EC\x5\x106\x84\x2\x9EB\x9E9\x3\x2\x2\x2\x9EB\x9EA\x3\x2\x2\x2"+
		"\x9EC\x101\x3\x2\x2\x2\x9ED\x9F8\x5\x104\x83\x2\x9EE\x9F0\a\xD8\x2\x2"+
		"\x9EF\x9EE\x3\x2\x2\x2\x9EF\x9F0\x3\x2\x2\x2\x9F0\x9F1\x3\x2\x2\x2\x9F1"+
		"\x9F3\a\xB6\x2\x2\x9F2\x9F4\a\xD8\x2\x2\x9F3\x9F2\x3\x2\x2\x2\x9F3\x9F4"+
		"\x3\x2\x2\x2\x9F4\x9F5\x3\x2\x2\x2\x9F5\x9F7\x5\x104\x83\x2\x9F6\x9EF"+
		"\x3\x2\x2\x2\x9F7\x9FA\x3\x2\x2\x2\x9F8\x9F6\x3\x2\x2\x2\x9F8\x9F9\x3"+
		"\x2\x2\x2\x9F9\x103\x3\x2\x2\x2\x9FA\x9F8\x3\x2\x2\x2\x9FB\x9FC\x5\xCE"+
		"h\x2\x9FC\x9FD\a\xD8\x2\x2\x9FD\x9FE\a\xA2\x2\x2\x9FE\x9FF\a\xD8\x2\x2"+
		"\x9FF\xA01\x3\x2\x2\x2\xA00\x9FB\x3\x2\x2\x2\xA00\xA01\x3\x2\x2\x2\xA01"+
		"\xA02\x3\x2\x2\x2\xA02\xA03\x5\xCEh\x2\xA03\x105\x3\x2\x2\x2\xA04\xA07"+
		"\a\xD4\x2\x2\xA05\xA07\x5\x124\x93\x2\xA06\xA04\x3\x2\x2\x2\xA06\xA05"+
		"\x3\x2\x2\x2\xA07\xA08\x3\x2\x2\x2\xA08\xA06\x3\x2\x2\x2\xA08\xA09\x3"+
		"\x2\x2\x2\xA09\xA13\x3\x2\x2\x2\xA0A\xA0D\a\xCC\x2\x2\xA0B\xA0E\a\xD4"+
		"\x2\x2\xA0C\xA0E\x5\x124\x93\x2\xA0D\xA0B\x3\x2\x2\x2\xA0D\xA0C\x3\x2"+
		"\x2\x2\xA0E\xA0F\x3\x2\x2\x2\xA0F\xA0D\x3\x2\x2\x2\xA0F\xA10\x3\x2\x2"+
		"\x2\xA10\xA11\x3\x2\x2\x2\xA11\xA13\a\xCD\x2\x2\xA12\xA06\x3\x2\x2\x2"+
		"\xA12\xA0A\x3\x2\x2\x2\xA13\x107\x3\x2\x2\x2\xA14\xA15\a\n\x2\x2\xA15"+
		"\xA18\a\xD8\x2\x2\xA16\xA17\aj\x2\x2\xA17\xA19\a\xD8\x2\x2\xA18\xA16\x3"+
		"\x2\x2\x2\xA18\xA19\x3\x2\x2\x2\xA19\xA1A\x3\x2\x2\x2\xA1A\xA1D\x5\x11E"+
		"\x90\x2\xA1B\xA1C\a\xD8\x2\x2\xA1C\xA1E\x5\x112\x8A\x2\xA1D\xA1B\x3\x2"+
		"\x2\x2\xA1D\xA1E\x3\x2\x2\x2\xA1E\x109\x3\x2\x2\x2\xA1F\xA20\t\xF\x2\x2"+
		"\xA20\x10B\x3\x2\x2\x2\xA21\xA26\a\xD4\x2\x2\xA22\xA25\x5\x124\x93\x2"+
		"\xA23\xA25\a\xD4\x2\x2\xA24\xA22\x3\x2\x2\x2\xA24\xA23\x3\x2\x2\x2\xA25"+
		"\xA28\x3\x2\x2\x2\xA26\xA24\x3\x2\x2\x2\xA26\xA27\x3\x2\x2\x2\xA27\xA31"+
		"\x3\x2\x2\x2\xA28\xA26\x3\x2\x2\x2\xA29\xA2C\x5\x124\x93\x2\xA2A\xA2D"+
		"\x5\x124\x93\x2\xA2B\xA2D\a\xD4\x2\x2\xA2C\xA2A\x3\x2\x2\x2\xA2C\xA2B"+
		"\x3\x2\x2\x2\xA2D\xA2E\x3\x2\x2\x2\xA2E\xA2C\x3\x2\x2\x2\xA2E\xA2F\x3"+
		"\x2\x2\x2\xA2F\xA31\x3\x2\x2\x2\xA30\xA21\x3\x2\x2\x2\xA30\xA29\x3\x2"+
		"\x2\x2\xA31\x10D\x3\x2\x2\x2\xA32\xA33\t\x10\x2\x2\xA33\x10F\x3\x2\x2"+
		"\x2\xA34\xA39\x5\x106\x84\x2\xA35\xA36\a\xB9\x2\x2\xA36\xA38\x5\x106\x84"+
		"\x2\xA37\xA35\x3\x2\x2\x2\xA38\xA3B\x3\x2\x2\x2\xA39\xA37\x3\x2\x2\x2"+
		"\xA39\xA3A\x3\x2\x2\x2\xA3A\x111\x3\x2\x2\x2\xA3B\xA39\x3\x2\x2\x2\xA3C"+
		"\xA3E\a\xC4\x2\x2\xA3D\xA3F\a\xD8\x2\x2\xA3E\xA3D\x3\x2\x2\x2\xA3E\xA3F"+
		"\x3\x2\x2\x2\xA3F\xA42\x3\x2\x2\x2\xA40\xA43\a\xD1\x2\x2\xA41\xA43\x5"+
		"\x106\x84\x2\xA42\xA40\x3\x2\x2\x2\xA42\xA41\x3\x2\x2\x2\xA43\x113\x3"+
		"\x2\x2\x2\xA44\xA4D\x5\x10C\x87\x2\xA45\xA47\a\xD8\x2\x2\xA46\xA45\x3"+
		"\x2\x2\x2\xA46\xA47\x3\x2\x2\x2\xA47\xA48\x3\x2\x2\x2\xA48\xA4A\a\xC2"+
		"\x2\x2\xA49\xA4B\a\xD8\x2\x2\xA4A\xA49\x3\x2\x2\x2\xA4A\xA4B\x3\x2\x2"+
		"\x2\xA4B\xA4C\x3\x2\x2\x2\xA4C\xA4E\x5\x10C\x87\x2\xA4D\xA46\x3\x2\x2"+
		"\x2\xA4D\xA4E\x3\x2\x2\x2\xA4E\x115\x3\x2\x2\x2\xA4F\xA50\x5\x106\x84"+
		"\x2\xA50\xA51\a\xB5\x2\x2\xA51\x117\x3\x2\x2\x2\xA52\xA53\t\x11\x2\x2"+
		"\xA53\x119\x3\x2\x2\x2\xA54\xA55\t\x12\x2\x2\xA55\x11B\x3\x2\x2\x2\xA56"+
		"\xA57\t\x13\x2\x2\xA57\x11D\x3\x2\x2\x2\xA58\xA5B\x5\x10A\x86\x2\xA59"+
		"\xA5B\x5\x110\x89\x2\xA5A\xA58\x3\x2\x2\x2\xA5A\xA59\x3\x2\x2\x2\xA5B"+
		"\xA64\x3\x2\x2\x2\xA5C\xA5E\a\xD8\x2\x2\xA5D\xA5C\x3\x2\x2\x2\xA5D\xA5E"+
		"\x3\x2\x2\x2\xA5E\xA5F\x3\x2\x2\x2\xA5F\xA61\a\xC0\x2\x2\xA60\xA62\a\xD8"+
		"\x2\x2\xA61\xA60\x3\x2\x2\x2\xA61\xA62\x3\x2\x2\x2\xA62\xA63\x3\x2\x2"+
		"\x2\xA63\xA65\a\xCA\x2\x2\xA64\xA5D\x3\x2\x2\x2\xA64\xA65\x3\x2\x2\x2"+
		"\xA65\x11F\x3\x2\x2\x2\xA66\xA67\t\x14\x2\x2\xA67\x121\x3\x2\x2\x2\xA68"+
		"\xA69\t\x15\x2\x2\xA69\x123\x3\x2\x2\x2\xA6A\xA6B\t\x16\x2\x2\xA6B\x125"+
		"\x3\x2\x2\x2\x1C6\x12A\x12F\x136\x138\x13B\x140\x144\x149\x14D\x152\x156"+
		"\x15B\x15F\x164\x168\x16D\x171\x175\x17A\x180\x18C\x192\x197\x19D\x1A1"+
		"\x1A5\x1AE\x1B2\x1B8\x1BC\x1C6\x1CC\x1D1\x1E0\x1E8\x1EC\x1F0\x1F4\x1F9"+
		"\x200\x203\x208\x24E\x254\x258\x25B\x26B\x26F\x274\x277\x27C\x282\x286"+
		"\x28B\x290\x294\x297\x29B\x2A1\x2A5\x2AC\x2B2\x2B5\x2BA\x2C4\x2C7\x2CA"+
		"\x2CE\x2D4\x2D8\x2DD\x2E4\x2E8\x2EC\x2F0\x2F3\x2F9\x2FF\x301\x30C\x312"+
		"\x314\x31C\x322\x32A\x331\x339\x33E\x345\x349\x34C\x351\x357\x35B\x360"+
		"\x36A\x370\x37A\x37E\x388\x391\x397\x399\x39E\x3A4\x3A8\x3AB\x3AF\x3BA"+
		"\x3BF\x3C5\x3C7\x3CD\x3CF\x3D4\x3D8\x3DE\x3E1\x3E5\x3EA\x3F0\x3F2\x3FA"+
		"\x3FE\x401\x404\x408\x41F\x425\x429\x42D\x437\x43D\x43F\x44B\x451\x453"+
		"\x459\x45F\x461\x46B\x46F\x474\x47C\x480\x484\x48C\x490\x49C\x4A0\x4A7"+
		"\x4A9\x4AF\x4B3\x4BB\x4BF\x4CB\x4D1\x4D3\x4DD\x4E3\x4E5\x4EB\x4F1\x4F3"+
		"\x4F7\x4FB\x4FF\x517\x521\x525\x52A\x535\x539\x53E\x54C\x550\x559\x55D"+
		"\x560\x564\x568\x56B\x56F\x573\x576\x57A\x57D\x581\x583\x588\x58C\x590"+
		"\x594\x596\x59C\x5A0\x5A3\x5A8\x5AC\x5B2\x5B5\x5B8\x5BC\x5C1\x5C7\x5C9"+
		"\x5D0\x5D4\x5DA\x5DD\x5E2\x5E8\x5EA\x5F1\x5F5\x5FB\x5FE\x603\x609\x60B"+
		"\x613\x617\x61A\x61D\x621\x629\x62D\x631\x633\x636\x63B\x641\x645\x649"+
		"\x64E\x653\x657\x65B\x660\x668\x66A\x676\x67A\x682\x686\x68E\x692\x696"+
		"\x69A\x69E\x6A2\x6AA\x6AE\x6BA\x6BF\x6C3\x6CB\x6CE\x6D3\x6D9\x6DB\x6E1"+
		"\x6E3\x6E8\x6EC\x6F1\x6F4\x6F8\x6FC\x707\x70D\x711\x714\x71A\x71E\x726"+
		"\x72A\x733\x737\x73D\x740\x745\x74B\x74D\x753\x757\x75E\x766\x76B\x772"+
		"\x776\x779\x77C\x77F\x783\x788\x791\x79B\x79F\x7A6\x7A8\x7AF\x7B3\x7B7"+
		"\x7BC\x7C0\x7CE\x7D2\x7D8\x7DD\x7E3\x7F1\x7F5\x7FA\x7FE\x803\x807\x80C"+
		"\x810\x815\x819\x81E\x822\x82C\x830\x835\x839\x83E\x842\x847\x84B\x850"+
		"\x854\x859\x85D\x86C\x870\x875\x879\x881\x883\x889\x88E\x894\x898\x89D"+
		"\x8A2\x8A6\x8AA\x8AC\x8B0\x8B2\x8B5\x8B9\x8C1\x8C6\x8CC\x8D5\x8D9\x8E3"+
		"\x8E9\x8EB\x8F3\x8F7\x8FA\x8FE\x904\x907\x90B\x90F\x913\x918\x91D\x920"+
		"\x924\x928\x92C\x930\x935\x938\x93D\x941\x944\x94A\x94E\x951\x955\x958"+
		"\x95B\x95F\x963\x965\x969\x96D\x972\x975\x97A\x97F\x982\x986\x98A\x98F"+
		"\x993\x996\x99A\x99F\x9A6\x9AA\x9AE\x9B2\x9B7\x9BA\x9BD\x9C3\x9C7\x9CB"+
		"\x9CF\x9D2\x9D6\x9D9\x9DD\x9E0\x9E3\x9E7\x9EB\x9EF\x9F3\x9F8\xA00\xA06"+
		"\xA08\xA0D\xA0F\xA12\xA18\xA1D\xA24\xA26\xA2C\xA2E\xA30\xA39\xA3E\xA42"+
		"\xA46\xA4A\xA4D\xA5A\xA5D\xA61\xA64";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace VBTranspiler.Parser
