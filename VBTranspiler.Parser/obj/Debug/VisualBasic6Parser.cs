//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Projects\Git\VBTranspiler\VBTranspiler.Parser\VisualBasic6.g4 by ANTLR 4.6.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace VBTranspiler.Parser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1")]
[System.CLSCompliant(false)]
public partial class VisualBasic6Parser : Parser {
	public const int
		ACCESS=1, ADDRESSOF=2, ALIAS=3, AND=4, ATTRIBUTE=5, APPACTIVATE=6, APPEND=7, 
		AS=8, BEEP=9, BEGIN=10, BEGINPROPERTY=11, BINARY=12, BOOLEAN=13, BYVAL=14, 
		BYREF=15, BYTE=16, CALL=17, CASE=18, CHDIR=19, CHDRIVE=20, CLASS=21, CLOSE=22, 
		COLLECTION=23, CONST=24, DATE=25, DECLARE=26, DEFBOOL=27, DEFBYTE=28, 
		DEFDATE=29, DEFDBL=30, DEFDEC=31, DEFCUR=32, DEFINT=33, DEFLNG=34, DEFOBJ=35, 
		DEFSNG=36, DEFSTR=37, DEFVAR=38, DELETESETTING=39, DIM=40, DO=41, DOUBLE=42, 
		EACH=43, ELSE=44, ELSEIF=45, END_ENUM=46, END_FUNCTION=47, END_IF=48, 
		END_PROPERTY=49, END_SELECT=50, END_SUB=51, END_TYPE=52, END_WITH=53, 
		END=54, ENDPROPERTY=55, ENUM=56, EQV=57, ERASE=58, ERROR=59, EVENT=60, 
		EXIT_DO=61, EXIT_FOR=62, EXIT_FUNCTION=63, EXIT_PROPERTY=64, EXIT_SUB=65, 
		FALSE=66, FILECOPY=67, FRIEND=68, FOR=69, FUNCTION=70, GET=71, GLOBAL=72, 
		GOSUB=73, GOTO=74, IF=75, IMP=76, IMPLEMENTS=77, IN=78, INPUT=79, IS=80, 
		INTEGER=81, KILL=82, LOAD=83, LOCK=84, LONG=85, LOOP=86, LEN=87, LET=88, 
		LIB=89, LIKE=90, LINE_INPUT=91, LOCK_READ=92, LOCK_WRITE=93, LOCK_READ_WRITE=94, 
		LSET=95, MACRO_IF=96, MACRO_ELSEIF=97, MACRO_ELSE=98, MACRO_END_IF=99, 
		ME=100, MID=101, MKDIR=102, MOD=103, NAME=104, NEXT=105, NEW=106, NOT=107, 
		NOTHING=108, NULL=109, OBJECT=110, ON=111, ON_ERROR=112, ON_LOCAL_ERROR=113, 
		OPEN=114, OPTIONAL=115, OPTION_BASE=116, OPTION_EXPLICIT=117, OPTION_COMPARE=118, 
		OPTION_PRIVATE_MODULE=119, OR=120, OUTPUT=121, PARAMARRAY=122, PRESERVE=123, 
		PRINT=124, PRIVATE=125, PROPERTY_GET=126, PROPERTY_LET=127, PROPERTY_SET=128, 
		PUBLIC=129, PUT=130, RANDOM=131, RANDOMIZE=132, RAISEEVENT=133, READ=134, 
		READ_WRITE=135, REDIM=136, REM=137, RESET=138, RESUME=139, RETURN=140, 
		RMDIR=141, RSET=142, SAVEPICTURE=143, SAVESETTING=144, SEEK=145, SELECT=146, 
		SENDKEYS=147, SET=148, SETATTR=149, SHARED=150, SINGLE=151, SPC=152, STATIC=153, 
		STEP=154, STOP=155, STRING=156, SUB=157, TAB=158, TEXT=159, THEN=160, 
		TIME=161, TO=162, TRUE=163, TYPE=164, TYPEOF=165, UNLOAD=166, UNLOCK=167, 
		UNTIL=168, VARIANT=169, VERSION=170, WEND=171, WHILE=172, WIDTH=173, WITH=174, 
		WITHEVENTS=175, WRITE=176, XOR=177, AMPERSAND=178, ASSIGN=179, AT=180, 
		COLON=181, COMMA=182, DIV=183, DOLLAR=184, DOT=185, EQ=186, EXCLAMATIONMARK=187, 
		GEQ=188, GT=189, HASH=190, LEQ=191, LBRACE=192, LPAREN=193, LT=194, MINUS=195, 
		MINUS_EQ=196, MULT=197, NEQ=198, PERCENT=199, PLUS=200, PLUS_EQ=201, POW=202, 
		RBRACE=203, RPAREN=204, SEMICOLON=205, L_SQUARE_BRACKET=206, R_SQUARE_BRACKET=207, 
		STRINGLITERAL=208, DATELITERAL=209, COLORLITERAL=210, INTEGERLITERAL=211, 
		DOUBLELITERAL=212, FILENUMBER=213, OCTALLITERAL=214, FRX_OFFSET=215, GUID=216, 
		IDENTIFIER=217, LINE_CONTINUATION=218, NEWLINE=219, COMMENT=220, WS=221;
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleReferences = 2, RULE_moduleReference = 3, 
		RULE_moduleReferenceGUID = 4, RULE_moduleReferenceComponent = 5, RULE_moduleHeader = 6, 
		RULE_moduleConfig = 7, RULE_moduleConfigElement = 8, RULE_moduleAttributes = 9, 
		RULE_moduleOptions = 10, RULE_moduleOption = 11, RULE_moduleBody = 12, 
		RULE_moduleBodyElement = 13, RULE_controlProperties = 14, RULE_cp_Properties = 15, 
		RULE_cp_SingleProperty = 16, RULE_cp_PropertyName = 17, RULE_cp_PropertyValue = 18, 
		RULE_cp_NestedProperty = 19, RULE_cp_ControlType = 20, RULE_cp_ControlIdentifier = 21, 
		RULE_moduleBlock = 22, RULE_attributeStmt = 23, RULE_block = 24, RULE_blockStmt = 25, 
		RULE_appActivateStmt = 26, RULE_beepStmt = 27, RULE_chDirStmt = 28, RULE_chDriveStmt = 29, 
		RULE_closeStmt = 30, RULE_constStmt = 31, RULE_constSubStmt = 32, RULE_dateStmt = 33, 
		RULE_declareStmt = 34, RULE_deftypeStmt = 35, RULE_deleteSettingStmt = 36, 
		RULE_doLoopStmt = 37, RULE_endStmt = 38, RULE_enumerationStmt = 39, RULE_enumerationStmt_Constant = 40, 
		RULE_eraseStmt = 41, RULE_errorStmt = 42, RULE_eventStmt = 43, RULE_exitStmt = 44, 
		RULE_filecopyStmt = 45, RULE_forEachStmt = 46, RULE_forNextStmt = 47, 
		RULE_functionStmt = 48, RULE_getStmt = 49, RULE_goSubStmt = 50, RULE_goToStmt = 51, 
		RULE_ifThenElseStmt = 52, RULE_ifBlockStmt = 53, RULE_ifConditionStmt = 54, 
		RULE_ifElseIfBlockStmt = 55, RULE_ifElseBlockStmt = 56, RULE_implementsStmt = 57, 
		RULE_inputStmt = 58, RULE_killStmt = 59, RULE_letStmt = 60, RULE_lineInputStmt = 61, 
		RULE_loadStmt = 62, RULE_lockStmt = 63, RULE_lsetStmt = 64, RULE_macroIfThenElseStmt = 65, 
		RULE_macroIfBlockStmt = 66, RULE_macroElseIfBlockStmt = 67, RULE_macroElseBlockStmt = 68, 
		RULE_midStmt = 69, RULE_mkdirStmt = 70, RULE_nameStmt = 71, RULE_onErrorStmt = 72, 
		RULE_onGoToStmt = 73, RULE_onGoSubStmt = 74, RULE_openStmt = 75, RULE_outputList = 76, 
		RULE_outputList_Expression = 77, RULE_printStmt = 78, RULE_propertyGetStmt = 79, 
		RULE_propertySetStmt = 80, RULE_propertyLetStmt = 81, RULE_putStmt = 82, 
		RULE_raiseEventStmt = 83, RULE_randomizeStmt = 84, RULE_redimStmt = 85, 
		RULE_redimSubStmt = 86, RULE_resetStmt = 87, RULE_resumeStmt = 88, RULE_returnStmt = 89, 
		RULE_rmdirStmt = 90, RULE_rsetStmt = 91, RULE_savepictureStmt = 92, RULE_saveSettingStmt = 93, 
		RULE_seekStmt = 94, RULE_selectCaseStmt = 95, RULE_sC_Case = 96, RULE_sC_Cond = 97, 
		RULE_sC_CondExpr = 98, RULE_sendkeysStmt = 99, RULE_setattrStmt = 100, 
		RULE_setStmt = 101, RULE_stopStmt = 102, RULE_subStmt = 103, RULE_timeStmt = 104, 
		RULE_typeStmt = 105, RULE_typeStmt_Element = 106, RULE_typeOfStmt = 107, 
		RULE_unloadStmt = 108, RULE_unlockStmt = 109, RULE_valueStmt = 110, RULE_variableStmt = 111, 
		RULE_variableListStmt = 112, RULE_variableSubStmt = 113, RULE_whileWendStmt = 114, 
		RULE_widthStmt = 115, RULE_withStmt = 116, RULE_writeStmt = 117, RULE_explicitCallStmt = 118, 
		RULE_eCS_ProcedureCall = 119, RULE_eCS_MemberProcedureCall = 120, RULE_implicitCallStmt_InBlock = 121, 
		RULE_iCS_B_ProcedureCall = 122, RULE_iCS_B_MemberProcedureCall = 123, 
		RULE_implicitCallStmt_InStmt = 124, RULE_iCS_S_VariableOrProcedureCall = 125, 
		RULE_iCS_S_ProcedureOrArrayCall = 126, RULE_iCS_S_NestedProcedureCall = 127, 
		RULE_iCS_S_MembersCall = 128, RULE_iCS_S_MemberCall = 129, RULE_iCS_S_DictionaryCall = 130, 
		RULE_argsCall = 131, RULE_argCall = 132, RULE_dictionaryCallStmt = 133, 
		RULE_argList = 134, RULE_arg = 135, RULE_argDefaultValue = 136, RULE_subscripts = 137, 
		RULE_subscript = 138, RULE_ambiguousIdentifier = 139, RULE_asTypeClause = 140, 
		RULE_baseType = 141, RULE_certainIdentifier = 142, RULE_comparisonOperator = 143, 
		RULE_complexType = 144, RULE_fieldLength = 145, RULE_letterrange = 146, 
		RULE_lineLabel = 147, RULE_literal = 148, RULE_publicPrivateVisibility = 149, 
		RULE_publicPrivateGlobalVisibility = 150, RULE_type = 151, RULE_typeHint = 152, 
		RULE_visibility = 153, RULE_ambiguousKeyword = 154;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleReferences", "moduleReference", "moduleReferenceGUID", 
		"moduleReferenceComponent", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleOptions", "moduleOption", "moduleBody", "moduleBodyElement", 
		"controlProperties", "cp_Properties", "cp_SingleProperty", "cp_PropertyName", 
		"cp_PropertyValue", "cp_NestedProperty", "cp_ControlType", "cp_ControlIdentifier", 
		"moduleBlock", "attributeStmt", "block", "blockStmt", "appActivateStmt", 
		"beepStmt", "chDirStmt", "chDriveStmt", "closeStmt", "constStmt", "constSubStmt", 
		"dateStmt", "declareStmt", "deftypeStmt", "deleteSettingStmt", "doLoopStmt", 
		"endStmt", "enumerationStmt", "enumerationStmt_Constant", "eraseStmt", 
		"errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", "forNextStmt", 
		"functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "macroIfThenElseStmt", "macroIfBlockStmt", 
		"macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt", "mkdirStmt", 
		"nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", "outputList", 
		"outputList_Expression", "printStmt", "propertyGetStmt", "propertySetStmt", 
		"propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rmdirStmt", 
		"rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", "selectCaseStmt", 
		"sC_Case", "sC_Cond", "sC_CondExpr", "sendkeysStmt", "setattrStmt", "setStmt", 
		"stopStmt", "subStmt", "timeStmt", "typeStmt", "typeStmt_Element", "typeOfStmt", 
		"unloadStmt", "unlockStmt", "valueStmt", "variableStmt", "variableListStmt", 
		"variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", "writeStmt", 
		"explicitCallStmt", "eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
		"iCS_B_ProcedureCall", "iCS_B_MemberProcedureCall", "implicitCallStmt_InStmt", 
		"iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_NestedProcedureCall", 
		"iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", 
		"argCall", "dictionaryCallStmt", "argList", "arg", "argDefaultValue", 
		"subscripts", "subscript", "ambiguousIdentifier", "asTypeClause", "baseType", 
		"certainIdentifier", "comparisonOperator", "complexType", "fieldLength", 
		"letterrange", "lineLabel", "literal", "publicPrivateVisibility", "publicPrivateGlobalVisibility", 
		"type", "typeHint", "visibility", "ambiguousKeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'&'", "':='", 
		"'@'", "':'", "','", null, "'$'", "'.'", "'='", "'!'", "'>='", "'>'", 
		"'#'", "'<='", "'{'", "'('", "'<'", "'-'", "'-='", "'*'", "'<>'", "'%'", 
		"'+'", "'+='", "'^'", "'}'", "')'", "';'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", 
		"APPEND", "AS", "BEEP", "BEGIN", "BEGINPROPERTY", "BINARY", "BOOLEAN", 
		"BYVAL", "BYREF", "BYTE", "CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", 
		"CLOSE", "COLLECTION", "CONST", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", 
		"DEFDATE", "DEFDBL", "DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", 
		"DEFSNG", "DEFSTR", "DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", 
		"EACH", "ELSE", "ELSEIF", "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", 
		"END_SELECT", "END_SUB", "END_TYPE", "END_WITH", "END", "ENDPROPERTY", 
		"ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", 
		"EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FILECOPY", "FRIEND", "FOR", "FUNCTION", 
		"GET", "GLOBAL", "GOSUB", "GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", 
		"IS", "INTEGER", "KILL", "LOAD", "LOCK", "LONG", "LOOP", "LEN", "LET", 
		"LIB", "LIKE", "LINE_INPUT", "LOCK_READ", "LOCK_WRITE", "LOCK_READ_WRITE", 
		"LSET", "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", "MACRO_END_IF", "ME", 
		"MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", "NOT", "NOTHING", "NULL", 
		"OBJECT", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", 
		"READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", 
		"RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", 
		"SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
		"SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", 
		"WITH", "WITHEVENTS", "WRITE", "XOR", "AMPERSAND", "ASSIGN", "AT", "COLON", 
		"COMMA", "DIV", "DOLLAR", "DOT", "EQ", "EXCLAMATIONMARK", "GEQ", "GT", 
		"HASH", "LEQ", "LBRACE", "LPAREN", "LT", "MINUS", "MINUS_EQ", "MULT", 
		"NEQ", "PERCENT", "PLUS", "PLUS_EQ", "POW", "RBRACE", "RPAREN", "SEMICOLON", 
		"L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "STRINGLITERAL", "DATELITERAL", 
		"COLORLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", "FILENUMBER", "OCTALLITERAL", 
		"FRX_OFFSET", "GUID", "IDENTIFIER", "LINE_CONTINUATION", "NEWLINE", "COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VisualBasic6.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VisualBasic6Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(VisualBasic6Parser.Eof, 0); }
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; module();
			State = 311; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleReferencesContext moduleReferences() {
			return GetRuleContext<ModuleReferencesContext>(0);
		}
		public ControlPropertiesContext controlProperties() {
			return GetRuleContext<ControlPropertiesContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public ModuleOptionsContext moduleOptions() {
			return GetRuleContext<ModuleOptionsContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 313; Match(WS);
				}
				break;
			}
			State = 319;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 316; Match(NEWLINE);
					}
					} 
				}
				State = 321;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 328;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 322; moduleHeader();
				State = 324;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 323; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 326;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 331;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 330; moduleReferences();
				}
				break;
			}
			State = 336;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 333; Match(NEWLINE);
					}
					} 
				}
				State = 338;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 340;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 339; controlProperties();
				}
				break;
			}
			State = 345;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 342; Match(NEWLINE);
					}
					} 
				}
				State = 347;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 349;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 348; moduleConfig();
				}
				break;
			}
			State = 354;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 351; Match(NEWLINE);
					}
					} 
				}
				State = 356;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 358;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 357; moduleAttributes();
				}
				break;
			}
			State = 363;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 360; Match(NEWLINE);
					}
					} 
				}
				State = 365;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			State = 367;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 366; moduleOptions();
				}
				break;
			}
			State = 372;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 369; Match(NEWLINE);
					}
					} 
				}
				State = 374;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			State = 376;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 375; moduleBody();
				}
				break;
			}
			State = 381;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 378; Match(NEWLINE);
				}
				}
				State = 383;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 385;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 384; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferencesContext : ParserRuleContext {
		public ModuleReferenceContext[] moduleReference() {
			return GetRuleContexts<ModuleReferenceContext>();
		}
		public ModuleReferenceContext moduleReference(int i) {
			return GetRuleContext<ModuleReferenceContext>(i);
		}
		public ModuleReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReferences; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReferences(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReferences(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReferences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferencesContext moduleReferences() {
		ModuleReferencesContext _localctx = new ModuleReferencesContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleReferences);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 387; moduleReference();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 390;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferenceContext : ParserRuleContext {
		public ITerminalNode OBJECT() { return GetToken(VisualBasic6Parser.OBJECT, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ModuleReferenceGUIDContext moduleReferenceGUID() {
			return GetRuleContext<ModuleReferenceGUIDContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(VisualBasic6Parser.SEMICOLON, 0); }
		public ModuleReferenceComponentContext moduleReferenceComponent() {
			return GetRuleContext<ModuleReferenceComponentContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferenceContext moduleReference() {
		ModuleReferenceContext _localctx = new ModuleReferenceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleReference);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; Match(OBJECT);
			State = 394;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 393; Match(WS);
				}
			}

			State = 396; Match(EQ);
			State = 398;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 397; Match(WS);
				}
			}

			State = 400; moduleReferenceGUID();
			State = 401; Match(SEMICOLON);
			State = 403;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 402; Match(WS);
				}
			}

			State = 405; moduleReferenceComponent();
			State = 409;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 406; Match(NEWLINE);
					}
					} 
				}
				State = 411;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferenceGUIDContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(VisualBasic6Parser.STRINGLITERAL, 0); }
		public ModuleReferenceGUIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReferenceGUID; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReferenceGUID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReferenceGUID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReferenceGUID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferenceGUIDContext moduleReferenceGUID() {
		ModuleReferenceGUIDContext _localctx = new ModuleReferenceGUIDContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleReferenceGUID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleReferenceComponentContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(VisualBasic6Parser.STRINGLITERAL, 0); }
		public ModuleReferenceComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleReferenceComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleReferenceComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleReferenceComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleReferenceComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleReferenceComponentContext moduleReferenceComponent() {
		ModuleReferenceComponentContext _localctx = new ModuleReferenceComponentContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleReferenceComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VisualBasic6Parser.VERSION, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode DOUBLELITERAL() { return GetToken(VisualBasic6Parser.DOUBLELITERAL, 0); }
		public ITerminalNode CLASS() { return GetToken(VisualBasic6Parser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(VERSION);
			State = 417; Match(WS);
			State = 418; Match(DOUBLELITERAL);
			State = 421;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 419; Match(WS);
				State = 420; Match(CLASS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(VisualBasic6Parser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleConfigElementContext[] moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleConfig);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; Match(BEGIN);
			State = 425;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 424; Match(NEWLINE);
				}
				}
				State = 427;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 430;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 429; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 432;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 434; Match(END);
			State = 436;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 435; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 438;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(VisualBasic6Parser.NEWLINE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; ambiguousIdentifier();
			State = 442;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 441; Match(WS);
				}
			}

			State = 444; Match(EQ);
			State = 446;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 445; Match(WS);
				}
			}

			State = 448; literal();
			State = 449; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public AttributeStmtContext[] attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 451; attributeStmt();
					State = 453;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 452; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 455;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 459;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionsContext : ParserRuleContext {
		public ModuleOptionContext[] moduleOption() {
			return GetRuleContexts<ModuleOptionContext>();
		}
		public ModuleOptionContext moduleOption(int i) {
			return GetRuleContext<ModuleOptionContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionsContext moduleOptions() {
		ModuleOptionsContext _localctx = new ModuleOptionsContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 461; moduleOption();
					State = 463;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 462; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 465;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 469;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VisualBasic6Parser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VisualBasic6Parser.OPTION_BASE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VisualBasic6Parser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_COMPARE() { return GetToken(VisualBasic6Parser.OPTION_COMPARE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode TEXT() { return GetToken(VisualBasic6Parser.TEXT, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleOption);
		int _la;
		try {
			State = 479;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 471; Match(OPTION_BASE);
				State = 472; Match(WS);
				State = 473; Match(INTEGERLITERAL);
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 474; Match(OPTION_COMPARE);
				State = 475; Match(WS);
				State = 476;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 477; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 478; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public ModuleBodyElementContext[] moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_moduleBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; moduleBodyElement();
			State = 490;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 483;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 482; Match(NEWLINE);
						}
						}
						State = 485;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 487; moduleBodyElement();
					}
					} 
				}
				State = 492;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public ModuleOptionContext moduleOption() {
			return GetRuleContext<ModuleOptionContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_moduleBodyElement);
		try {
			State = 505;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493; moduleBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494; moduleOption();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 495; declareStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 496; enumerationStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 497; eventStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 498; functionStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 499; macroIfThenElseStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 500; propertyGetStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 501; propertySetStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 502; propertyLetStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 503; subStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 504; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlPropertiesContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(VisualBasic6Parser.BEGIN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public Cp_ControlTypeContext cp_ControlType() {
			return GetRuleContext<Cp_ControlTypeContext>(0);
		}
		public Cp_ControlIdentifierContext cp_ControlIdentifier() {
			return GetRuleContext<Cp_ControlIdentifierContext>(0);
		}
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public Cp_PropertiesContext[] cp_Properties() {
			return GetRuleContexts<Cp_PropertiesContext>();
		}
		public Cp_PropertiesContext cp_Properties(int i) {
			return GetRuleContext<Cp_PropertiesContext>(i);
		}
		public ControlPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_controlProperties; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterControlProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitControlProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControlProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlPropertiesContext controlProperties() {
		ControlPropertiesContext _localctx = new ControlPropertiesContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_controlProperties);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 507; Match(WS);
				}
			}

			State = 510; Match(BEGIN);
			State = 511; Match(WS);
			State = 512; cp_ControlType();
			State = 513; Match(WS);
			State = 514; cp_ControlIdentifier();
			State = 516;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 515; Match(WS);
				}
			}

			State = 519;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 518; Match(NEWLINE);
				}
				}
				State = 521;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 524;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 523; cp_Properties();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 526;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 528; Match(END);
			State = 532;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 529; Match(NEWLINE);
					}
					} 
				}
				State = 534;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_PropertiesContext : ParserRuleContext {
		public Cp_SinglePropertyContext cp_SingleProperty() {
			return GetRuleContext<Cp_SinglePropertyContext>(0);
		}
		public Cp_NestedPropertyContext cp_NestedProperty() {
			return GetRuleContext<Cp_NestedPropertyContext>(0);
		}
		public ControlPropertiesContext controlProperties() {
			return GetRuleContext<ControlPropertiesContext>(0);
		}
		public Cp_PropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_Properties; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_Properties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_Properties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_Properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_PropertiesContext cp_Properties() {
		Cp_PropertiesContext _localctx = new Cp_PropertiesContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_cp_Properties);
		try {
			State = 538;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 535; cp_SingleProperty();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 536; cp_NestedProperty();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 537; controlProperties();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_SinglePropertyContext : ParserRuleContext {
		public Cp_PropertyNameContext cp_PropertyName() {
			return GetRuleContext<Cp_PropertyNameContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public Cp_PropertyValueContext cp_PropertyValue() {
			return GetRuleContext<Cp_PropertyValueContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode FRX_OFFSET() { return GetToken(VisualBasic6Parser.FRX_OFFSET, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public Cp_SinglePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_SingleProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_SingleProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_SingleProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_SingleProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_SinglePropertyContext cp_SingleProperty() {
		Cp_SinglePropertyContext _localctx = new Cp_SinglePropertyContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_cp_SingleProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 540; Match(WS);
				}
			}

			State = 543; cp_PropertyName();
			State = 545;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 544; Match(WS);
				}
			}

			State = 547; Match(EQ);
			State = 549;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 548; Match(WS);
				}
			}

			State = 551; cp_PropertyValue();
			State = 553;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FRX_OFFSET) {
				{
				State = 552; Match(FRX_OFFSET);
				}
			}

			State = 556;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 555; Match(NEWLINE);
				}
				}
				State = 558;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_PropertyNameContext : ParserRuleContext {
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public ITerminalNode OBJECT() { return GetToken(VisualBasic6Parser.OBJECT, 0); }
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public Cp_PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_PropertyName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_PropertyName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_PropertyName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_PropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_PropertyNameContext cp_PropertyName() {
		Cp_PropertyNameContext _localctx = new Cp_PropertyNameContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_cp_PropertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 560; Match(OBJECT);
				State = 561; Match(DOT);
				}
				break;
			}
			State = 564; complexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_PropertyValueContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode POW() { return GetToken(VisualBasic6Parser.POW, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode DOLLAR() { return GetToken(VisualBasic6Parser.DOLLAR, 0); }
		public ITerminalNode LBRACE() { return GetToken(VisualBasic6Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(VisualBasic6Parser.RBRACE, 0); }
		public Cp_PropertyValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_PropertyValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_PropertyValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_PropertyValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_PropertyValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_PropertyValueContext cp_PropertyValue() {
		Cp_PropertyValueContext _localctx = new Cp_PropertyValueContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_cp_PropertyValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DOLLAR) {
				{
				State = 566; Match(DOLLAR);
				}
			}

			State = 576;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FALSE:
			case NOTHING:
			case NULL:
			case TRUE:
			case STRINGLITERAL:
			case DATELITERAL:
			case COLORLITERAL:
			case INTEGERLITERAL:
			case DOUBLELITERAL:
			case FILENUMBER:
			case OCTALLITERAL:
				{
				State = 569; literal();
				}
				break;
			case LBRACE:
				{
				{
				State = 570; Match(LBRACE);
				State = 571; ambiguousIdentifier();
				State = 572; Match(RBRACE);
				}
				}
				break;
			case POW:
				{
				State = 574; Match(POW);
				State = 575; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_NestedPropertyContext : ParserRuleContext {
		public ITerminalNode BEGINPROPERTY() { return GetToken(VisualBasic6Parser.BEGINPROPERTY, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode ENDPROPERTY() { return GetToken(VisualBasic6Parser.ENDPROPERTY, 0); }
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode GUID() { return GetToken(VisualBasic6Parser.GUID, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public Cp_PropertiesContext[] cp_Properties() {
			return GetRuleContexts<Cp_PropertiesContext>();
		}
		public Cp_PropertiesContext cp_Properties(int i) {
			return GetRuleContext<Cp_PropertiesContext>(i);
		}
		public Cp_NestedPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_NestedProperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_NestedProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_NestedProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_NestedProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_NestedPropertyContext cp_NestedProperty() {
		Cp_NestedPropertyContext _localctx = new Cp_NestedPropertyContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_cp_NestedProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 578; Match(WS);
				}
			}

			State = 581; Match(BEGINPROPERTY);
			State = 582; Match(WS);
			State = 583; ambiguousIdentifier();
			State = 587;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 584; Match(LPAREN);
				State = 585; Match(INTEGERLITERAL);
				State = 586; Match(RPAREN);
				}
			}

			State = 591;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 589; Match(WS);
				State = 590; Match(GUID);
				}
			}

			State = 594;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 593; Match(NEWLINE);
				}
				}
				State = 596;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 603;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BEGINPROPERTY) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 599;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 598; cp_Properties();
					}
					}
					State = 601;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BEGINPROPERTY) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0) );
				}
			}

			State = 605; Match(ENDPROPERTY);
			State = 607;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 606; Match(NEWLINE);
				}
				}
				State = 609;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_ControlTypeContext : ParserRuleContext {
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public Cp_ControlTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_ControlType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_ControlType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_ControlType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_ControlType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_ControlTypeContext cp_ControlType() {
		Cp_ControlTypeContext _localctx = new Cp_ControlTypeContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_cp_ControlType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611; complexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cp_ControlIdentifierContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public Cp_ControlIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cp_ControlIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCp_ControlIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCp_ControlIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCp_ControlIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cp_ControlIdentifierContext cp_ControlIdentifier() {
		Cp_ControlIdentifierContext _localctx = new Cp_ControlIdentifierContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_cp_ControlIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBlockContext moduleBlock() {
		ModuleBlockContext _localctx = new ModuleBlockContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_moduleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(VisualBasic6Parser.ATTRIBUTE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 617; Match(ATTRIBUTE);
			State = 618; Match(WS);
			State = 619; implicitCallStmt_InStmt();
			State = 621;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 620; Match(WS);
				}
			}

			State = 623; Match(EQ);
			State = 625;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 624; Match(WS);
				}
			}

			State = 627; literal();
			State = 638;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,61,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 629;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 628; Match(WS);
						}
					}

					State = 631; Match(COMMA);
					State = 633;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 632; Match(WS);
						}
					}

					State = 635; literal();
					}
					} 
				}
				State = 640;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,61,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStmtContext[] blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 641; blockStmt();
			State = 653;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 643;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 642; Match(NEWLINE);
						}
						}
						State = 645;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 648;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
					case 1:
						{
						State = 647; Match(WS);
						}
						break;
					}
					State = 650; blockStmt();
					}
					} 
				}
				State = 655;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public AppActivateStmtContext appActivateStmt() {
			return GetRuleContext<AppActivateStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public ChDirStmtContext chDirStmt() {
			return GetRuleContext<ChDirStmtContext>(0);
		}
		public ChDriveStmtContext chDriveStmt() {
			return GetRuleContext<ChDriveStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_blockStmt);
		try {
			State = 723;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656; appActivateStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 657; attributeStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 658; beepStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 659; chDirStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 660; chDriveStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 661; closeStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 662; constStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 663; dateStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 664; deleteSettingStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 665; deftypeStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 666; doLoopStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 667; endStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 668; eraseStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 669; errorStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 670; exitStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 671; explicitCallStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 672; filecopyStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 673; forEachStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 674; forNextStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 675; getStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 676; goSubStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 677; goToStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 678; ifThenElseStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 679; implementsStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 680; inputStmt();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 681; killStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 682; letStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 683; lineInputStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 684; lineLabel();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 685; loadStmt();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 686; lockStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 687; lsetStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 688; macroIfThenElseStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 689; midStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 690; mkdirStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 691; nameStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 692; onErrorStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 693; onGoToStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 694; onGoSubStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 695; openStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 696; printStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 697; putStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 698; raiseEventStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 699; randomizeStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 700; redimStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 701; resetStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 702; resumeStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 703; returnStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 704; rmdirStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 705; rsetStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 706; savepictureStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 707; saveSettingStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 708; seekStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 709; selectCaseStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 710; sendkeysStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 711; setattrStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 712; setStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 713; stopStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 714; timeStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 715; unloadStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 716; unlockStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 717; variableStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 718; whileWendStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 719; widthStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 720; withStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 721; writeStmt();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 722; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppActivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VisualBasic6Parser.APPACTIVATE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public AppActivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appActivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAppActivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAppActivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppActivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppActivateStmtContext appActivateStmt() {
		AppActivateStmtContext _localctx = new AppActivateStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_appActivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725; Match(APPACTIVATE);
			State = 726; Match(WS);
			State = 727; valueStmt(0);
			State = 736;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 729;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 728; Match(WS);
					}
				}

				State = 731; Match(COMMA);
				State = 733;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					State = 732; Match(WS);
					}
					break;
				}
				State = 735; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VisualBasic6Parser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChDirStmtContext : ParserRuleContext {
		public ITerminalNode CHDIR() { return GetToken(VisualBasic6Parser.CHDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ChDirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chDirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterChDirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitChDirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChDirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChDirStmtContext chDirStmt() {
		ChDirStmtContext _localctx = new ChDirStmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_chDirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740; Match(CHDIR);
			State = 741; Match(WS);
			State = 742; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChDriveStmtContext : ParserRuleContext {
		public ITerminalNode CHDRIVE() { return GetToken(VisualBasic6Parser.CHDRIVE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ChDriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chDriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterChDriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitChDriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChDriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChDriveStmtContext chDriveStmt() {
		ChDriveStmtContext _localctx = new ChDriveStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_chDriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744; Match(CHDRIVE);
			State = 745; Match(WS);
			State = 746; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(VisualBasic6Parser.CLOSE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 748; Match(CLOSE);
			State = 764;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 749; Match(WS);
				State = 750; valueStmt(0);
				State = 761;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,71,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 752;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 751; Match(WS);
							}
						}

						State = 754; Match(COMMA);
						State = 756;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
						case 1:
							{
							State = 755; Match(WS);
							}
							break;
						}
						State = 758; valueStmt(0);
						}
						} 
					}
					State = 763;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,71,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VisualBasic6Parser.CONST, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ConstSubStmtContext[] constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public PublicPrivateGlobalVisibilityContext publicPrivateGlobalVisibility() {
			return GetRuleContext<PublicPrivateGlobalVisibilityContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (GLOBAL - 72)) | (1L << (PRIVATE - 72)) | (1L << (PUBLIC - 72)))) != 0)) {
				{
				State = 766; publicPrivateGlobalVisibility();
				State = 767; Match(WS);
				}
			}

			State = 771; Match(CONST);
			State = 772; Match(WS);
			State = 773; constSubStmt();
			State = 784;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 775;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 774; Match(WS);
						}
					}

					State = 777; Match(COMMA);
					State = 779;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 778; Match(WS);
						}
					}

					State = 781; constSubStmt();
					}
					} 
				}
				State = 786;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787; ambiguousIdentifier();
			State = 789;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 788; typeHint();
				}
			}

			State = 793;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 791; Match(WS);
				State = 792; asTypeClause();
				}
				break;
			}
			State = 796;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 795; Match(WS);
				}
			}

			State = 798; Match(EQ);
			State = 800;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				State = 799; Match(WS);
				}
				break;
			}
			State = 802; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804; Match(DATE);
			State = 806;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 805; Match(WS);
				}
			}

			State = 808; Match(EQ);
			State = 810;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 809; Match(WS);
				}
				break;
			}
			State = 812; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(VisualBasic6Parser.DECLARE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VisualBasic6Parser.LIB, 0); }
		public ITerminalNode[] STRINGLITERAL() { return GetTokens(VisualBasic6Parser.STRINGLITERAL); }
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VisualBasic6Parser.STRINGLITERAL, i);
		}
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public TypeHintContext[] typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ITerminalNode ALIAS() { return GetToken(VisualBasic6Parser.ALIAS, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 814; visibility();
				State = 815; Match(WS);
				}
			}

			State = 819; Match(DECLARE);
			State = 820; Match(WS);
			State = 826;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FUNCTION:
				{
				State = 821; Match(FUNCTION);
				State = 823;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
					{
					State = 822; typeHint();
					}
				}

				}
				break;
			case SUB:
				{
				State = 825; Match(SUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 828; Match(WS);
			State = 829; ambiguousIdentifier();
			State = 831;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 830; typeHint();
				}
			}

			State = 833; Match(WS);
			State = 834; Match(LIB);
			State = 835; Match(WS);
			State = 836; Match(STRINGLITERAL);
			State = 841;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 837; Match(WS);
				State = 838; Match(ALIAS);
				State = 839; Match(WS);
				State = 840; Match(STRINGLITERAL);
				}
				break;
			}
			State = 847;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 844;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 843; Match(WS);
					}
				}

				State = 846; argList();
				}
				break;
			}
			State = 851;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 849; Match(WS);
				State = 850; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetterrangeContext[] letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFBOOL() { return GetToken(VisualBasic6Parser.DEFBOOL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VisualBasic6Parser.DEFBYTE, 0); }
		public ITerminalNode DEFINT() { return GetToken(VisualBasic6Parser.DEFINT, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VisualBasic6Parser.DEFLNG, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VisualBasic6Parser.DEFCUR, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VisualBasic6Parser.DEFSNG, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VisualBasic6Parser.DEFDBL, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VisualBasic6Parser.DEFDEC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VisualBasic6Parser.DEFDATE, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VisualBasic6Parser.DEFSTR, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VisualBasic6Parser.DEFOBJ, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VisualBasic6Parser.DEFVAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 853;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 854; Match(WS);
			State = 855; letterrange();
			State = 866;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,93,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 857;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 856; Match(WS);
						}
					}

					State = 859; Match(COMMA);
					State = 861;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 860; Match(WS);
						}
					}

					State = 863; letterrange();
					}
					} 
				}
				State = 868;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,93,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public ITerminalNode DELETESETTING() { return GetToken(VisualBasic6Parser.DELETESETTING, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_deleteSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869; Match(DELETESETTING);
			State = 870; Match(WS);
			State = 871; valueStmt(0);
			State = 873;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 872; Match(WS);
				}
			}

			State = 875; Match(COMMA);
			State = 877;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				State = 876; Match(WS);
				}
				break;
			}
			State = 879; valueStmt(0);
			State = 888;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 881;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 880; Match(WS);
					}
				}

				State = 883; Match(COMMA);
				State = 885;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
				case 1:
					{
					State = 884; Match(WS);
					}
					break;
				}
				State = 887; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(VisualBasic6Parser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VisualBasic6Parser.LOOP, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode UNTIL() { return GetToken(VisualBasic6Parser.UNTIL, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_doLoopStmt);
		int _la;
		try {
			State = 943;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 890; Match(DO);
				State = 892;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 891; Match(NEWLINE);
					}
					}
					State = 894;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 902;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					State = 896; block();
					State = 898;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 897; Match(NEWLINE);
						}
						}
						State = 900;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 904; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 905; Match(DO);
				State = 906; Match(WS);
				State = 907;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 908; Match(WS);
				State = 909; valueStmt(0);
				State = 911;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 910; Match(NEWLINE);
					}
					}
					State = 913;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 921;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
				case 1:
					{
					State = 915; block();
					State = 917;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 916; Match(NEWLINE);
						}
						}
						State = 919;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 923; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 925; Match(DO);
				State = 927;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 926; Match(NEWLINE);
					}
					}
					State = 929;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				{
				State = 931; block();
				State = 933;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 932; Match(NEWLINE);
					}
					}
					State = 935;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				State = 937; Match(LOOP);
				State = 938; Match(WS);
				State = 939;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 940; Match(WS);
				State = 941; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(VisualBasic6Parser.ENUM, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_ENUM() { return GetToken(VisualBasic6Parser.END_ENUM, 0); }
		public PublicPrivateVisibilityContext publicPrivateVisibility() {
			return GetRuleContext<PublicPrivateVisibilityContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public EnumerationStmt_ConstantContext[] enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 950;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PRIVATE || _la==PUBLIC) {
				{
				State = 947; publicPrivateVisibility();
				State = 948; Match(WS);
				}
			}

			State = 952; Match(ENUM);
			State = 953; Match(WS);
			State = 954; ambiguousIdentifier();
			State = 956;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 955; Match(NEWLINE);
				}
				}
				State = 958;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 963;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 960; enumerationStmt_Constant();
				}
				}
				State = 965;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 966; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968; ambiguousIdentifier();
			State = 977;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==WS) {
				{
				State = 970;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 969; Match(WS);
					}
				}

				State = 972; Match(EQ);
				State = 974;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					State = 973; Match(WS);
					}
					break;
				}
				State = 976; valueStmt(0);
				}
			}

			State = 980;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 979; Match(NEWLINE);
				}
				}
				State = 982;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VisualBasic6Parser.ERASE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 984; Match(ERASE);
			State = 985; Match(WS);
			State = 986; valueStmt(0);
			State = 997;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,117,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 988;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 987; Match(WS);
						}
					}

					State = 990; Match(COMMA);
					State = 992;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
					case 1:
						{
						State = 991; Match(WS);
						}
						break;
					}
					State = 994; valueStmt(0);
					}
					} 
				}
				State = 999;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,117,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VisualBasic6Parser.ERROR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000; Match(ERROR);
			State = 1001; Match(WS);
			State = 1002; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(VisualBasic6Parser.EVENT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 1004; visibility();
				State = 1005; Match(WS);
				}
			}

			State = 1009; Match(EVENT);
			State = 1010; Match(WS);
			State = 1011; ambiguousIdentifier();
			State = 1013;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1012; Match(WS);
				}
			}

			State = 1015; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_DO() { return GetToken(VisualBasic6Parser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VisualBasic6Parser.EXIT_FOR, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VisualBasic6Parser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VisualBasic6Parser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VisualBasic6Parser.EXIT_SUB, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017;
			_la = _input.La(1);
			if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (EXIT_DO - 61)) | (1L << (EXIT_FOR - 61)) | (1L << (EXIT_FUNCTION - 61)) | (1L << (EXIT_PROPERTY - 61)) | (1L << (EXIT_SUB - 61)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public ITerminalNode FILECOPY() { return GetToken(VisualBasic6Parser.FILECOPY, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1019; Match(FILECOPY);
			State = 1020; Match(WS);
			State = 1021; valueStmt(0);
			State = 1023;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1022; Match(WS);
				}
			}

			State = 1025; Match(COMMA);
			State = 1027;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				State = 1026; Match(WS);
				}
				break;
			}
			State = 1029; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode EACH() { return GetToken(VisualBasic6Parser.EACH, 0); }
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(VisualBasic6Parser.IN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031; Match(FOR);
			State = 1032; Match(WS);
			State = 1033; Match(EACH);
			State = 1034; Match(WS);
			State = 1035; ambiguousIdentifier();
			State = 1037;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 1036; typeHint();
				}
			}

			State = 1039; Match(WS);
			State = 1040; Match(IN);
			State = 1041; Match(WS);
			State = 1042; valueStmt(0);
			State = 1044;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1043; Match(NEWLINE);
				}
				}
				State = 1046;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1054;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				State = 1048; block();
				State = 1050;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1049; Match(NEWLINE);
					}
					}
					State = 1052;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1056; Match(NEXT);
			State = 1059;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				State = 1057; Match(WS);
				State = 1058; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public TypeHintContext[] typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode STEP() { return GetToken(VisualBasic6Parser.STEP, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061; Match(FOR);
			State = 1062; Match(WS);
			State = 1063; ambiguousIdentifier();
			State = 1065;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 1064; typeHint();
				}
			}

			State = 1069;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				State = 1067; Match(WS);
				State = 1068; asTypeClause();
				}
				break;
			}
			State = 1072;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1071; Match(WS);
				}
			}

			State = 1074; Match(EQ);
			State = 1076;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				State = 1075; Match(WS);
				}
				break;
			}
			State = 1078; valueStmt(0);
			State = 1079; Match(WS);
			State = 1080; Match(TO);
			State = 1081; Match(WS);
			State = 1082; valueStmt(0);
			State = 1087;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1083; Match(WS);
				State = 1084; Match(STEP);
				State = 1085; Match(WS);
				State = 1086; valueStmt(0);
				}
			}

			State = 1090;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1089; Match(NEWLINE);
				}
				}
				State = 1092;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1100;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				State = 1094; block();
				State = 1096;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1095; Match(NEWLINE);
					}
					}
					State = 1098;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1102; Match(NEXT);
			State = 1108;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				State = 1103; Match(WS);
				State = 1104; ambiguousIdentifier();
				State = 1106;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					State = 1105; typeHint();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_FUNCTION() { return GetToken(VisualBasic6Parser.END_FUNCTION, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 1110; visibility();
				State = 1111; Match(WS);
				}
			}

			State = 1117;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1115; Match(STATIC);
				State = 1116; Match(WS);
				}
			}

			State = 1119; Match(FUNCTION);
			State = 1120; Match(WS);
			State = 1121; ambiguousIdentifier();
			State = 1126;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				State = 1123;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1122; Match(WS);
					}
				}

				State = 1125; argList();
				}
				break;
			}
			State = 1130;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1128; Match(WS);
				State = 1129; asTypeClause();
				}
			}

			State = 1133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1132; Match(NEWLINE);
				}
				}
				State = 1135;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1137; block();
				State = 1139;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1138; Match(NEWLINE);
					}
					}
					State = 1141;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1145; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(VisualBasic6Parser.GET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1147; Match(GET);
			State = 1148; Match(WS);
			State = 1149; valueStmt(0);
			State = 1151;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1150; Match(WS);
				}
			}

			State = 1153; Match(COMMA);
			State = 1155;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1154; Match(WS);
				}
				break;
			}
			State = 1158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				State = 1157; valueStmt(0);
				}
				break;
			}
			State = 1161;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1160; Match(WS);
				}
			}

			State = 1163; Match(COMMA);
			State = 1165;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				State = 1164; Match(WS);
				}
				break;
			}
			State = 1167; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1169; Match(GOSUB);
			State = 1170; Match(WS);
			State = 1171; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1173; Match(GOTO);
			State = 1174; Match(WS);
			State = 1175; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public ITerminalNode END_IF() { return GetToken(VisualBasic6Parser.END_IF, 0); }
		public IfElseIfBlockStmtContext[] ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public BlockStmtContext[] blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 1202;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1177; Match(IF);
				State = 1178; Match(WS);
				State = 1179; ifConditionStmt();
				State = 1180; Match(WS);
				State = 1181; Match(THEN);
				State = 1182; Match(WS);
				State = 1183; blockStmt();
				State = 1188;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					State = 1184; Match(WS);
					State = 1185; Match(ELSE);
					State = 1186; Match(WS);
					State = 1187; blockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1190; ifBlockStmt();
				State = 1194;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 1191; ifElseIfBlockStmt();
					}
					}
					State = 1196;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1198;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 1197; ifElseBlockStmt();
					}
				}

				State = 1200; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_ifBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1204; Match(IF);
			State = 1205; Match(WS);
			State = 1206; ifConditionStmt();
			State = 1207; Match(WS);
			State = 1208; Match(THEN);
			State = 1210;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1209; Match(NEWLINE);
				}
				}
				State = 1212;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1220;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				State = 1214; block();
				State = 1216;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1215; Match(NEWLINE);
					}
					}
					State = 1218;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VisualBasic6Parser.ELSEIF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_ifElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1224; Match(ELSEIF);
			State = 1225; Match(WS);
			State = 1226; ifConditionStmt();
			State = 1227; Match(WS);
			State = 1228; Match(THEN);
			State = 1230;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1229; Match(NEWLINE);
				}
				}
				State = 1232;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1240;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1234; block();
				State = 1236;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1235; Match(NEWLINE);
					}
					}
					State = 1238;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_ifElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1242; Match(ELSE);
			State = 1244;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1243; Match(NEWLINE);
				}
				}
				State = 1246;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1254;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1248; block();
				State = 1250;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1249; Match(NEWLINE);
					}
					}
					State = 1252;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public ITerminalNode IMPLEMENTS() { return GetToken(VisualBasic6Parser.IMPLEMENTS, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256; Match(IMPLEMENTS);
			State = 1257; Match(WS);
			State = 1258; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260; Match(INPUT);
			State = 1261; Match(WS);
			State = 1262; valueStmt(0);
			State = 1271;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1264;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1263; Match(WS);
						}
					}

					State = 1266; Match(COMMA);
					State = 1268;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
					case 1:
						{
						State = 1267; Match(WS);
						}
						break;
					}
					State = 1270; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1273;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,165,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ITerminalNode KILL() { return GetToken(VisualBasic6Parser.KILL, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275; Match(KILL);
			State = 1276; Match(WS);
			State = 1277; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode PLUS_EQ() { return GetToken(VisualBasic6Parser.PLUS_EQ, 0); }
		public ITerminalNode MINUS_EQ() { return GetToken(VisualBasic6Parser.MINUS_EQ, 0); }
		public ITerminalNode LET() { return GetToken(VisualBasic6Parser.LET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				State = 1279; Match(LET);
				State = 1280; Match(WS);
				}
				break;
			}
			State = 1283; implicitCallStmt_InStmt();
			State = 1285;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1284; Match(WS);
				}
			}

			State = 1287;
			_la = _input.La(1);
			if ( !(((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (EQ - 186)) | (1L << (MINUS_EQ - 186)) | (1L << (PLUS_EQ - 186)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1289;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 1288; Match(WS);
				}
				break;
			}
			State = 1291; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public ITerminalNode LINE_INPUT() { return GetToken(VisualBasic6Parser.LINE_INPUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293; Match(LINE_INPUT);
			State = 1294; Match(WS);
			State = 1295; valueStmt(0);
			State = 1297;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1296; Match(WS);
				}
			}

			State = 1299; Match(COMMA);
			State = 1301;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 1300; Match(WS);
				}
				break;
			}
			State = 1303; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ITerminalNode LOAD() { return GetToken(VisualBasic6Parser.LOAD, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305; Match(LOAD);
			State = 1306; Match(WS);
			State = 1307; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public ITerminalNode LOCK() { return GetToken(VisualBasic6Parser.LOCK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309; Match(LOCK);
			State = 1310; Match(WS);
			State = 1311; valueStmt(0);
			State = 1326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				State = 1313;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1312; Match(WS);
					}
				}

				State = 1315; Match(COMMA);
				State = 1317;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
				case 1:
					{
					State = 1316; Match(WS);
					}
					break;
				}
				State = 1319; valueStmt(0);
				State = 1324;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,173,_ctx) ) {
				case 1:
					{
					State = 1320; Match(WS);
					State = 1321; Match(TO);
					State = 1322; Match(WS);
					State = 1323; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public ITerminalNode LSET() { return GetToken(VisualBasic6Parser.LSET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1328; Match(LSET);
			State = 1329; Match(WS);
			State = 1330; implicitCallStmt_InStmt();
			State = 1332;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1331; Match(WS);
				}
			}

			State = 1334; Match(EQ);
			State = 1336;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 1335; Match(WS);
				}
				break;
			}
			State = 1338; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfThenElseStmtContext : ParserRuleContext {
		public MacroIfBlockStmtContext macroIfBlockStmt() {
			return GetRuleContext<MacroIfBlockStmtContext>(0);
		}
		public ITerminalNode MACRO_END_IF() { return GetToken(VisualBasic6Parser.MACRO_END_IF, 0); }
		public MacroElseIfBlockStmtContext[] macroElseIfBlockStmt() {
			return GetRuleContexts<MacroElseIfBlockStmtContext>();
		}
		public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i) {
			return GetRuleContext<MacroElseIfBlockStmtContext>(i);
		}
		public MacroElseBlockStmtContext macroElseBlockStmt() {
			return GetRuleContext<MacroElseBlockStmtContext>(0);
		}
		public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfThenElseStmtContext macroIfThenElseStmt() {
		MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_macroIfThenElseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1340; macroIfBlockStmt();
			State = 1344;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MACRO_ELSEIF) {
				{
				{
				State = 1341; macroElseIfBlockStmt();
				}
				}
				State = 1346;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1348;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MACRO_ELSE) {
				{
				State = 1347; macroElseBlockStmt();
				}
			}

			State = 1350; Match(MACRO_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_IF() { return GetToken(VisualBasic6Parser.MACRO_IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfBlockStmtContext macroIfBlockStmt() {
		MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_macroIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1352; Match(MACRO_IF);
			State = 1353; Match(WS);
			State = 1354; ifConditionStmt();
			State = 1355; Match(WS);
			State = 1356; Match(THEN);
			State = 1358;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1357; Match(NEWLINE);
				}
				}
				State = 1360;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1368;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1362; moduleBody();
				State = 1364;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1363; Match(NEWLINE);
					}
					}
					State = 1366;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_ELSEIF() { return GetToken(VisualBasic6Parser.MACRO_ELSEIF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseIfBlockStmtContext macroElseIfBlockStmt() {
		MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_macroElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1370; Match(MACRO_ELSEIF);
			State = 1371; Match(WS);
			State = 1372; ifConditionStmt();
			State = 1373; Match(WS);
			State = 1374; Match(THEN);
			State = 1376;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1375; Match(NEWLINE);
				}
				}
				State = 1378;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1386;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1380; moduleBody();
				State = 1382;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1381; Match(NEWLINE);
					}
					}
					State = 1384;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_ELSE() { return GetToken(VisualBasic6Parser.MACRO_ELSE, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseBlockStmtContext macroElseBlockStmt() {
		MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_macroElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1388; Match(MACRO_ELSE);
			State = 1390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1389; Match(NEWLINE);
				}
				}
				State = 1392;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1400;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1394; moduleBody();
				State = 1396;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1395; Match(NEWLINE);
					}
					}
					State = 1398;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public ITerminalNode MID() { return GetToken(VisualBasic6Parser.MID, 0); }
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1402; Match(MID);
			State = 1404;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1403; Match(WS);
				}
			}

			State = 1406; Match(LPAREN);
			State = 1408;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				State = 1407; Match(WS);
				}
				break;
			}
			State = 1410; argsCall();
			State = 1412;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1411; Match(WS);
				}
			}

			State = 1414; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ITerminalNode MKDIR() { return GetToken(VisualBasic6Parser.MKDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1416; Match(MKDIR);
			State = 1417; Match(WS);
			State = 1418; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(VisualBasic6Parser.NAME, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1420; Match(NAME);
			State = 1421; Match(WS);
			State = 1422; valueStmt(0);
			State = 1423; Match(WS);
			State = 1424; Match(AS);
			State = 1425; Match(WS);
			State = 1426; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode ON_ERROR() { return GetToken(VisualBasic6Parser.ON_ERROR, 0); }
		public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VisualBasic6Parser.ON_LOCAL_ERROR, 0); }
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public ITerminalNode COLON() { return GetToken(VisualBasic6Parser.COLON, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_onErrorStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428;
			_la = _input.La(1);
			if ( !(_la==ON_ERROR || _la==ON_LOCAL_ERROR) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1429; Match(WS);
			State = 1439;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1430; Match(GOTO);
				State = 1431; Match(WS);
				State = 1432; valueStmt(0);
				State = 1434;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 1433; Match(COLON);
					}
				}

				}
				break;
			case RESUME:
				{
				State = 1436; Match(RESUME);
				State = 1437; Match(WS);
				State = 1438; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441; Match(ON);
			State = 1442; Match(WS);
			State = 1443; valueStmt(0);
			State = 1444; Match(WS);
			State = 1445; Match(GOTO);
			State = 1446; Match(WS);
			State = 1447; valueStmt(0);
			State = 1458;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,195,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1449;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1448; Match(WS);
						}
					}

					State = 1451; Match(COMMA);
					State = 1453;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
					case 1:
						{
						State = 1452; Match(WS);
						}
						break;
					}
					State = 1455; valueStmt(0);
					}
					} 
				}
				State = 1460;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,195,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1461; Match(ON);
			State = 1462; Match(WS);
			State = 1463; valueStmt(0);
			State = 1464; Match(WS);
			State = 1465; Match(GOSUB);
			State = 1466; Match(WS);
			State = 1467; valueStmt(0);
			State = 1478;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,198,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1469;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1468; Match(WS);
						}
					}

					State = 1471; Match(COMMA);
					State = 1473;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
					case 1:
						{
						State = 1472; Match(WS);
						}
						break;
					}
					State = 1475; valueStmt(0);
					}
					} 
				}
				State = 1480;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,198,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(VisualBasic6Parser.OPEN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VisualBasic6Parser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VisualBasic6Parser.OUTPUT, 0); }
		public ITerminalNode RANDOM() { return GetToken(VisualBasic6Parser.RANDOM, 0); }
		public ITerminalNode ACCESS() { return GetToken(VisualBasic6Parser.ACCESS, 0); }
		public ITerminalNode LEN() { return GetToken(VisualBasic6Parser.LEN, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode READ() { return GetToken(VisualBasic6Parser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VisualBasic6Parser.READ_WRITE, 0); }
		public ITerminalNode SHARED() { return GetToken(VisualBasic6Parser.SHARED, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VisualBasic6Parser.LOCK_READ, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VisualBasic6Parser.LOCK_WRITE, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VisualBasic6Parser.LOCK_READ_WRITE, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481; Match(OPEN);
			State = 1482; Match(WS);
			State = 1483; valueStmt(0);
			State = 1484; Match(WS);
			State = 1485; Match(FOR);
			State = 1486; Match(WS);
			State = 1487;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INPUT - 79)) | (1L << (OUTPUT - 79)) | (1L << (RANDOM - 79)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1492;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				State = 1488; Match(WS);
				State = 1489; Match(ACCESS);
				State = 1490; Match(WS);
				State = 1491;
				_la = _input.La(1);
				if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (READ - 134)) | (1L << (READ_WRITE - 134)) | (1L << (WRITE - 134)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 1496;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
			case 1:
				{
				State = 1494; Match(WS);
				State = 1495;
				_la = _input.La(1);
				if ( !(((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & ((1L << (LOCK_READ - 92)) | (1L << (LOCK_WRITE - 92)) | (1L << (LOCK_READ_WRITE - 92)) | (1L << (SHARED - 92)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 1498; Match(WS);
			State = 1499; Match(AS);
			State = 1500; Match(WS);
			State = 1501; valueStmt(0);
			State = 1512;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				State = 1502; Match(WS);
				State = 1503; Match(LEN);
				State = 1505;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1504; Match(WS);
					}
				}

				State = 1507; Match(EQ);
				State = 1509;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
				case 1:
					{
					State = 1508; Match(WS);
					}
					break;
				}
				State = 1511; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public OutputList_ExpressionContext[] outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(VisualBasic6Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VisualBasic6Parser.SEMICOLON, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1547;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1514; outputList_Expression();
				State = 1527;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,207,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1516;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1515; Match(WS);
							}
						}

						State = 1518;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1520;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
						case 1:
							{
							State = 1519; Match(WS);
							}
							break;
						}
						State = 1523;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
						case 1:
							{
							State = 1522; outputList_Expression();
							}
							break;
						}
						}
						} 
					}
					State = 1529;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,207,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1531;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					State = 1530; outputList_Expression();
					}
					break;
				}
				State = 1543;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1534;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1533; Match(WS);
							}
						}

						State = 1536;
						_la = _input.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 1538;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
						case 1:
							{
							State = 1537; Match(WS);
							}
							break;
						}
						State = 1541;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
						case 1:
							{
							State = 1540; outputList_Expression();
							}
							break;
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1545;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,212,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode SPC() { return GetToken(VisualBasic6Parser.SPC, 0); }
		public ITerminalNode TAB() { return GetToken(VisualBasic6Parser.TAB, 0); }
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_outputList_Expression);
		int _la;
		try {
			State = 1566;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1549; valueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1550;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1564;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,217,_ctx) ) {
				case 1:
					{
					State = 1552;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1551; Match(WS);
						}
					}

					State = 1554; Match(LPAREN);
					State = 1556;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
					case 1:
						{
						State = 1555; Match(WS);
						}
						break;
					}
					State = 1558; argsCall();
					State = 1560;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1559; Match(WS);
						}
					}

					State = 1562; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VisualBasic6Parser.PRINT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1568; Match(PRINT);
			State = 1569; Match(WS);
			State = 1570; valueStmt(0);
			State = 1572;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1571; Match(WS);
				}
			}

			State = 1574; Match(COMMA);
			State = 1579;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				State = 1576;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					State = 1575; Match(WS);
					}
					break;
				}
				State = 1578; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_GET() { return GetToken(VisualBasic6Parser.PROPERTY_GET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 1581; visibility();
				State = 1582; Match(WS);
				}
			}

			State = 1588;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1586; Match(STATIC);
				State = 1587; Match(WS);
				}
			}

			State = 1590; Match(PROPERTY_GET);
			State = 1591; Match(WS);
			State = 1592; ambiguousIdentifier();
			State = 1594;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 1593; typeHint();
				}
			}

			State = 1600;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				State = 1597;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1596; Match(WS);
					}
				}

				State = 1599; argList();
				}
				break;
			}
			State = 1604;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1602; Match(WS);
				State = 1603; asTypeClause();
				}
			}

			State = 1607;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1606; Match(NEWLINE);
				}
				}
				State = 1609;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1617;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1611; block();
				State = 1613;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1612; Match(NEWLINE);
					}
					}
					State = 1615;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1619; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_SET() { return GetToken(VisualBasic6Parser.PROPERTY_SET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 1621; visibility();
				State = 1622; Match(WS);
				}
			}

			State = 1628;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1626; Match(STATIC);
				State = 1627; Match(WS);
				}
			}

			State = 1630; Match(PROPERTY_SET);
			State = 1631; Match(WS);
			State = 1632; ambiguousIdentifier();
			State = 1637;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1634;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1633; Match(WS);
					}
				}

				State = 1636; argList();
				}
			}

			State = 1640;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1639; Match(NEWLINE);
				}
				}
				State = 1642;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1650;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1644; block();
				State = 1646;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1645; Match(NEWLINE);
					}
					}
					State = 1648;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1652; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VisualBasic6Parser.PROPERTY_LET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1657;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 1654; visibility();
				State = 1655; Match(WS);
				}
			}

			State = 1661;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1659; Match(STATIC);
				State = 1660; Match(WS);
				}
			}

			State = 1663; Match(PROPERTY_LET);
			State = 1664; Match(WS);
			State = 1665; ambiguousIdentifier();
			State = 1670;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1667;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1666; Match(WS);
					}
				}

				State = 1669; argList();
				}
			}

			State = 1673;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1672; Match(NEWLINE);
				}
				}
				State = 1675;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1683;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1677; block();
				State = 1679;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1678; Match(NEWLINE);
					}
					}
					State = 1681;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1685; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public ITerminalNode PUT() { return GetToken(VisualBasic6Parser.PUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687; Match(PUT);
			State = 1688; Match(WS);
			State = 1689; valueStmt(0);
			State = 1691;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1690; Match(WS);
				}
			}

			State = 1693; Match(COMMA);
			State = 1695;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				State = 1694; Match(WS);
				}
				break;
			}
			State = 1698;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				State = 1697; valueStmt(0);
				}
				break;
			}
			State = 1701;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1700; Match(WS);
				}
			}

			State = 1703; Match(COMMA);
			State = 1705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
			case 1:
				{
				State = 1704; Match(WS);
				}
				break;
			}
			State = 1707; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public ITerminalNode RAISEEVENT() { return GetToken(VisualBasic6Parser.RAISEEVENT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1709; Match(RAISEEVENT);
			State = 1710; Match(WS);
			State = 1711; ambiguousIdentifier();
			State = 1726;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				State = 1713;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1712; Match(WS);
					}
				}

				State = 1715; Match(LPAREN);
				State = 1717;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					State = 1716; Match(WS);
					}
					break;
				}
				State = 1723;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)) | (1L << (COMMA - 130)) | (1L << (DOT - 130)) | (1L << (EXCLAMATIONMARK - 130)) | (1L << (LPAREN - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MINUS - 195)) | (1L << (PLUS - 195)) | (1L << (SEMICOLON - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (OCTALLITERAL - 195)) | (1L << (IDENTIFIER - 195)) | (1L << (WS - 195)))) != 0)) {
					{
					State = 1719; argsCall();
					State = 1721;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1720; Match(WS);
						}
					}

					}
				}

				State = 1725; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ITerminalNode RANDOMIZE() { return GetToken(VisualBasic6Parser.RANDOMIZE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728; Match(RANDOMIZE);
			State = 1731;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				State = 1729; Match(WS);
				State = 1730; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public ITerminalNode REDIM() { return GetToken(VisualBasic6Parser.REDIM, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public RedimSubStmtContext[] redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public ITerminalNode PRESERVE() { return GetToken(VisualBasic6Parser.PRESERVE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733; Match(REDIM);
			State = 1734; Match(WS);
			State = 1737;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
			case 1:
				{
				State = 1735; Match(PRESERVE);
				State = 1736; Match(WS);
				}
				break;
			}
			State = 1739; redimSubStmt();
			State = 1750;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,259,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1741;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1740; Match(WS);
						}
					}

					State = 1743; Match(COMMA);
					State = 1745;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
					case 1:
						{
						State = 1744; Match(WS);
						}
						break;
					}
					State = 1747; redimSubStmt();
					}
					} 
				}
				State = 1752;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,259,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1753; implicitCallStmt_InStmt();
			State = 1755;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1754; Match(WS);
				}
			}

			State = 1757; Match(LPAREN);
			State = 1759;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				State = 1758; Match(WS);
				}
				break;
			}
			State = 1761; subscripts();
			State = 1763;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1762; Match(WS);
				}
			}

			State = 1765; Match(RPAREN);
			State = 1768;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				State = 1766; Match(WS);
				State = 1767; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VisualBasic6Parser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1772; Match(RESUME);
			State = 1778;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
			case 1:
				{
				State = 1773; Match(WS);
				State = 1776;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					State = 1774; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1775; ambiguousIdentifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VisualBasic6Parser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ITerminalNode RMDIR() { return GetToken(VisualBasic6Parser.RMDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782; Match(RMDIR);
			State = 1783; Match(WS);
			State = 1784; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public ITerminalNode RSET() { return GetToken(VisualBasic6Parser.RSET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786; Match(RSET);
			State = 1787; Match(WS);
			State = 1788; implicitCallStmt_InStmt();
			State = 1790;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1789; Match(WS);
				}
			}

			State = 1792; Match(EQ);
			State = 1794;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				State = 1793; Match(WS);
				}
				break;
			}
			State = 1796; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public ITerminalNode SAVEPICTURE() { return GetToken(VisualBasic6Parser.SAVEPICTURE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1798; Match(SAVEPICTURE);
			State = 1799; Match(WS);
			State = 1800; valueStmt(0);
			State = 1802;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1801; Match(WS);
				}
			}

			State = 1804; Match(COMMA);
			State = 1806;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				State = 1805; Match(WS);
				}
				break;
			}
			State = 1808; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public ITerminalNode SAVESETTING() { return GetToken(VisualBasic6Parser.SAVESETTING, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810; Match(SAVESETTING);
			State = 1811; Match(WS);
			State = 1812; valueStmt(0);
			State = 1814;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1813; Match(WS);
				}
			}

			State = 1816; Match(COMMA);
			State = 1818;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				State = 1817; Match(WS);
				}
				break;
			}
			State = 1820; valueStmt(0);
			State = 1822;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1821; Match(WS);
				}
			}

			State = 1824; Match(COMMA);
			State = 1826;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				State = 1825; Match(WS);
				}
				break;
			}
			State = 1828; valueStmt(0);
			State = 1830;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1829; Match(WS);
				}
			}

			State = 1832; Match(COMMA);
			State = 1834;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				State = 1833; Match(WS);
				}
				break;
			}
			State = 1836; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public ITerminalNode SEEK() { return GetToken(VisualBasic6Parser.SEEK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1838; Match(SEEK);
			State = 1839; Match(WS);
			State = 1840; valueStmt(0);
			State = 1842;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1841; Match(WS);
				}
			}

			State = 1844; Match(COMMA);
			State = 1846;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
			case 1:
				{
				State = 1845; Match(WS);
				}
				break;
			}
			State = 1848; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(VisualBasic6Parser.SELECT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode END_SELECT() { return GetToken(VisualBasic6Parser.END_SELECT, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SC_CaseContext[] sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1850; Match(SELECT);
			State = 1851; Match(WS);
			State = 1852; Match(CASE);
			State = 1853; Match(WS);
			State = 1854; valueStmt(0);
			State = 1856;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1855; Match(NEWLINE);
				}
				}
				State = 1858;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1863;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE) {
				{
				{
				State = 1860; sC_Case();
				}
				}
				State = 1865;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1867;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1866; Match(WS);
				}
			}

			State = 1869; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VisualBasic6Parser.COLON, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_sC_Case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1871; Match(CASE);
			State = 1872; Match(WS);
			State = 1873; sC_Cond();
			State = 1875;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				State = 1874; Match(WS);
				}
				break;
			}
			State = 1891;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				State = 1878;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COLON) {
					{
					State = 1877; Match(COLON);
					}
				}

				State = 1883;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 1880; Match(NEWLINE);
					}
					}
					State = 1885;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 1887;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1886; Match(NEWLINE);
					}
					}
					State = 1889;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1899;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				State = 1893; block();
				State = 1895;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1894; Match(NEWLINE);
					}
					}
					State = 1897;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondExprContext : SC_CondContext {
		public SC_CondExprContext[] sC_CondExpr() {
			return GetRuleContexts<SC_CondExprContext>();
		}
		public SC_CondExprContext sC_CondExpr(int i) {
			return GetRuleContext<SC_CondExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public CaseCondExprContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1916;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1901; Match(ELSE);
				}
				break;

			case 2:
				_localctx = new CaseCondExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1902; sC_CondExpr();
				State = 1913;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,290,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1904;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1903; Match(WS);
							}
						}

						State = 1906; Match(COMMA);
						State = 1908;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
						case 1:
							{
							State = 1907; Match(WS);
							}
							break;
						}
						State = 1910; sC_CondExpr();
						}
						} 
					}
					State = 1915;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,290,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondExprContext : ParserRuleContext {
		public SC_CondExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_CondExpr; } }
	 
		public SC_CondExprContext() { }
		public virtual void CopyFrom(SC_CondExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondExprValueContext : SC_CondExprContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public CaseCondExprValueContext(SC_CondExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExprValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExprValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExprValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondExprIsContext : SC_CondExprContext {
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public CaseCondExprIsContext(SC_CondExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExprIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExprIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExprIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondExprToContext : SC_CondExprContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public CaseCondExprToContext(SC_CondExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondExprTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondExprTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondExprTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondExprContext sC_CondExpr() {
		SC_CondExprContext _localctx = new SC_CondExprContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_sC_CondExpr);
		int _la;
		try {
			State = 1935;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
			case 1:
				_localctx = new CaseCondExprIsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1918; Match(IS);
				State = 1920;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1919; Match(WS);
					}
				}

				State = 1922; comparisonOperator();
				State = 1924;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					State = 1923; Match(WS);
					}
					break;
				}
				State = 1926; valueStmt(0);
				}
				break;

			case 2:
				_localctx = new CaseCondExprValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1928; valueStmt(0);
				}
				break;

			case 3:
				_localctx = new CaseCondExprToContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1929; valueStmt(0);
				State = 1930; Match(WS);
				State = 1931; Match(TO);
				State = 1932; Match(WS);
				State = 1933; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public ITerminalNode SENDKEYS() { return GetToken(VisualBasic6Parser.SENDKEYS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1937; Match(SENDKEYS);
			State = 1938; Match(WS);
			State = 1939; valueStmt(0);
			State = 1948;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 1941;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1940; Match(WS);
					}
				}

				State = 1943; Match(COMMA);
				State = 1945;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					State = 1944; Match(WS);
					}
					break;
				}
				State = 1947; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public ITerminalNode SETATTR() { return GetToken(VisualBasic6Parser.SETATTR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1950; Match(SETATTR);
			State = 1951; Match(WS);
			State = 1952; valueStmt(0);
			State = 1954;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1953; Match(WS);
				}
			}

			State = 1956; Match(COMMA);
			State = 1958;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				State = 1957; Match(WS);
				}
				break;
			}
			State = 1960; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(VisualBasic6Parser.SET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1962; Match(SET);
			State = 1963; Match(WS);
			State = 1964; implicitCallStmt_InStmt();
			State = 1966;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1965; Match(WS);
				}
			}

			State = 1968; Match(EQ);
			State = 1970;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				State = 1969; Match(WS);
				}
				break;
			}
			State = 1972; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VisualBasic6Parser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_SUB() { return GetToken(VisualBasic6Parser.END_SUB, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1979;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 1976; visibility();
				State = 1977; Match(WS);
				}
			}

			State = 1983;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1981; Match(STATIC);
				State = 1982; Match(WS);
				}
			}

			State = 1985; Match(SUB);
			State = 1986; Match(WS);
			State = 1987; ambiguousIdentifier();
			State = 1992;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1989;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1988; Match(WS);
					}
				}

				State = 1991; argList();
				}
			}

			State = 1995;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1994; Match(NEWLINE);
				}
				}
				State = 1997;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2005;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 1999; block();
				State = 2001;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2000; Match(NEWLINE);
					}
					}
					State = 2003;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 2007; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public ITerminalNode TIME() { return GetToken(VisualBasic6Parser.TIME, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2009; Match(TIME);
			State = 2011;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2010; Match(WS);
				}
			}

			State = 2013; Match(EQ);
			State = 2015;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				State = 2014; Match(WS);
				}
				break;
			}
			State = 2017; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(VisualBasic6Parser.TYPE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VisualBasic6Parser.END_TYPE, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public TypeStmt_ElementContext[] typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2022;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) {
				{
				State = 2019; visibility();
				State = 2020; Match(WS);
				}
			}

			State = 2024; Match(TYPE);
			State = 2025; Match(WS);
			State = 2026; ambiguousIdentifier();
			State = 2028;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2027; Match(NEWLINE);
				}
				}
				State = 2030;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2035;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 2032; typeStmt_Element();
				}
				}
				State = 2037;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2038; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2040; ambiguousIdentifier();
			State = 2055;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				State = 2042;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2041; Match(WS);
					}
				}

				State = 2044; Match(LPAREN);
				State = 2049;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					State = 2046;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
					case 1:
						{
						State = 2045; Match(WS);
						}
						break;
					}
					State = 2048; subscripts();
					}
					break;
				}
				State = 2052;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2051; Match(WS);
					}
				}

				State = 2054; Match(RPAREN);
				}
				break;
			}
			State = 2059;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2057; Match(WS);
				State = 2058; asTypeClause();
				}
			}

			State = 2062;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2061; Match(NEWLINE);
				}
				}
				State = 2064;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public ITerminalNode TYPEOF() { return GetToken(VisualBasic6Parser.TYPEOF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2066; Match(TYPEOF);
			State = 2067; Match(WS);
			State = 2068; valueStmt(0);
			State = 2073;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				State = 2069; Match(WS);
				State = 2070; Match(IS);
				State = 2071; Match(WS);
				State = 2072; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ITerminalNode UNLOAD() { return GetToken(VisualBasic6Parser.UNLOAD, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2075; Match(UNLOAD);
			State = 2076; Match(WS);
			State = 2077; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public ITerminalNode UNLOCK() { return GetToken(VisualBasic6Parser.UNLOCK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079; Match(UNLOCK);
			State = 2080; Match(WS);
			State = 2081; valueStmt(0);
			State = 2096;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				State = 2083;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2082; Match(WS);
					}
				}

				State = 2085; Match(COMMA);
				State = 2087;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					State = 2086; Match(WS);
					}
					break;
				}
				State = 2089; valueStmt(0);
				State = 2094;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					State = 2090; Match(WS);
					State = 2091; Match(TO);
					State = 2092; Match(WS);
					State = 2093; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(VisualBasic6Parser.PLUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLtContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode LT() { return GetToken(VisualBasic6Parser.LT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsLtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ITerminalNode ADDRESSOF() { return GetToken(VisualBasic6Parser.ADDRESSOF, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(VisualBasic6Parser.MULT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VisualBasic6Parser.ASSIGN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLikeContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public VsLikeContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLike(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsDivContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VisualBasic6Parser.DIV, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPlusContext : ValueStmtContext {
		public ITerminalNode PLUS() { return GetToken(VisualBasic6Parser.PLUS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public VsPlusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GEQ() { return GetToken(VisualBasic6Parser.GEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsGeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsGeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsGeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VisualBasic6Parser.NOT, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode NEQ() { return GetToken(VisualBasic6Parser.NEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsNeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VisualBasic6Parser.XOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode AND() { return GetToken(VisualBasic6Parser.AND, 0); }
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(VisualBasic6Parser.LEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsLeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VisualBasic6Parser.POW, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIsContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public VsIsContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VisualBasic6Parser.MOD, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode AMPERSAND() { return GetToken(VisualBasic6Parser.AMPERSAND, 0); }
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode OR() { return GetToken(VisualBasic6Parser.OR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMinusContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsMinusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode EQV() { return GetToken(VisualBasic6Parser.EQV, 0); }
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode IMP() { return GetToken(VisualBasic6Parser.IMP, 0); }
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGtContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GT() { return GetToken(VisualBasic6Parser.GT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsGtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsGt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsGt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsEqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 220;
		EnterRecursionRule(_localctx, 220, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2155;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2099; literal();
				}
				break;

			case 2:
				{
				_localctx = new VsICSContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2100; implicitCallStmt_InStmt();
				}
				break;

			case 3:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2101; Match(LPAREN);
				State = 2103;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					State = 2102; Match(WS);
					}
					break;
				}
				State = 2105; valueStmt(0);
				State = 2116;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,329,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2107;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2106; Match(WS);
							}
						}

						State = 2109; Match(COMMA);
						State = 2111;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
						case 1:
							{
							State = 2110; Match(WS);
							}
							break;
						}
						State = 2113; valueStmt(0);
						}
						} 
					}
					State = 2118;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,329,_ctx);
				}
				State = 2120;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2119; Match(WS);
					}
				}

				State = 2122; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2124; Match(NEW);
				State = 2125; Match(WS);
				State = 2126; valueStmt(28);
				}
				break;

			case 5:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2127; typeOfStmt();
				}
				break;

			case 6:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2128; midStmt();
				}
				break;

			case 7:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2129; Match(ADDRESSOF);
				State = 2130; Match(WS);
				State = 2131; valueStmt(25);
				}
				break;

			case 8:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2132; implicitCallStmt_InStmt();
				State = 2134;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2133; Match(WS);
					}
				}

				State = 2136; Match(ASSIGN);
				State = 2138;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					State = 2137; Match(WS);
					}
					break;
				}
				State = 2140; valueStmt(24);
				}
				break;

			case 9:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2142; Match(MINUS);
				State = 2144;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,333,_ctx) ) {
				case 1:
					{
					State = 2143; Match(WS);
					}
					break;
				}
				State = 2146; valueStmt(14);
				}
				break;

			case 10:
				{
				_localctx = new VsPlusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2147; Match(PLUS);
				State = 2149;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					State = 2148; Match(WS);
					}
					break;
				}
				State = 2151; valueStmt(13);
				}
				break;

			case 11:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2152; Match(NOT);
				State = 2153; Match(WS);
				State = 2154; valueStmt(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2315;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,365,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2313;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
					case 1:
						{
						_localctx = new VsIsContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2157;
						if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
						State = 2158; Match(WS);
						State = 2159; Match(IS);
						State = 2160; Match(WS);
						State = 2161; valueStmt(24);
						}
						break;

					case 2:
						{
						_localctx = new VsLikeContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2162;
						if (!(Precpred(_ctx, 22))) throw new FailedPredicateException(this, "Precpred(_ctx, 22)");
						State = 2163; Match(WS);
						State = 2164; Match(LIKE);
						State = 2165; Match(WS);
						State = 2166; valueStmt(23);
						}
						break;

					case 3:
						{
						_localctx = new VsGeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2167;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 2169;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2168; Match(WS);
							}
						}

						State = 2171; Match(GEQ);
						State = 2173;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
						case 1:
							{
							State = 2172; Match(WS);
							}
							break;
						}
						State = 2175; valueStmt(22);
						}
						break;

					case 4:
						{
						_localctx = new VsLeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2176;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 2178;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2177; Match(WS);
							}
						}

						State = 2180; Match(LEQ);
						State = 2182;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
						case 1:
							{
							State = 2181; Match(WS);
							}
							break;
						}
						State = 2184; valueStmt(21);
						}
						break;

					case 5:
						{
						_localctx = new VsGtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2185;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 2187;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2186; Match(WS);
							}
						}

						State = 2189; Match(GT);
						State = 2191;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
						case 1:
							{
							State = 2190; Match(WS);
							}
							break;
						}
						State = 2193; valueStmt(20);
						}
						break;

					case 6:
						{
						_localctx = new VsLtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2194;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2196;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2195; Match(WS);
							}
						}

						State = 2198; Match(LT);
						State = 2200;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
						case 1:
							{
							State = 2199; Match(WS);
							}
							break;
						}
						State = 2202; valueStmt(19);
						}
						break;

					case 7:
						{
						_localctx = new VsNeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2203;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2205;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2204; Match(WS);
							}
						}

						State = 2207; Match(NEQ);
						State = 2209;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
						case 1:
							{
							State = 2208; Match(WS);
							}
							break;
						}
						State = 2211; valueStmt(18);
						}
						break;

					case 8:
						{
						_localctx = new VsEqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2212;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2214;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2213; Match(WS);
							}
						}

						State = 2216; Match(EQ);
						State = 2218;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
						case 1:
							{
							State = 2217; Match(WS);
							}
							break;
						}
						State = 2220; valueStmt(17);
						}
						break;

					case 9:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2221;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2222; Match(WS);
						State = 2223; Match(AMPERSAND);
						State = 2224; Match(WS);
						State = 2225; valueStmt(16);
						}
						break;

					case 10:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2226;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2228;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2227; Match(WS);
							}
						}

						State = 2230; Match(PLUS);
						State = 2232;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
						case 1:
							{
							State = 2231; Match(WS);
							}
							break;
						}
						State = 2234; valueStmt(13);
						}
						break;

					case 11:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2235;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2237;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2236; Match(WS);
							}
						}

						State = 2239; Match(MOD);
						State = 2241;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
						case 1:
							{
							State = 2240; Match(WS);
							}
							break;
						}
						State = 2243; valueStmt(12);
						}
						break;

					case 12:
						{
						_localctx = new VsDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2244;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2246;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2245; Match(WS);
							}
						}

						State = 2248; Match(DIV);
						State = 2250;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
						case 1:
							{
							State = 2249; Match(WS);
							}
							break;
						}
						State = 2252; valueStmt(11);
						}
						break;

					case 13:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2253;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2255;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2254; Match(WS);
							}
						}

						State = 2257; Match(MULT);
						State = 2259;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
						case 1:
							{
							State = 2258; Match(WS);
							}
							break;
						}
						State = 2261; valueStmt(10);
						}
						break;

					case 14:
						{
						_localctx = new VsMinusContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2262;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2264;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2263; Match(WS);
							}
						}

						State = 2266; Match(MINUS);
						State = 2268;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
						case 1:
							{
							State = 2267; Match(WS);
							}
							break;
						}
						State = 2270; valueStmt(9);
						}
						break;

					case 15:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2271;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2273;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2272; Match(WS);
							}
						}

						State = 2275; Match(POW);
						State = 2277;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,359,_ctx) ) {
						case 1:
							{
							State = 2276; Match(WS);
							}
							break;
						}
						State = 2279; valueStmt(8);
						}
						break;

					case 16:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2280;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2281; Match(WS);
						State = 2282; Match(IMP);
						State = 2283; Match(WS);
						State = 2284; valueStmt(7);
						}
						break;

					case 17:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2285;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2286; Match(WS);
						State = 2287; Match(EQV);
						State = 2288; Match(WS);
						State = 2289; valueStmt(6);
						}
						break;

					case 18:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2290;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2292;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2291; Match(WS);
							}
						}

						State = 2294; Match(XOR);
						State = 2296;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
						case 1:
							{
							State = 2295; Match(WS);
							}
							break;
						}
						State = 2298; valueStmt(5);
						}
						break;

					case 19:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2299;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2301;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2300; Match(WS);
							}
						}

						State = 2303; Match(OR);
						State = 2305;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
						case 1:
							{
							State = 2304; Match(WS);
							}
							break;
						}
						State = 2307; valueStmt(4);
						}
						break;

					case 20:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2308;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2309; Match(WS);
						State = 2310; Match(AND);
						State = 2311; Match(WS);
						State = 2312; valueStmt(3);
						}
						break;
					}
					} 
				}
				State = 2317;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,365,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public ITerminalNode DIM() { return GetToken(VisualBasic6Parser.DIM, 0); }
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VisualBasic6Parser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2321;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DIM:
				{
				State = 2318; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2319; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2320; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2323; Match(WS);
			State = 2326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				State = 2324; Match(WITHEVENTS);
				State = 2325; Match(WS);
				}
				break;
			}
			State = 2328; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public VariableSubStmtContext[] variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2330; variableSubStmt();
			State = 2341;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2332;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2331; Match(WS);
						}
					}

					State = 2334; Match(COMMA);
					State = 2336;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2335; Match(WS);
						}
					}

					State = 2338; variableSubStmt();
					}
					} 
				}
				State = 2343;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2344; ambiguousIdentifier();
			State = 2362;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				State = 2346;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2345; Match(WS);
					}
				}

				State = 2348; Match(LPAREN);
				State = 2350;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					State = 2349; Match(WS);
					}
					break;
				}
				State = 2356;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)) | (1L << (DOT - 130)) | (1L << (EXCLAMATIONMARK - 130)) | (1L << (LPAREN - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MINUS - 195)) | (1L << (PLUS - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (OCTALLITERAL - 195)) | (1L << (IDENTIFIER - 195)) | (1L << (WS - 195)))) != 0)) {
					{
					State = 2352; subscripts();
					State = 2354;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2353; Match(WS);
						}
					}

					}
				}

				State = 2358; Match(RPAREN);
				State = 2360;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					State = 2359; Match(WS);
					}
					break;
				}
				}
				break;
			}
			State = 2365;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				State = 2364; typeHint();
				}
				break;
			}
			State = 2369;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				State = 2367; Match(WS);
				State = 2368; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VisualBasic6Parser.WEND, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_whileWendStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2371; Match(WHILE);
			State = 2372; Match(WS);
			State = 2373; valueStmt(0);
			State = 2375;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2374; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2377;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,379,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2382;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,380,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2379; block();
					}
					} 
				}
				State = 2384;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,380,_ctx);
			}
			State = 2388;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 2385; Match(NEWLINE);
				}
				}
				State = 2390;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2391; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public ITerminalNode WIDTH() { return GetToken(VisualBasic6Parser.WIDTH, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2393; Match(WIDTH);
			State = 2394; Match(WS);
			State = 2395; valueStmt(0);
			State = 2397;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2396; Match(WS);
				}
			}

			State = 2399; Match(COMMA);
			State = 2401;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				State = 2400; Match(WS);
				}
				break;
			}
			State = 2403; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VisualBasic6Parser.WITH, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode END_WITH() { return GetToken(VisualBasic6Parser.END_WITH, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2405; Match(WITH);
			State = 2406; Match(WS);
			State = 2407; implicitCallStmt_InStmt();
			State = 2409;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2408; Match(NEWLINE);
				}
				}
				State = 2411;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2419;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (PUBLIC - 129)) | (1L << (PUT - 129)) | (1L << (RANDOM - 129)) | (1L << (RANDOMIZE - 129)) | (1L << (RAISEEVENT - 129)) | (1L << (READ - 129)) | (1L << (REDIM - 129)) | (1L << (REM - 129)) | (1L << (RESET - 129)) | (1L << (RESUME - 129)) | (1L << (RETURN - 129)) | (1L << (RMDIR - 129)) | (1L << (RSET - 129)) | (1L << (SAVEPICTURE - 129)) | (1L << (SAVESETTING - 129)) | (1L << (SEEK - 129)) | (1L << (SELECT - 129)) | (1L << (SENDKEYS - 129)) | (1L << (SET - 129)) | (1L << (SETATTR - 129)) | (1L << (SHARED - 129)) | (1L << (SINGLE - 129)) | (1L << (SPC - 129)) | (1L << (STATIC - 129)) | (1L << (STEP - 129)) | (1L << (STOP - 129)) | (1L << (STRING - 129)) | (1L << (SUB - 129)) | (1L << (TAB - 129)) | (1L << (TEXT - 129)) | (1L << (THEN - 129)) | (1L << (TIME - 129)) | (1L << (TO - 129)) | (1L << (TRUE - 129)) | (1L << (TYPE - 129)) | (1L << (TYPEOF - 129)) | (1L << (UNLOAD - 129)) | (1L << (UNLOCK - 129)) | (1L << (UNTIL - 129)) | (1L << (VARIANT - 129)) | (1L << (VERSION - 129)) | (1L << (WEND - 129)) | (1L << (WHILE - 129)) | (1L << (WIDTH - 129)) | (1L << (WITH - 129)) | (1L << (WITHEVENTS - 129)) | (1L << (WRITE - 129)) | (1L << (XOR - 129)) | (1L << (DOT - 129)) | (1L << (EXCLAMATIONMARK - 129)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (L_SQUARE_BRACKET - 206)) | (1L << (IDENTIFIER - 206)) | (1L << (WS - 206)))) != 0)) {
				{
				State = 2413; block();
				State = 2415;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2414; Match(NEWLINE);
					}
					}
					State = 2417;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 2421; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2423; Match(WRITE);
			State = 2424; Match(WS);
			State = 2425; valueStmt(0);
			State = 2427;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2426; Match(WS);
				}
			}

			State = 2429; Match(COMMA);
			State = 2434;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2431;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
				case 1:
					{
					State = 2430; Match(WS);
					}
					break;
				}
				State = 2433; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext eCS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_explicitCallStmt);
		try {
			State = 2438;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2436; eCS_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2437; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_eCS_ProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2440; Match(CALL);
			State = 2441; Match(WS);
			State = 2442; ambiguousIdentifier();
			State = 2444;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				State = 2443; typeHint();
				}
				break;
			}
			State = 2459;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				State = 2447;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2446; Match(WS);
					}
				}

				State = 2449; Match(LPAREN);
				State = 2451;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					State = 2450; Match(WS);
					}
					break;
				}
				State = 2453; argsCall();
				State = 2455;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2454; Match(WS);
					}
				}

				State = 2457; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2461; Match(CALL);
			State = 2462; Match(WS);
			State = 2464;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				State = 2463; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2466; Match(DOT);
			State = 2468;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2467; Match(WS);
				}
			}

			State = 2470; ambiguousIdentifier();
			State = 2472;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				State = 2471; typeHint();
				}
				break;
			}
			State = 2487;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				State = 2475;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2474; Match(WS);
					}
				}

				State = 2477; Match(LPAREN);
				State = 2479;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					State = 2478; Match(WS);
					}
					break;
				}
				State = 2481; argsCall();
				State = 2483;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2482; Match(WS);
					}
				}

				State = 2485; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_implicitCallStmt_InBlock);
		try {
			State = 2491;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2489; iCS_B_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2490; iCS_B_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public CertainIdentifierContext certainIdentifier() {
			return GetRuleContext<CertainIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_iCS_B_ProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2493; certainIdentifier();
			State = 2496;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				State = 2494; Match(WS);
				State = 2495; argsCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_iCS_B_MemberProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				State = 2498; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2501; Match(DOT);
			State = 2502; ambiguousIdentifier();
			State = 2504;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				State = 2503; typeHint();
				}
				break;
			}
			State = 2508;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				State = 2506; Match(WS);
				State = 2507; argsCall();
				}
				break;
			}
			State = 2511;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				State = 2510; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_implicitCallStmt_InStmt);
		try {
			State = 2517;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2513; iCS_S_MembersCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2514; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2515; iCS_S_ProcedureOrArrayCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2516; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_iCS_S_VariableOrProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2519; ambiguousIdentifier();
			State = 2521;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				State = 2520; typeHint();
				}
				break;
			}
			State = 2524;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				State = 2523; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ICS_S_NestedProcedureCallContext iCS_S_NestedProcedureCall() {
			return GetRuleContext<ICS_S_NestedProcedureCallContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2529;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 2526; ambiguousIdentifier();
				}
				break;

			case 2:
				{
				State = 2527; baseType();
				}
				break;

			case 3:
				{
				State = 2528; iCS_S_NestedProcedureCall();
				}
				break;
			}
			State = 2532;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 2531; typeHint();
				}
			}

			State = 2535;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2534; Match(WS);
				}
			}

			State = 2537; Match(LPAREN);
			State = 2539;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				State = 2538; Match(WS);
				}
				break;
			}
			State = 2545;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)) | (1L << (COMMA - 130)) | (1L << (DOT - 130)) | (1L << (EXCLAMATIONMARK - 130)) | (1L << (LPAREN - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MINUS - 195)) | (1L << (PLUS - 195)) | (1L << (SEMICOLON - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (OCTALLITERAL - 195)) | (1L << (IDENTIFIER - 195)) | (1L << (WS - 195)))) != 0)) {
				{
				State = 2541; argsCall();
				State = 2543;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2542; Match(WS);
					}
				}

				}
			}

			State = 2547; Match(RPAREN);
			State = 2549;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				State = 2548; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_NestedProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ICS_S_NestedProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_NestedProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_NestedProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_NestedProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_NestedProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_NestedProcedureCallContext iCS_S_NestedProcedureCall() {
		ICS_S_NestedProcedureCallContext _localctx = new ICS_S_NestedProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_iCS_S_NestedProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2551; ambiguousIdentifier();
			State = 2553;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 2552; typeHint();
				}
			}

			State = 2556;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2555; Match(WS);
				}
			}

			State = 2558; Match(LPAREN);
			State = 2560;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				State = 2559; Match(WS);
				}
				break;
			}
			State = 2566;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)) | (1L << (COMMA - 130)) | (1L << (DOT - 130)) | (1L << (EXCLAMATIONMARK - 130)) | (1L << (LPAREN - 130)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (MINUS - 195)) | (1L << (PLUS - 195)) | (1L << (SEMICOLON - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (OCTALLITERAL - 195)) | (1L << (IDENTIFIER - 195)) | (1L << (WS - 195)))) != 0)) {
				{
				State = 2562; argsCall();
				State = 2564;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2563; Match(WS);
					}
				}

				}
			}

			State = 2568; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MemberCallContext[] iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_iCS_S_MembersCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2572;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				State = 2570; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2571; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2575;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2574; iCS_S_MemberCall();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2577;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,425,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2580;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				State = 2579; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_iCS_S_MemberCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2583;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2582; Match(WS);
				}
			}

			State = 2585; Match(DOT);
			State = 2588;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				State = 2586; iCS_S_VariableOrProcedureCall();
				}
				break;

			case 2:
				{
				State = 2587; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_iCS_S_DictionaryCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2590; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public ArgCallContext[] argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(VisualBasic6Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VisualBasic6Parser.SEMICOLON, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2604;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,432,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2593;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
					case 1:
						{
						State = 2592; argCall();
						}
						break;
					}
					State = 2596;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2595; Match(WS);
						}
					}

					State = 2598;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2600;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
					case 1:
						{
						State = 2599; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 2606;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,432,_ctx);
			}
			State = 2607; argCall();
			State = 2620;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,436,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2609;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2608; Match(WS);
						}
					}

					State = 2611;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2613;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,434,_ctx) ) {
					case 1:
						{
						State = 2612; Match(WS);
						}
						break;
					}
					State = 2616;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,435,_ctx) ) {
					case 1:
						{
						State = 2615; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2622;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,436,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2625;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				State = 2623;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2624; Match(WS);
				}
				break;
			}
			State = 2627; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public ITerminalNode EXCLAMATIONMARK() { return GetToken(VisualBasic6Parser.EXCLAMATIONMARK, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_dictionaryCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2629; Match(EXCLAMATIONMARK);
			State = 2630; ambiguousIdentifier();
			State = 2632;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				State = 2631; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2634; Match(LPAREN);
			State = 2652;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				State = 2636;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2635; Match(WS);
					}
				}

				State = 2638; arg();
				State = 2649;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,442,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2640;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2639; Match(WS);
							}
						}

						State = 2642; Match(COMMA);
						State = 2644;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2643; Match(WS);
							}
						}

						State = 2646; arg();
						}
						} 
					}
					State = 2651;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,442,_ctx);
				}
				}
				break;
			}
			State = 2655;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2654; Match(WS);
				}
			}

			State = 2657; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VisualBasic6Parser.OPTIONAL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2661;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				State = 2659; Match(OPTIONAL);
				State = 2660; Match(WS);
				}
				break;
			}
			State = 2665;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				State = 2663;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2664; Match(WS);
				}
				break;
			}
			State = 2669;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				State = 2667; Match(PARAMARRAY);
				State = 2668; Match(WS);
				}
				break;
			}
			State = 2671; ambiguousIdentifier();
			State = 2673;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) {
				{
				State = 2672; typeHint();
				}
			}

			State = 2683;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				State = 2676;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2675; Match(WS);
					}
				}

				State = 2678; Match(LPAREN);
				State = 2680;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2679; Match(WS);
					}
				}

				State = 2682; Match(RPAREN);
				}
				break;
			}
			State = 2687;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				State = 2685; Match(WS);
				State = 2686; asTypeClause();
				}
				break;
			}
			State = 2693;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				State = 2690;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2689; Match(WS);
					}
				}

				State = 2692; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_argDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2695; Match(EQ);
			State = 2697;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2696; Match(WS);
				}
			}

			State = 2701;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				State = 2699; literal();
				}
				break;

			case 2:
				{
				State = 2700; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2703; subscript();
			State = 2714;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,459,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2705;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2704; Match(WS);
						}
					}

					State = 2707; Match(COMMA);
					State = 2709;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,458,_ctx) ) {
					case 1:
						{
						State = 2708; Match(WS);
						}
						break;
					}
					State = 2711; subscript();
					}
					} 
				}
				State = 2716;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,459,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2722;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,460,_ctx) ) {
			case 1:
				{
				State = 2717; valueStmt(0);
				State = 2718; Match(WS);
				State = 2719; Match(TO);
				State = 2720; Match(WS);
				}
				break;
			}
			State = 2724; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(VisualBasic6Parser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VisualBasic6Parser.IDENTIFIER, i);
		}
		public AmbiguousKeywordContext[] ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VisualBasic6Parser.L_SQUARE_BRACKET, 0); }
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VisualBasic6Parser.R_SQUARE_BRACKET, 0); }
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext ambiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_ambiguousIdentifier);
		int _la;
		try {
			int _alt;
			State = 2740;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEEP:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2728;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2728;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case IDENTIFIER:
							{
							State = 2726; Match(IDENTIFIER);
							}
							break;
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEEP:
						case BEGIN:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case OBJECT:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2727; ambiguousKeyword();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2730;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,462,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2732; Match(L_SQUARE_BRACKET);
				State = 2735;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2735;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 2733; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEEP:
					case BEGIN:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case OBJECT:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2734; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2737;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0) || _la==IDENTIFIER );
				State = 2739; Match(R_SQUARE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_asTypeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2742; Match(AS);
			State = 2743; Match(WS);
			State = 2746;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				State = 2744; Match(NEW);
				State = 2745; Match(WS);
				}
				break;
			}
			State = 2748; type();
			State = 2751;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				State = 2749; Match(WS);
				State = 2750; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(VisualBasic6Parser.BOOLEAN, 0); }
		public ITerminalNode BYTE() { return GetToken(VisualBasic6Parser.BYTE, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VisualBasic6Parser.COLLECTION, 0); }
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VisualBasic6Parser.DOUBLE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VisualBasic6Parser.INTEGER, 0); }
		public ITerminalNode LONG() { return GetToken(VisualBasic6Parser.LONG, 0); }
		public ITerminalNode OBJECT() { return GetToken(VisualBasic6Parser.OBJECT, 0); }
		public ITerminalNode SINGLE() { return GetToken(VisualBasic6Parser.SINGLE, 0); }
		public ITerminalNode STRING() { return GetToken(VisualBasic6Parser.STRING, 0); }
		public ITerminalNode VARIANT() { return GetToken(VisualBasic6Parser.VARIANT, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2753;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (INTEGER - 81)) | (1L << (LONG - 81)) | (1L << (OBJECT - 81)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (SINGLE - 151)) | (1L << (STRING - 151)) | (1L << (VARIANT - 151)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CertainIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(VisualBasic6Parser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VisualBasic6Parser.IDENTIFIER, i);
		}
		public AmbiguousKeywordContext[] ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_certainIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCertainIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCertainIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CertainIdentifierContext certainIdentifier() {
		CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_certainIdentifier);
		try {
			int _alt;
			State = 2770;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2755; Match(IDENTIFIER);
				State = 2760;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,469,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 2758;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEEP:
						case BEGIN:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case OBJECT:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2756; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2757; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 2762;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,469,_ctx);
				}
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEEP:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2763; ambiguousKeyword();
				State = 2766;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2766;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEEP:
						case BEGIN:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case OBJECT:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2764; ambiguousKeyword();
							}
							break;
						case IDENTIFIER:
							{
							State = 2765; Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2768;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,471,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(VisualBasic6Parser.LT, 0); }
		public ITerminalNode LEQ() { return GetToken(VisualBasic6Parser.LEQ, 0); }
		public ITerminalNode GT() { return GetToken(VisualBasic6Parser.GT, 0); }
		public ITerminalNode GEQ() { return GetToken(VisualBasic6Parser.GEQ, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VisualBasic6Parser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2772;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (EQ - 186)) | (1L << (GEQ - 186)) | (1L << (GT - 186)) | (1L << (LEQ - 186)) | (1L << (LT - 186)) | (1L << (NEQ - 186)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(VisualBasic6Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(VisualBasic6Parser.DOT, i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_complexType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2774; ambiguousIdentifier();
			State = 2779;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,473,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2775; Match(DOT);
					State = 2776; ambiguousIdentifier();
					}
					} 
				}
				State = 2781;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,473,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(VisualBasic6Parser.MULT, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2782; Match(MULT);
			State = 2784;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2783; Match(WS);
				}
			}

			State = 2788;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGERLITERAL:
				{
				State = 2786; Match(INTEGERLITERAL);
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEEP:
			case BEGIN:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case OBJECT:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2787; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public CertainIdentifierContext[] certainIdentifier() {
			return GetRuleContexts<CertainIdentifierContext>();
		}
		public CertainIdentifierContext certainIdentifier(int i) {
			return GetRuleContext<CertainIdentifierContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2790; certainIdentifier();
			State = 2799;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				State = 2792;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2791; Match(WS);
					}
				}

				State = 2794; Match(MINUS);
				State = 2796;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2795; Match(WS);
					}
				}

				State = 2798; certainIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VisualBasic6Parser.COLON, 0); }
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2801; ambiguousIdentifier();
			State = 2802; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode COLORLITERAL() { return GetToken(VisualBasic6Parser.COLORLITERAL, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VisualBasic6Parser.DATELITERAL, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VisualBasic6Parser.DOUBLELITERAL, 0); }
		public ITerminalNode FILENUMBER() { return GetToken(VisualBasic6Parser.FILENUMBER, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public ITerminalNode OCTALLITERAL() { return GetToken(VisualBasic6Parser.OCTALLITERAL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VisualBasic6Parser.STRINGLITERAL, 0); }
		public ITerminalNode TRUE() { return GetToken(VisualBasic6Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(VisualBasic6Parser.FALSE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VisualBasic6Parser.NOTHING, 0); }
		public ITerminalNode NULL() { return GetToken(VisualBasic6Parser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2804;
			_la = _input.La(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (TRUE - 163)) | (1L << (STRINGLITERAL - 163)) | (1L << (DATELITERAL - 163)) | (1L << (COLORLITERAL - 163)) | (1L << (INTEGERLITERAL - 163)) | (1L << (DOUBLELITERAL - 163)) | (1L << (FILENUMBER - 163)) | (1L << (OCTALLITERAL - 163)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublicPrivateVisibilityContext : ParserRuleContext {
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public PublicPrivateVisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publicPrivateVisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPublicPrivateVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPublicPrivateVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublicPrivateVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublicPrivateVisibilityContext publicPrivateVisibility() {
		PublicPrivateVisibilityContext _localctx = new PublicPrivateVisibilityContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_publicPrivateVisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2806;
			_la = _input.La(1);
			if ( !(_la==PRIVATE || _la==PUBLIC) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PublicPrivateGlobalVisibilityContext : ParserRuleContext {
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VisualBasic6Parser.GLOBAL, 0); }
		public PublicPrivateGlobalVisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publicPrivateGlobalVisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPublicPrivateGlobalVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPublicPrivateGlobalVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPublicPrivateGlobalVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PublicPrivateGlobalVisibilityContext publicPrivateGlobalVisibility() {
		PublicPrivateGlobalVisibilityContext _localctx = new PublicPrivateGlobalVisibilityContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_publicPrivateGlobalVisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2808;
			_la = _input.La(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (GLOBAL - 72)) | (1L << (PRIVATE - 72)) | (1L << (PUBLIC - 72)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2812;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				State = 2810; baseType();
				}
				break;

			case 2:
				{
				State = 2811; complexType();
				}
				break;
			}
			State = 2822;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				State = 2815;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2814; Match(WS);
					}
				}

				State = 2817; Match(LPAREN);
				State = 2819;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2818; Match(WS);
					}
				}

				State = 2821; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AMPERSAND() { return GetToken(VisualBasic6Parser.AMPERSAND, 0); }
		public ITerminalNode AT() { return GetToken(VisualBasic6Parser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VisualBasic6Parser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONMARK() { return GetToken(VisualBasic6Parser.EXCLAMATIONMARK, 0); }
		public ITerminalNode HASH() { return GetToken(VisualBasic6Parser.HASH, 0); }
		public ITerminalNode PERCENT() { return GetToken(VisualBasic6Parser.PERCENT, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2824;
			_la = _input.La(1);
			if ( !(((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (AMPERSAND - 178)) | (1L << (AT - 178)) | (1L << (DOLLAR - 178)) | (1L << (EXCLAMATIONMARK - 178)) | (1L << (HASH - 178)) | (1L << (PERCENT - 178)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public ITerminalNode FRIEND() { return GetToken(VisualBasic6Parser.FRIEND, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VisualBasic6Parser.GLOBAL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2826;
			_la = _input.La(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (FRIEND - 68)) | (1L << (GLOBAL - 68)) | (1L << (PRIVATE - 68)) | (1L << (PUBLIC - 68)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode ACCESS() { return GetToken(VisualBasic6Parser.ACCESS, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VisualBasic6Parser.ADDRESSOF, 0); }
		public ITerminalNode ALIAS() { return GetToken(VisualBasic6Parser.ALIAS, 0); }
		public ITerminalNode AND() { return GetToken(VisualBasic6Parser.AND, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VisualBasic6Parser.ATTRIBUTE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VisualBasic6Parser.APPACTIVATE, 0); }
		public ITerminalNode APPEND() { return GetToken(VisualBasic6Parser.APPEND, 0); }
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode BEEP() { return GetToken(VisualBasic6Parser.BEEP, 0); }
		public ITerminalNode BEGIN() { return GetToken(VisualBasic6Parser.BEGIN, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VisualBasic6Parser.BOOLEAN, 0); }
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ITerminalNode BYTE() { return GetToken(VisualBasic6Parser.BYTE, 0); }
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ITerminalNode CLASS() { return GetToken(VisualBasic6Parser.CLASS, 0); }
		public ITerminalNode CLOSE() { return GetToken(VisualBasic6Parser.CLOSE, 0); }
		public ITerminalNode CHDIR() { return GetToken(VisualBasic6Parser.CHDIR, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VisualBasic6Parser.CHDRIVE, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VisualBasic6Parser.COLLECTION, 0); }
		public ITerminalNode CONST() { return GetToken(VisualBasic6Parser.CONST, 0); }
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VisualBasic6Parser.DECLARE, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VisualBasic6Parser.DEFBOOL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VisualBasic6Parser.DEFBYTE, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VisualBasic6Parser.DEFCUR, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VisualBasic6Parser.DEFDBL, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VisualBasic6Parser.DEFDATE, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VisualBasic6Parser.DEFDEC, 0); }
		public ITerminalNode DEFINT() { return GetToken(VisualBasic6Parser.DEFINT, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VisualBasic6Parser.DEFLNG, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VisualBasic6Parser.DEFOBJ, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VisualBasic6Parser.DEFSNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VisualBasic6Parser.DEFSTR, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VisualBasic6Parser.DEFVAR, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VisualBasic6Parser.DELETESETTING, 0); }
		public ITerminalNode DIM() { return GetToken(VisualBasic6Parser.DIM, 0); }
		public ITerminalNode DO() { return GetToken(VisualBasic6Parser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VisualBasic6Parser.DOUBLE, 0); }
		public ITerminalNode EACH() { return GetToken(VisualBasic6Parser.EACH, 0); }
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VisualBasic6Parser.ELSEIF, 0); }
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public ITerminalNode ENUM() { return GetToken(VisualBasic6Parser.ENUM, 0); }
		public ITerminalNode EQV() { return GetToken(VisualBasic6Parser.EQV, 0); }
		public ITerminalNode ERASE() { return GetToken(VisualBasic6Parser.ERASE, 0); }
		public ITerminalNode ERROR() { return GetToken(VisualBasic6Parser.ERROR, 0); }
		public ITerminalNode EVENT() { return GetToken(VisualBasic6Parser.EVENT, 0); }
		public ITerminalNode FALSE() { return GetToken(VisualBasic6Parser.FALSE, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VisualBasic6Parser.FILECOPY, 0); }
		public ITerminalNode FRIEND() { return GetToken(VisualBasic6Parser.FRIEND, 0); }
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode GET() { return GetToken(VisualBasic6Parser.GET, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VisualBasic6Parser.GLOBAL, 0); }
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode IMP() { return GetToken(VisualBasic6Parser.IMP, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VisualBasic6Parser.IMPLEMENTS, 0); }
		public ITerminalNode IN() { return GetToken(VisualBasic6Parser.IN, 0); }
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ITerminalNode INTEGER() { return GetToken(VisualBasic6Parser.INTEGER, 0); }
		public ITerminalNode KILL() { return GetToken(VisualBasic6Parser.KILL, 0); }
		public ITerminalNode LOAD() { return GetToken(VisualBasic6Parser.LOAD, 0); }
		public ITerminalNode LOCK() { return GetToken(VisualBasic6Parser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(VisualBasic6Parser.LONG, 0); }
		public ITerminalNode LOOP() { return GetToken(VisualBasic6Parser.LOOP, 0); }
		public ITerminalNode LEN() { return GetToken(VisualBasic6Parser.LEN, 0); }
		public ITerminalNode LET() { return GetToken(VisualBasic6Parser.LET, 0); }
		public ITerminalNode LIB() { return GetToken(VisualBasic6Parser.LIB, 0); }
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public ITerminalNode LSET() { return GetToken(VisualBasic6Parser.LSET, 0); }
		public ITerminalNode ME() { return GetToken(VisualBasic6Parser.ME, 0); }
		public ITerminalNode MID() { return GetToken(VisualBasic6Parser.MID, 0); }
		public ITerminalNode MKDIR() { return GetToken(VisualBasic6Parser.MKDIR, 0); }
		public ITerminalNode MOD() { return GetToken(VisualBasic6Parser.MOD, 0); }
		public ITerminalNode NAME() { return GetToken(VisualBasic6Parser.NAME, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public ITerminalNode NOT() { return GetToken(VisualBasic6Parser.NOT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VisualBasic6Parser.NOTHING, 0); }
		public ITerminalNode NULL() { return GetToken(VisualBasic6Parser.NULL, 0); }
		public ITerminalNode OBJECT() { return GetToken(VisualBasic6Parser.OBJECT, 0); }
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode OPEN() { return GetToken(VisualBasic6Parser.OPEN, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VisualBasic6Parser.OPTIONAL, 0); }
		public ITerminalNode OR() { return GetToken(VisualBasic6Parser.OR, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VisualBasic6Parser.OUTPUT, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VisualBasic6Parser.PRESERVE, 0); }
		public ITerminalNode PRINT() { return GetToken(VisualBasic6Parser.PRINT, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public ITerminalNode PUT() { return GetToken(VisualBasic6Parser.PUT, 0); }
		public ITerminalNode RANDOM() { return GetToken(VisualBasic6Parser.RANDOM, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VisualBasic6Parser.RANDOMIZE, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VisualBasic6Parser.RAISEEVENT, 0); }
		public ITerminalNode READ() { return GetToken(VisualBasic6Parser.READ, 0); }
		public ITerminalNode REDIM() { return GetToken(VisualBasic6Parser.REDIM, 0); }
		public ITerminalNode REM() { return GetToken(VisualBasic6Parser.REM, 0); }
		public ITerminalNode RESET() { return GetToken(VisualBasic6Parser.RESET, 0); }
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode RETURN() { return GetToken(VisualBasic6Parser.RETURN, 0); }
		public ITerminalNode RMDIR() { return GetToken(VisualBasic6Parser.RMDIR, 0); }
		public ITerminalNode RSET() { return GetToken(VisualBasic6Parser.RSET, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VisualBasic6Parser.SAVEPICTURE, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VisualBasic6Parser.SAVESETTING, 0); }
		public ITerminalNode SEEK() { return GetToken(VisualBasic6Parser.SEEK, 0); }
		public ITerminalNode SELECT() { return GetToken(VisualBasic6Parser.SELECT, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VisualBasic6Parser.SENDKEYS, 0); }
		public ITerminalNode SET() { return GetToken(VisualBasic6Parser.SET, 0); }
		public ITerminalNode SETATTR() { return GetToken(VisualBasic6Parser.SETATTR, 0); }
		public ITerminalNode SHARED() { return GetToken(VisualBasic6Parser.SHARED, 0); }
		public ITerminalNode SINGLE() { return GetToken(VisualBasic6Parser.SINGLE, 0); }
		public ITerminalNode SPC() { return GetToken(VisualBasic6Parser.SPC, 0); }
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ITerminalNode STEP() { return GetToken(VisualBasic6Parser.STEP, 0); }
		public ITerminalNode STOP() { return GetToken(VisualBasic6Parser.STOP, 0); }
		public ITerminalNode STRING() { return GetToken(VisualBasic6Parser.STRING, 0); }
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public ITerminalNode TAB() { return GetToken(VisualBasic6Parser.TAB, 0); }
		public ITerminalNode TEXT() { return GetToken(VisualBasic6Parser.TEXT, 0); }
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode TIME() { return GetToken(VisualBasic6Parser.TIME, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public ITerminalNode TRUE() { return GetToken(VisualBasic6Parser.TRUE, 0); }
		public ITerminalNode TYPE() { return GetToken(VisualBasic6Parser.TYPE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VisualBasic6Parser.TYPEOF, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VisualBasic6Parser.UNLOAD, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VisualBasic6Parser.UNLOCK, 0); }
		public ITerminalNode UNTIL() { return GetToken(VisualBasic6Parser.UNTIL, 0); }
		public ITerminalNode VARIANT() { return GetToken(VisualBasic6Parser.VARIANT, 0); }
		public ITerminalNode VERSION() { return GetToken(VisualBasic6Parser.VERSION, 0); }
		public ITerminalNode WEND() { return GetToken(VisualBasic6Parser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode WIDTH() { return GetToken(VisualBasic6Parser.WIDTH, 0); }
		public ITerminalNode WITH() { return GetToken(VisualBasic6Parser.WITH, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VisualBasic6Parser.WITHEVENTS, 0); }
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode XOR() { return GetToken(VisualBasic6Parser.XOR, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2828;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEEP) | (1L << BEGIN) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FALSE - 66)) | (1L << (FILECOPY - 66)) | (1L << (FRIEND - 66)) | (1L << (FOR - 66)) | (1L << (FUNCTION - 66)) | (1L << (GET - 66)) | (1L << (GLOBAL - 66)) | (1L << (GOSUB - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (IMP - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IN - 66)) | (1L << (INPUT - 66)) | (1L << (IS - 66)) | (1L << (INTEGER - 66)) | (1L << (KILL - 66)) | (1L << (LOAD - 66)) | (1L << (LOCK - 66)) | (1L << (LONG - 66)) | (1L << (LOOP - 66)) | (1L << (LEN - 66)) | (1L << (LET - 66)) | (1L << (LIB - 66)) | (1L << (LIKE - 66)) | (1L << (LSET - 66)) | (1L << (ME - 66)) | (1L << (MID - 66)) | (1L << (MKDIR - 66)) | (1L << (MOD - 66)) | (1L << (NAME - 66)) | (1L << (NEXT - 66)) | (1L << (NEW - 66)) | (1L << (NOT - 66)) | (1L << (NOTHING - 66)) | (1L << (NULL - 66)) | (1L << (OBJECT - 66)) | (1L << (ON - 66)) | (1L << (OPEN - 66)) | (1L << (OPTIONAL - 66)) | (1L << (OR - 66)) | (1L << (OUTPUT - 66)) | (1L << (PARAMARRAY - 66)) | (1L << (PRESERVE - 66)) | (1L << (PRINT - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (PUT - 130)) | (1L << (RANDOM - 130)) | (1L << (RANDOMIZE - 130)) | (1L << (RAISEEVENT - 130)) | (1L << (READ - 130)) | (1L << (REDIM - 130)) | (1L << (REM - 130)) | (1L << (RESET - 130)) | (1L << (RESUME - 130)) | (1L << (RETURN - 130)) | (1L << (RMDIR - 130)) | (1L << (RSET - 130)) | (1L << (SAVEPICTURE - 130)) | (1L << (SAVESETTING - 130)) | (1L << (SEEK - 130)) | (1L << (SELECT - 130)) | (1L << (SENDKEYS - 130)) | (1L << (SET - 130)) | (1L << (SETATTR - 130)) | (1L << (SHARED - 130)) | (1L << (SINGLE - 130)) | (1L << (SPC - 130)) | (1L << (STATIC - 130)) | (1L << (STEP - 130)) | (1L << (STOP - 130)) | (1L << (STRING - 130)) | (1L << (SUB - 130)) | (1L << (TAB - 130)) | (1L << (TEXT - 130)) | (1L << (THEN - 130)) | (1L << (TIME - 130)) | (1L << (TO - 130)) | (1L << (TRUE - 130)) | (1L << (TYPE - 130)) | (1L << (TYPEOF - 130)) | (1L << (UNLOAD - 130)) | (1L << (UNLOCK - 130)) | (1L << (UNTIL - 130)) | (1L << (VARIANT - 130)) | (1L << (VERSION - 130)) | (1L << (WEND - 130)) | (1L << (WHILE - 130)) | (1L << (WIDTH - 130)) | (1L << (WITH - 130)) | (1L << (WITHEVENTS - 130)) | (1L << (WRITE - 130)) | (1L << (XOR - 130)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 110: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 23);

		case 1: return Precpred(_ctx, 22);

		case 2: return Precpred(_ctx, 21);

		case 3: return Precpred(_ctx, 20);

		case 4: return Precpred(_ctx, 19);

		case 5: return Precpred(_ctx, 18);

		case 6: return Precpred(_ctx, 17);

		case 7: return Precpred(_ctx, 16);

		case 8: return Precpred(_ctx, 15);

		case 9: return Precpred(_ctx, 12);

		case 10: return Precpred(_ctx, 11);

		case 11: return Precpred(_ctx, 10);

		case 12: return Precpred(_ctx, 9);

		case 13: return Precpred(_ctx, 8);

		case 14: return Precpred(_ctx, 7);

		case 15: return Precpred(_ctx, 6);

		case 16: return Precpred(_ctx, 5);

		case 17: return Precpred(_ctx, 4);

		case 18: return Precpred(_ctx, 3);

		case 19: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xDF\xB11\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x3\x2\x3\x2"+
		"\x3\x2\x3\x3\x5\x3\x13D\n\x3\x3\x3\a\x3\x140\n\x3\f\x3\xE\x3\x143\v\x3"+
		"\x3\x3\x3\x3\x6\x3\x147\n\x3\r\x3\xE\x3\x148\x5\x3\x14B\n\x3\x3\x3\x5"+
		"\x3\x14E\n\x3\x3\x3\a\x3\x151\n\x3\f\x3\xE\x3\x154\v\x3\x3\x3\x5\x3\x157"+
		"\n\x3\x3\x3\a\x3\x15A\n\x3\f\x3\xE\x3\x15D\v\x3\x3\x3\x5\x3\x160\n\x3"+
		"\x3\x3\a\x3\x163\n\x3\f\x3\xE\x3\x166\v\x3\x3\x3\x5\x3\x169\n\x3\x3\x3"+
		"\a\x3\x16C\n\x3\f\x3\xE\x3\x16F\v\x3\x3\x3\x5\x3\x172\n\x3\x3\x3\a\x3"+
		"\x175\n\x3\f\x3\xE\x3\x178\v\x3\x3\x3\x5\x3\x17B\n\x3\x3\x3\a\x3\x17E"+
		"\n\x3\f\x3\xE\x3\x181\v\x3\x3\x3\x5\x3\x184\n\x3\x3\x4\x6\x4\x187\n\x4"+
		"\r\x4\xE\x4\x188\x3\x5\x3\x5\x5\x5\x18D\n\x5\x3\x5\x3\x5\x5\x5\x191\n"+
		"\x5\x3\x5\x3\x5\x3\x5\x5\x5\x196\n\x5\x3\x5\x3\x5\a\x5\x19A\n\x5\f\x5"+
		"\xE\x5\x19D\v\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x1A8"+
		"\n\b\x3\t\x3\t\x6\t\x1AC\n\t\r\t\xE\t\x1AD\x3\t\x6\t\x1B1\n\t\r\t\xE\t"+
		"\x1B2\x3\t\x3\t\x6\t\x1B7\n\t\r\t\xE\t\x1B8\x3\n\x3\n\x5\n\x1BD\n\n\x3"+
		"\n\x3\n\x5\n\x1C1\n\n\x3\n\x3\n\x3\n\x3\v\x3\v\x6\v\x1C8\n\v\r\v\xE\v"+
		"\x1C9\x6\v\x1CC\n\v\r\v\xE\v\x1CD\x3\f\x3\f\x6\f\x1D2\n\f\r\f\xE\f\x1D3"+
		"\x6\f\x1D6\n\f\r\f\xE\f\x1D7\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5"+
		"\r\x1E2\n\r\x3\xE\x3\xE\x6\xE\x1E6\n\xE\r\xE\xE\xE\x1E7\x3\xE\a\xE\x1EB"+
		"\n\xE\f\xE\xE\xE\x1EE\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x1FC\n\xF\x3\x10\x5\x10\x1FF\n\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x207\n\x10\x3\x10\x6\x10"+
		"\x20A\n\x10\r\x10\xE\x10\x20B\x3\x10\x6\x10\x20F\n\x10\r\x10\xE\x10\x210"+
		"\x3\x10\x3\x10\a\x10\x215\n\x10\f\x10\xE\x10\x218\v\x10\x3\x11\x3\x11"+
		"\x3\x11\x5\x11\x21D\n\x11\x3\x12\x5\x12\x220\n\x12\x3\x12\x3\x12\x5\x12"+
		"\x224\n\x12\x3\x12\x3\x12\x5\x12\x228\n\x12\x3\x12\x3\x12\x5\x12\x22C"+
		"\n\x12\x3\x12\x6\x12\x22F\n\x12\r\x12\xE\x12\x230\x3\x13\x3\x13\x5\x13"+
		"\x235\n\x13\x3\x13\x3\x13\x3\x14\x5\x14\x23A\n\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x243\n\x14\x3\x15\x5\x15\x246\n\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x24E\n\x15\x3\x15\x3"+
		"\x15\x5\x15\x252\n\x15\x3\x15\x6\x15\x255\n\x15\r\x15\xE\x15\x256\x3\x15"+
		"\x6\x15\x25A\n\x15\r\x15\xE\x15\x25B\x5\x15\x25E\n\x15\x3\x15\x3\x15\x6"+
		"\x15\x262\n\x15\r\x15\xE\x15\x263\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3"+
		"\x18\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x270\n\x19\x3\x19\x3\x19\x5\x19"+
		"\x274\n\x19\x3\x19\x3\x19\x5\x19\x278\n\x19\x3\x19\x3\x19\x5\x19\x27C"+
		"\n\x19\x3\x19\a\x19\x27F\n\x19\f\x19\xE\x19\x282\v\x19\x3\x1A\x3\x1A\x6"+
		"\x1A\x286\n\x1A\r\x1A\xE\x1A\x287\x3\x1A\x5\x1A\x28B\n\x1A\x3\x1A\a\x1A"+
		"\x28E\n\x1A\f\x1A\xE\x1A\x291\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x5\x1B\x2D6\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x2DC"+
		"\n\x1C\x3\x1C\x3\x1C\x5\x1C\x2E0\n\x1C\x3\x1C\x5\x1C\x2E3\n\x1C\x3\x1D"+
		"\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3"+
		" \x3 \x3 \x5 \x2F3\n \x3 \x3 \x5 \x2F7\n \x3 \a \x2FA\n \f \xE \x2FD\v"+
		" \x5 \x2FF\n \x3!\x3!\x3!\x5!\x304\n!\x3!\x3!\x3!\x3!\x5!\x30A\n!\x3!"+
		"\x3!\x5!\x30E\n!\x3!\a!\x311\n!\f!\xE!\x314\v!\x3\"\x3\"\x5\"\x318\n\""+
		"\x3\"\x3\"\x5\"\x31C\n\"\x3\"\x5\"\x31F\n\"\x3\"\x3\"\x5\"\x323\n\"\x3"+
		"\"\x3\"\x3#\x3#\x5#\x329\n#\x3#\x3#\x5#\x32D\n#\x3#\x3#\x3$\x3$\x3$\x5"+
		"$\x334\n$\x3$\x3$\x3$\x3$\x5$\x33A\n$\x3$\x5$\x33D\n$\x3$\x3$\x3$\x5$"+
		"\x342\n$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x34C\n$\x3$\x5$\x34F\n$\x3"+
		"$\x5$\x352\n$\x3$\x3$\x5$\x356\n$\x3%\x3%\x3%\x3%\x5%\x35C\n%\x3%\x3%"+
		"\x5%\x360\n%\x3%\a%\x363\n%\f%\xE%\x366\v%\x3&\x3&\x3&\x3&\x5&\x36C\n"+
		"&\x3&\x3&\x5&\x370\n&\x3&\x3&\x5&\x374\n&\x3&\x3&\x5&\x378\n&\x3&\x5&"+
		"\x37B\n&\x3\'\x3\'\x6\'\x37F\n\'\r\'\xE\'\x380\x3\'\x3\'\x6\'\x385\n\'"+
		"\r\'\xE\'\x386\x5\'\x389\n\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x6\'\x392"+
		"\n\'\r\'\xE\'\x393\x3\'\x3\'\x6\'\x398\n\'\r\'\xE\'\x399\x5\'\x39C\n\'"+
		"\x3\'\x3\'\x3\'\x3\'\x6\'\x3A2\n\'\r\'\xE\'\x3A3\x3\'\x3\'\x6\'\x3A8\n"+
		"\'\r\'\xE\'\x3A9\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x3B2\n\'\x3(\x3(\x3"+
		")\x3)\x3)\x5)\x3B9\n)\x3)\x3)\x3)\x3)\x6)\x3BF\n)\r)\xE)\x3C0\x3)\a)\x3C4"+
		"\n)\f)\xE)\x3C7\v)\x3)\x3)\x3*\x3*\x5*\x3CD\n*\x3*\x3*\x5*\x3D1\n*\x3"+
		"*\x5*\x3D4\n*\x3*\x6*\x3D7\n*\r*\xE*\x3D8\x3+\x3+\x3+\x3+\x5+\x3DF\n+"+
		"\x3+\x3+\x5+\x3E3\n+\x3+\a+\x3E6\n+\f+\xE+\x3E9\v+\x3,\x3,\x3,\x3,\x3"+
		"-\x3-\x3-\x5-\x3F2\n-\x3-\x3-\x3-\x3-\x5-\x3F8\n-\x3-\x3-\x3.\x3.\x3/"+
		"\x3/\x3/\x3/\x5/\x402\n/\x3/\x3/\x5/\x406\n/\x3/\x3/\x3\x30\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x5\x30\x410\n\x30\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x6\x30\x417\n\x30\r\x30\xE\x30\x418\x3\x30\x3\x30\x6\x30\x41D"+
		"\n\x30\r\x30\xE\x30\x41E\x5\x30\x421\n\x30\x3\x30\x3\x30\x3\x30\x5\x30"+
		"\x426\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x42C\n\x31\x3\x31\x3\x31"+
		"\x5\x31\x430\n\x31\x3\x31\x5\x31\x433\n\x31\x3\x31\x3\x31\x5\x31\x437"+
		"\n\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31"+
		"\x5\x31\x442\n\x31\x3\x31\x6\x31\x445\n\x31\r\x31\xE\x31\x446\x3\x31\x3"+
		"\x31\x6\x31\x44B\n\x31\r\x31\xE\x31\x44C\x5\x31\x44F\n\x31\x3\x31\x3\x31"+
		"\x3\x31\x3\x31\x5\x31\x455\n\x31\x5\x31\x457\n\x31\x3\x32\x3\x32\x3\x32"+
		"\x5\x32\x45C\n\x32\x3\x32\x3\x32\x5\x32\x460\n\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x5\x32\x466\n\x32\x3\x32\x5\x32\x469\n\x32\x3\x32\x3\x32\x5\x32"+
		"\x46D\n\x32\x3\x32\x6\x32\x470\n\x32\r\x32\xE\x32\x471\x3\x32\x3\x32\x6"+
		"\x32\x476\n\x32\r\x32\xE\x32\x477\x5\x32\x47A\n\x32\x3\x32\x3\x32\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x5\x33\x482\n\x33\x3\x33\x3\x33\x5\x33\x486\n\x33"+
		"\x3\x33\x5\x33\x489\n\x33\x3\x33\x5\x33\x48C\n\x33\x3\x33\x3\x33\x5\x33"+
		"\x490\n\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3"+
		"\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x3\x36\x5\x36\x4A7\n\x36\x3\x36\x3\x36\a\x36\x4AB\n\x36\f"+
		"\x36\xE\x36\x4AE\v\x36\x3\x36\x5\x36\x4B1\n\x36\x3\x36\x3\x36\x5\x36\x4B5"+
		"\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x6\x37\x4BD\n\x37\r\x37"+
		"\xE\x37\x4BE\x3\x37\x3\x37\x6\x37\x4C3\n\x37\r\x37\xE\x37\x4C4\x5\x37"+
		"\x4C7\n\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x6"+
		"\x39\x4D1\n\x39\r\x39\xE\x39\x4D2\x3\x39\x3\x39\x6\x39\x4D7\n\x39\r\x39"+
		"\xE\x39\x4D8\x5\x39\x4DB\n\x39\x3:\x3:\x6:\x4DF\n:\r:\xE:\x4E0\x3:\x3"+
		":\x6:\x4E5\n:\r:\xE:\x4E6\x5:\x4E9\n:\x3;\x3;\x3;\x3;\x3<\x3<\x3<\x3<"+
		"\x5<\x4F3\n<\x3<\x3<\x5<\x4F7\n<\x3<\x6<\x4FA\n<\r<\xE<\x4FB\x3=\x3=\x3"+
		"=\x3=\x3>\x3>\x5>\x504\n>\x3>\x3>\x5>\x508\n>\x3>\x3>\x5>\x50C\n>\x3>"+
		"\x3>\x3?\x3?\x3?\x3?\x5?\x514\n?\x3?\x3?\x5?\x518\n?\x3?\x3?\x3@\x3@\x3"+
		"@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x524\n\x41\x3\x41\x3\x41\x5\x41"+
		"\x528\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x52F\n\x41\x5\x41"+
		"\x531\n\x41\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x537\n\x42\x3\x42\x3\x42"+
		"\x5\x42\x53B\n\x42\x3\x42\x3\x42\x3\x43\x3\x43\a\x43\x541\n\x43\f\x43"+
		"\xE\x43\x544\v\x43\x3\x43\x5\x43\x547\n\x43\x3\x43\x3\x43\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x6\x44\x551\n\x44\r\x44\xE\x44\x552\x3\x44"+
		"\x3\x44\x6\x44\x557\n\x44\r\x44\xE\x44\x558\x5\x44\x55B\n\x44\x3\x45\x3"+
		"\x45\x3\x45\x3\x45\x3\x45\x3\x45\x6\x45\x563\n\x45\r\x45\xE\x45\x564\x3"+
		"\x45\x3\x45\x6\x45\x569\n\x45\r\x45\xE\x45\x56A\x5\x45\x56D\n\x45\x3\x46"+
		"\x3\x46\x6\x46\x571\n\x46\r\x46\xE\x46\x572\x3\x46\x3\x46\x6\x46\x577"+
		"\n\x46\r\x46\xE\x46\x578\x5\x46\x57B\n\x46\x3G\x3G\x5G\x57F\nG\x3G\x3"+
		"G\x5G\x583\nG\x3G\x3G\x5G\x587\nG\x3G\x3G\x3H\x3H\x3H\x3H\x3I\x3I\x3I"+
		"\x3I\x3I\x3I\x3I\x3I\x3J\x3J\x3J\x3J\x3J\x3J\x5J\x59D\nJ\x3J\x3J\x3J\x5"+
		"J\x5A2\nJ\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x5K\x5AC\nK\x3K\x3K\x5K\x5B0"+
		"\nK\x3K\aK\x5B3\nK\fK\xEK\x5B6\vK\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x5L"+
		"\x5C0\nL\x3L\x3L\x5L\x5C4\nL\x3L\aL\x5C7\nL\fL\xEL\x5CA\vL\x3M\x3M\x3"+
		"M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x5D7\nM\x3M\x3M\x5M\x5DB\nM\x3M"+
		"\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x5E4\nM\x3M\x3M\x5M\x5E8\nM\x3M\x5M\x5EB"+
		"\nM\x3N\x3N\x5N\x5EF\nN\x3N\x3N\x5N\x5F3\nN\x3N\x5N\x5F6\nN\aN\x5F8\n"+
		"N\fN\xEN\x5FB\vN\x3N\x5N\x5FE\nN\x3N\x5N\x601\nN\x3N\x3N\x5N\x605\nN\x3"+
		"N\x5N\x608\nN\x6N\x60A\nN\rN\xEN\x60B\x5N\x60E\nN\x3O\x3O\x3O\x5O\x613"+
		"\nO\x3O\x3O\x5O\x617\nO\x3O\x3O\x5O\x61B\nO\x3O\x3O\x5O\x61F\nO\x5O\x621"+
		"\nO\x3P\x3P\x3P\x3P\x5P\x627\nP\x3P\x3P\x5P\x62B\nP\x3P\x5P\x62E\nP\x3"+
		"Q\x3Q\x3Q\x5Q\x633\nQ\x3Q\x3Q\x5Q\x637\nQ\x3Q\x3Q\x3Q\x3Q\x5Q\x63D\nQ"+
		"\x3Q\x5Q\x640\nQ\x3Q\x5Q\x643\nQ\x3Q\x3Q\x5Q\x647\nQ\x3Q\x6Q\x64A\nQ\r"+
		"Q\xEQ\x64B\x3Q\x3Q\x6Q\x650\nQ\rQ\xEQ\x651\x5Q\x654\nQ\x3Q\x3Q\x3R\x3"+
		"R\x3R\x5R\x65B\nR\x3R\x3R\x5R\x65F\nR\x3R\x3R\x3R\x3R\x5R\x665\nR\x3R"+
		"\x5R\x668\nR\x3R\x6R\x66B\nR\rR\xER\x66C\x3R\x3R\x6R\x671\nR\rR\xER\x672"+
		"\x5R\x675\nR\x3R\x3R\x3S\x3S\x3S\x5S\x67C\nS\x3S\x3S\x5S\x680\nS\x3S\x3"+
		"S\x3S\x3S\x5S\x686\nS\x3S\x5S\x689\nS\x3S\x6S\x68C\nS\rS\xES\x68D\x3S"+
		"\x3S\x6S\x692\nS\rS\xES\x693\x5S\x696\nS\x3S\x3S\x3T\x3T\x3T\x3T\x5T\x69E"+
		"\nT\x3T\x3T\x5T\x6A2\nT\x3T\x5T\x6A5\nT\x3T\x5T\x6A8\nT\x3T\x3T\x5T\x6AC"+
		"\nT\x3T\x3T\x3U\x3U\x3U\x3U\x5U\x6B4\nU\x3U\x3U\x5U\x6B8\nU\x3U\x3U\x5"+
		"U\x6BC\nU\x5U\x6BE\nU\x3U\x5U\x6C1\nU\x3V\x3V\x3V\x5V\x6C6\nV\x3W\x3W"+
		"\x3W\x3W\x5W\x6CC\nW\x3W\x3W\x5W\x6D0\nW\x3W\x3W\x5W\x6D4\nW\x3W\aW\x6D7"+
		"\nW\fW\xEW\x6DA\vW\x3X\x3X\x5X\x6DE\nX\x3X\x3X\x5X\x6E2\nX\x3X\x3X\x5"+
		"X\x6E6\nX\x3X\x3X\x3X\x5X\x6EB\nX\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x5Z\x6F3\nZ"+
		"\x5Z\x6F5\nZ\x3[\x3[\x3\\\x3\\\x3\\\x3\\\x3]\x3]\x3]\x3]\x5]\x701\n]\x3"+
		"]\x3]\x5]\x705\n]\x3]\x3]\x3^\x3^\x3^\x3^\x5^\x70D\n^\x3^\x3^\x5^\x711"+
		"\n^\x3^\x3^\x3_\x3_\x3_\x3_\x5_\x719\n_\x3_\x3_\x5_\x71D\n_\x3_\x3_\x5"+
		"_\x721\n_\x3_\x3_\x5_\x725\n_\x3_\x3_\x5_\x729\n_\x3_\x3_\x5_\x72D\n_"+
		"\x3_\x3_\x3`\x3`\x3`\x3`\x5`\x735\n`\x3`\x3`\x5`\x739\n`\x3`\x3`\x3\x61"+
		"\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x6\x61\x743\n\x61\r\x61\xE\x61\x744"+
		"\x3\x61\a\x61\x748\n\x61\f\x61\xE\x61\x74B\v\x61\x3\x61\x5\x61\x74E\n"+
		"\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x3\x62\x5\x62\x756\n\x62\x3\x62"+
		"\x5\x62\x759\n\x62\x3\x62\a\x62\x75C\n\x62\f\x62\xE\x62\x75F\v\x62\x3"+
		"\x62\x6\x62\x762\n\x62\r\x62\xE\x62\x763\x5\x62\x766\n\x62\x3\x62\x3\x62"+
		"\x6\x62\x76A\n\x62\r\x62\xE\x62\x76B\x5\x62\x76E\n\x62\x3\x63\x3\x63\x3"+
		"\x63\x5\x63\x773\n\x63\x3\x63\x3\x63\x5\x63\x777\n\x63\x3\x63\a\x63\x77A"+
		"\n\x63\f\x63\xE\x63\x77D\v\x63\x5\x63\x77F\n\x63\x3\x64\x3\x64\x5\x64"+
		"\x783\n\x64\x3\x64\x3\x64\x5\x64\x787\n\x64\x3\x64\x3\x64\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x792\n\x64\x3\x65\x3\x65\x3"+
		"\x65\x3\x65\x5\x65\x798\n\x65\x3\x65\x3\x65\x5\x65\x79C\n\x65\x3\x65\x5"+
		"\x65\x79F\n\x65\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\x7A5\n\x66\x3\x66\x3"+
		"\x66\x5\x66\x7A9\n\x66\x3\x66\x3\x66\x3g\x3g\x3g\x3g\x5g\x7B1\ng\x3g\x3"+
		"g\x5g\x7B5\ng\x3g\x3g\x3h\x3h\x3i\x3i\x3i\x5i\x7BE\ni\x3i\x3i\x5i\x7C2"+
		"\ni\x3i\x3i\x3i\x3i\x5i\x7C8\ni\x3i\x5i\x7CB\ni\x3i\x6i\x7CE\ni\ri\xE"+
		"i\x7CF\x3i\x3i\x6i\x7D4\ni\ri\xEi\x7D5\x5i\x7D8\ni\x3i\x3i\x3j\x3j\x5"+
		"j\x7DE\nj\x3j\x3j\x5j\x7E2\nj\x3j\x3j\x3k\x3k\x3k\x5k\x7E9\nk\x3k\x3k"+
		"\x3k\x3k\x6k\x7EF\nk\rk\xEk\x7F0\x3k\ak\x7F4\nk\fk\xEk\x7F7\vk\x3k\x3"+
		"k\x3l\x3l\x5l\x7FD\nl\x3l\x3l\x5l\x801\nl\x3l\x5l\x804\nl\x3l\x5l\x807"+
		"\nl\x3l\x5l\x80A\nl\x3l\x3l\x5l\x80E\nl\x3l\x6l\x811\nl\rl\xEl\x812\x3"+
		"m\x3m\x3m\x3m\x3m\x3m\x3m\x5m\x81C\nm\x3n\x3n\x3n\x3n\x3o\x3o\x3o\x3o"+
		"\x5o\x826\no\x3o\x3o\x5o\x82A\no\x3o\x3o\x3o\x3o\x3o\x5o\x831\no\x5o\x833"+
		"\no\x3p\x3p\x3p\x3p\x3p\x5p\x83A\np\x3p\x3p\x5p\x83E\np\x3p\x3p\x5p\x842"+
		"\np\x3p\ap\x845\np\fp\xEp\x848\vp\x3p\x5p\x84B\np\x3p\x3p\x3p\x3p\x3p"+
		"\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x5p\x859\np\x3p\x3p\x5p\x85D\np\x3p\x3p\x3"+
		"p\x3p\x5p\x863\np\x3p\x3p\x3p\x5p\x868\np\x3p\x3p\x3p\x3p\x5p\x86E\np"+
		"\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x5p\x87C\np\x3p\x3p\x5"+
		"p\x880\np\x3p\x3p\x3p\x5p\x885\np\x3p\x3p\x5p\x889\np\x3p\x3p\x3p\x5p"+
		"\x88E\np\x3p\x3p\x5p\x892\np\x3p\x3p\x3p\x5p\x897\np\x3p\x3p\x5p\x89B"+
		"\np\x3p\x3p\x3p\x5p\x8A0\np\x3p\x3p\x5p\x8A4\np\x3p\x3p\x3p\x5p\x8A9\n"+
		"p\x3p\x3p\x5p\x8AD\np\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x5p\x8B7\np\x3p"+
		"\x3p\x5p\x8BB\np\x3p\x3p\x3p\x5p\x8C0\np\x3p\x3p\x5p\x8C4\np\x3p\x3p\x3"+
		"p\x5p\x8C9\np\x3p\x3p\x5p\x8CD\np\x3p\x3p\x3p\x5p\x8D2\np\x3p\x3p\x5p"+
		"\x8D6\np\x3p\x3p\x3p\x5p\x8DB\np\x3p\x3p\x5p\x8DF\np\x3p\x3p\x3p\x5p\x8E4"+
		"\np\x3p\x3p\x5p\x8E8\np\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3"+
		"p\x3p\x5p\x8F7\np\x3p\x3p\x5p\x8FB\np\x3p\x3p\x3p\x5p\x900\np\x3p\x3p"+
		"\x5p\x904\np\x3p\x3p\x3p\x3p\x3p\x3p\ap\x90C\np\fp\xEp\x90F\vp\x3q\x3"+
		"q\x3q\x5q\x914\nq\x3q\x3q\x3q\x5q\x919\nq\x3q\x3q\x3r\x3r\x5r\x91F\nr"+
		"\x3r\x3r\x5r\x923\nr\x3r\ar\x926\nr\fr\xEr\x929\vr\x3s\x3s\x5s\x92D\n"+
		"s\x3s\x3s\x5s\x931\ns\x3s\x3s\x5s\x935\ns\x5s\x937\ns\x3s\x3s\x5s\x93B"+
		"\ns\x5s\x93D\ns\x3s\x5s\x940\ns\x3s\x3s\x5s\x944\ns\x3t\x3t\x3t\x3t\x6"+
		"t\x94A\nt\rt\xEt\x94B\x3t\at\x94F\nt\ft\xEt\x952\vt\x3t\at\x955\nt\ft"+
		"\xEt\x958\vt\x3t\x3t\x3u\x3u\x3u\x3u\x5u\x960\nu\x3u\x3u\x5u\x964\nu\x3"+
		"u\x3u\x3v\x3v\x3v\x3v\x6v\x96C\nv\rv\xEv\x96D\x3v\x3v\x6v\x972\nv\rv\xE"+
		"v\x973\x5v\x976\nv\x3v\x3v\x3w\x3w\x3w\x3w\x5w\x97E\nw\x3w\x3w\x5w\x982"+
		"\nw\x3w\x5w\x985\nw\x3x\x3x\x5x\x989\nx\x3y\x3y\x3y\x3y\x5y\x98F\ny\x3"+
		"y\x5y\x992\ny\x3y\x3y\x5y\x996\ny\x3y\x3y\x5y\x99A\ny\x3y\x3y\x5y\x99E"+
		"\ny\x3z\x3z\x3z\x5z\x9A3\nz\x3z\x3z\x5z\x9A7\nz\x3z\x3z\x5z\x9AB\nz\x3"+
		"z\x5z\x9AE\nz\x3z\x3z\x5z\x9B2\nz\x3z\x3z\x5z\x9B6\nz\x3z\x3z\x5z\x9BA"+
		"\nz\x3{\x3{\x5{\x9BE\n{\x3|\x3|\x3|\x5|\x9C3\n|\x3}\x5}\x9C6\n}\x3}\x3"+
		"}\x3}\x5}\x9CB\n}\x3}\x3}\x5}\x9CF\n}\x3}\x5}\x9D2\n}\x3~\x3~\x3~\x3~"+
		"\x5~\x9D8\n~\x3\x7F\x3\x7F\x5\x7F\x9DC\n\x7F\x3\x7F\x5\x7F\x9DF\n\x7F"+
		"\x3\x80\x3\x80\x3\x80\x5\x80\x9E4\n\x80\x3\x80\x5\x80\x9E7\n\x80\x3\x80"+
		"\x5\x80\x9EA\n\x80\x3\x80\x3\x80\x5\x80\x9EE\n\x80\x3\x80\x3\x80\x5\x80"+
		"\x9F2\n\x80\x5\x80\x9F4\n\x80\x3\x80\x3\x80\x5\x80\x9F8\n\x80\x3\x81\x3"+
		"\x81\x5\x81\x9FC\n\x81\x3\x81\x5\x81\x9FF\n\x81\x3\x81\x3\x81\x5\x81\xA03"+
		"\n\x81\x3\x81\x3\x81\x5\x81\xA07\n\x81\x5\x81\xA09\n\x81\x3\x81\x3\x81"+
		"\x3\x82\x3\x82\x5\x82\xA0F\n\x82\x3\x82\x6\x82\xA12\n\x82\r\x82\xE\x82"+
		"\xA13\x3\x82\x5\x82\xA17\n\x82\x3\x83\x5\x83\xA1A\n\x83\x3\x83\x3\x83"+
		"\x3\x83\x5\x83\xA1F\n\x83\x3\x84\x3\x84\x3\x85\x5\x85\xA24\n\x85\x3\x85"+
		"\x5\x85\xA27\n\x85\x3\x85\x3\x85\x5\x85\xA2B\n\x85\a\x85\xA2D\n\x85\f"+
		"\x85\xE\x85\xA30\v\x85\x3\x85\x3\x85\x5\x85\xA34\n\x85\x3\x85\x3\x85\x5"+
		"\x85\xA38\n\x85\x3\x85\x5\x85\xA3B\n\x85\a\x85\xA3D\n\x85\f\x85\xE\x85"+
		"\xA40\v\x85\x3\x86\x3\x86\x5\x86\xA44\n\x86\x3\x86\x3\x86\x3\x87\x3\x87"+
		"\x3\x87\x5\x87\xA4B\n\x87\x3\x88\x3\x88\x5\x88\xA4F\n\x88\x3\x88\x3\x88"+
		"\x5\x88\xA53\n\x88\x3\x88\x3\x88\x5\x88\xA57\n\x88\x3\x88\a\x88\xA5A\n"+
		"\x88\f\x88\xE\x88\xA5D\v\x88\x5\x88\xA5F\n\x88\x3\x88\x5\x88\xA62\n\x88"+
		"\x3\x88\x3\x88\x3\x89\x3\x89\x5\x89\xA68\n\x89\x3\x89\x3\x89\x5\x89\xA6C"+
		"\n\x89\x3\x89\x3\x89\x5\x89\xA70\n\x89\x3\x89\x3\x89\x5\x89\xA74\n\x89"+
		"\x3\x89\x5\x89\xA77\n\x89\x3\x89\x3\x89\x5\x89\xA7B\n\x89\x3\x89\x5\x89"+
		"\xA7E\n\x89\x3\x89\x3\x89\x5\x89\xA82\n\x89\x3\x89\x5\x89\xA85\n\x89\x3"+
		"\x89\x5\x89\xA88\n\x89\x3\x8A\x3\x8A\x5\x8A\xA8C\n\x8A\x3\x8A\x3\x8A\x5"+
		"\x8A\xA90\n\x8A\x3\x8B\x3\x8B\x5\x8B\xA94\n\x8B\x3\x8B\x3\x8B\x5\x8B\xA98"+
		"\n\x8B\x3\x8B\a\x8B\xA9B\n\x8B\f\x8B\xE\x8B\xA9E\v\x8B\x3\x8C\x3\x8C\x3"+
		"\x8C\x3\x8C\x3\x8C\x5\x8C\xAA5\n\x8C\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x6\x8D"+
		"\xAAB\n\x8D\r\x8D\xE\x8D\xAAC\x3\x8D\x3\x8D\x3\x8D\x6\x8D\xAB2\n\x8D\r"+
		"\x8D\xE\x8D\xAB3\x3\x8D\x5\x8D\xAB7\n\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E"+
		"\x5\x8E\xABD\n\x8E\x3\x8E\x3\x8E\x3\x8E\x5\x8E\xAC2\n\x8E\x3\x8F\x3\x8F"+
		"\x3\x90\x3\x90\x3\x90\a\x90\xAC9\n\x90\f\x90\xE\x90\xACC\v\x90\x3\x90"+
		"\x3\x90\x3\x90\x6\x90\xAD1\n\x90\r\x90\xE\x90\xAD2\x5\x90\xAD5\n\x90\x3"+
		"\x91\x3\x91\x3\x92\x3\x92\x3\x92\a\x92\xADC\n\x92\f\x92\xE\x92\xADF\v"+
		"\x92\x3\x93\x3\x93\x5\x93\xAE3\n\x93\x3\x93\x3\x93\x5\x93\xAE7\n\x93\x3"+
		"\x94\x3\x94\x5\x94\xAEB\n\x94\x3\x94\x3\x94\x5\x94\xAEF\n\x94\x3\x94\x5"+
		"\x94\xAF2\n\x94\x3\x95\x3\x95\x3\x95\x3\x96\x3\x96\x3\x97\x3\x97\x3\x98"+
		"\x3\x98\x3\x99\x3\x99\x5\x99\xAFF\n\x99\x3\x99\x5\x99\xB02\n\x99\x3\x99"+
		"\x3\x99\x5\x99\xB06\n\x99\x3\x99\x5\x99\xB09\n\x99\x3\x9A\x3\x9A\x3\x9B"+
		"\x3\x9B\x3\x9C\x3\x9C\x3\x9C\x2\x2\x3\xDE\x9D\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:"+
		"\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X"+
		"\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2"+
		"\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2"+
		"\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2"+
		"\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2"+
		"\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2"+
		"\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104"+
		"\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128"+
		"\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x2\x17\x4"+
		"\x2\xE\xE\xA1\xA1\x3\x2\x1D(\x4\x2\xAA\xAA\xAE\xAE\x3\x2?\x43\x5\x2\xBC"+
		"\xBC\xC6\xC6\xCB\xCB\x3\x2rs\a\x2\t\t\xE\xEQQ{{\x85\x85\x4\x2\x88\x89"+
		"\xB2\xB2\x4\x2^`\x98\x98\x4\x2\xB8\xB8\xCF\xCF\x4\x2\x9A\x9A\xA0\xA0\x4"+
		"\x2\x10\x11||\x3\x2\x10\x11\r\x2\xF\xF\x12\x12\x19\x19\x1B\x1B,,SSWWp"+
		"p\x99\x99\x9E\x9E\xAB\xAB\t\x2RR\\\\\xBC\xBC\xBE\xBF\xC1\xC1\xC4\xC4\xC8"+
		"\xC8\x6\x2\x44\x44no\xA5\xA5\xD2\xD8\x4\x2\x7F\x7F\x83\x83\x5\x2JJ\x7F"+
		"\x7F\x83\x83\b\x2\xB4\xB4\xB6\xB6\xBA\xBA\xBD\xBD\xC0\xC0\xC9\xC9\x6\x2"+
		"\x46\x46JJ\x7F\x7F\x83\x83\r\x2\x3\f\xE/\x38\x38:>\x44\\\x61\x61\x66q"+
		"tuz\x7F\x83\x88\x8A\xB3\xCC9\x2\x138\x3\x2\x2\x2\x4\x13C\x3\x2\x2\x2\x6"+
		"\x186\x3\x2\x2\x2\b\x18A\x3\x2\x2\x2\n\x19E\x3\x2\x2\x2\f\x1A0\x3\x2\x2"+
		"\x2\xE\x1A2\x3\x2\x2\x2\x10\x1A9\x3\x2\x2\x2\x12\x1BA\x3\x2\x2\x2\x14"+
		"\x1CB\x3\x2\x2\x2\x16\x1D5\x3\x2\x2\x2\x18\x1E1\x3\x2\x2\x2\x1A\x1E3\x3"+
		"\x2\x2\x2\x1C\x1FB\x3\x2\x2\x2\x1E\x1FE\x3\x2\x2\x2 \x21C\x3\x2\x2\x2"+
		"\"\x21F\x3\x2\x2\x2$\x234\x3\x2\x2\x2&\x239\x3\x2\x2\x2(\x245\x3\x2\x2"+
		"\x2*\x265\x3\x2\x2\x2,\x267\x3\x2\x2\x2.\x269\x3\x2\x2\x2\x30\x26B\x3"+
		"\x2\x2\x2\x32\x283\x3\x2\x2\x2\x34\x2D5\x3\x2\x2\x2\x36\x2D7\x3\x2\x2"+
		"\x2\x38\x2E4\x3\x2\x2\x2:\x2E6\x3\x2\x2\x2<\x2EA\x3\x2\x2\x2>\x2EE\x3"+
		"\x2\x2\x2@\x303\x3\x2\x2\x2\x42\x315\x3\x2\x2\x2\x44\x326\x3\x2\x2\x2"+
		"\x46\x333\x3\x2\x2\x2H\x357\x3\x2\x2\x2J\x367\x3\x2\x2\x2L\x3B1\x3\x2"+
		"\x2\x2N\x3B3\x3\x2\x2\x2P\x3B8\x3\x2\x2\x2R\x3CA\x3\x2\x2\x2T\x3DA\x3"+
		"\x2\x2\x2V\x3EA\x3\x2\x2\x2X\x3F1\x3\x2\x2\x2Z\x3FB\x3\x2\x2\x2\\\x3FD"+
		"\x3\x2\x2\x2^\x409\x3\x2\x2\x2`\x427\x3\x2\x2\x2\x62\x45B\x3\x2\x2\x2"+
		"\x64\x47D\x3\x2\x2\x2\x66\x493\x3\x2\x2\x2h\x497\x3\x2\x2\x2j\x4B4\x3"+
		"\x2\x2\x2l\x4B6\x3\x2\x2\x2n\x4C8\x3\x2\x2\x2p\x4CA\x3\x2\x2\x2r\x4DC"+
		"\x3\x2\x2\x2t\x4EA\x3\x2\x2\x2v\x4EE\x3\x2\x2\x2x\x4FD\x3\x2\x2\x2z\x503"+
		"\x3\x2\x2\x2|\x50F\x3\x2\x2\x2~\x51B\x3\x2\x2\x2\x80\x51F\x3\x2\x2\x2"+
		"\x82\x532\x3\x2\x2\x2\x84\x53E\x3\x2\x2\x2\x86\x54A\x3\x2\x2\x2\x88\x55C"+
		"\x3\x2\x2\x2\x8A\x56E\x3\x2\x2\x2\x8C\x57C\x3\x2\x2\x2\x8E\x58A\x3\x2"+
		"\x2\x2\x90\x58E\x3\x2\x2\x2\x92\x596\x3\x2\x2\x2\x94\x5A3\x3\x2\x2\x2"+
		"\x96\x5B7\x3\x2\x2\x2\x98\x5CB\x3\x2\x2\x2\x9A\x60D\x3\x2\x2\x2\x9C\x620"+
		"\x3\x2\x2\x2\x9E\x622\x3\x2\x2\x2\xA0\x632\x3\x2\x2\x2\xA2\x65A\x3\x2"+
		"\x2\x2\xA4\x67B\x3\x2\x2\x2\xA6\x699\x3\x2\x2\x2\xA8\x6AF\x3\x2\x2\x2"+
		"\xAA\x6C2\x3\x2\x2\x2\xAC\x6C7\x3\x2\x2\x2\xAE\x6DB\x3\x2\x2\x2\xB0\x6EC"+
		"\x3\x2\x2\x2\xB2\x6EE\x3\x2\x2\x2\xB4\x6F6\x3\x2\x2\x2\xB6\x6F8\x3\x2"+
		"\x2\x2\xB8\x6FC\x3\x2\x2\x2\xBA\x708\x3\x2\x2\x2\xBC\x714\x3\x2\x2\x2"+
		"\xBE\x730\x3\x2\x2\x2\xC0\x73C\x3\x2\x2\x2\xC2\x751\x3\x2\x2\x2\xC4\x77E"+
		"\x3\x2\x2\x2\xC6\x791\x3\x2\x2\x2\xC8\x793\x3\x2\x2\x2\xCA\x7A0\x3\x2"+
		"\x2\x2\xCC\x7AC\x3\x2\x2\x2\xCE\x7B8\x3\x2\x2\x2\xD0\x7BD\x3\x2\x2\x2"+
		"\xD2\x7DB\x3\x2\x2\x2\xD4\x7E8\x3\x2\x2\x2\xD6\x7FA\x3\x2\x2\x2\xD8\x814"+
		"\x3\x2\x2\x2\xDA\x81D\x3\x2\x2\x2\xDC\x821\x3\x2\x2\x2\xDE\x86D\x3\x2"+
		"\x2\x2\xE0\x913\x3\x2\x2\x2\xE2\x91C\x3\x2\x2\x2\xE4\x92A\x3\x2\x2\x2"+
		"\xE6\x945\x3\x2\x2\x2\xE8\x95B\x3\x2\x2\x2\xEA\x967\x3\x2\x2\x2\xEC\x979"+
		"\x3\x2\x2\x2\xEE\x988\x3\x2\x2\x2\xF0\x98A\x3\x2\x2\x2\xF2\x99F\x3\x2"+
		"\x2\x2\xF4\x9BD\x3\x2\x2\x2\xF6\x9BF\x3\x2\x2\x2\xF8\x9C5\x3\x2\x2\x2"+
		"\xFA\x9D7\x3\x2\x2\x2\xFC\x9D9\x3\x2\x2\x2\xFE\x9E3\x3\x2\x2\x2\x100\x9F9"+
		"\x3\x2\x2\x2\x102\xA0E\x3\x2\x2\x2\x104\xA19\x3\x2\x2\x2\x106\xA20\x3"+
		"\x2\x2\x2\x108\xA2E\x3\x2\x2\x2\x10A\xA43\x3\x2\x2\x2\x10C\xA47\x3\x2"+
		"\x2\x2\x10E\xA4C\x3\x2\x2\x2\x110\xA67\x3\x2\x2\x2\x112\xA89\x3\x2\x2"+
		"\x2\x114\xA91\x3\x2\x2\x2\x116\xAA4\x3\x2\x2\x2\x118\xAB6\x3\x2\x2\x2"+
		"\x11A\xAB8\x3\x2\x2\x2\x11C\xAC3\x3\x2\x2\x2\x11E\xAD4\x3\x2\x2\x2\x120"+
		"\xAD6\x3\x2\x2\x2\x122\xAD8\x3\x2\x2\x2\x124\xAE0\x3\x2\x2\x2\x126\xAE8"+
		"\x3\x2\x2\x2\x128\xAF3\x3\x2\x2\x2\x12A\xAF6\x3\x2\x2\x2\x12C\xAF8\x3"+
		"\x2\x2\x2\x12E\xAFA\x3\x2\x2\x2\x130\xAFE\x3\x2\x2\x2\x132\xB0A\x3\x2"+
		"\x2\x2\x134\xB0C\x3\x2\x2\x2\x136\xB0E\x3\x2\x2\x2\x138\x139\x5\x4\x3"+
		"\x2\x139\x13A\a\x2\x2\x3\x13A\x3\x3\x2\x2\x2\x13B\x13D\a\xDF\x2\x2\x13C"+
		"\x13B\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x141\x3\x2\x2\x2\x13E\x140"+
		"\a\xDD\x2\x2\x13F\x13E\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F\x3"+
		"\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x14A\x3\x2\x2\x2\x143\x141\x3\x2"+
		"\x2\x2\x144\x146\x5\xE\b\x2\x145\x147\a\xDD\x2\x2\x146\x145\x3\x2\x2\x2"+
		"\x147\x148\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149"+
		"\x14B\x3\x2\x2\x2\x14A\x144\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x14D"+
		"\x3\x2\x2\x2\x14C\x14E\x5\x6\x4\x2\x14D\x14C\x3\x2\x2\x2\x14D\x14E\x3"+
		"\x2\x2\x2\x14E\x152\x3\x2\x2\x2\x14F\x151\a\xDD\x2\x2\x150\x14F\x3\x2"+
		"\x2\x2\x151\x154\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x152\x153\x3\x2\x2"+
		"\x2\x153\x156\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x155\x157\x5\x1E\x10\x2"+
		"\x156\x155\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x15B\x3\x2\x2\x2\x158"+
		"\x15A\a\xDD\x2\x2\x159\x158\x3\x2\x2\x2\x15A\x15D\x3\x2\x2\x2\x15B\x159"+
		"\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15F\x3\x2\x2\x2\x15D\x15B\x3"+
		"\x2\x2\x2\x15E\x160\x5\x10\t\x2\x15F\x15E\x3\x2\x2\x2\x15F\x160\x3\x2"+
		"\x2\x2\x160\x164\x3\x2\x2\x2\x161\x163\a\xDD\x2\x2\x162\x161\x3\x2\x2"+
		"\x2\x163\x166\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2"+
		"\x165\x168\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x167\x169\x5\x14\v\x2\x168"+
		"\x167\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16D\x3\x2\x2\x2\x16A\x16C"+
		"\a\xDD\x2\x2\x16B\x16A\x3\x2\x2\x2\x16C\x16F\x3\x2\x2\x2\x16D\x16B\x3"+
		"\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x171\x3\x2\x2\x2\x16F\x16D\x3\x2"+
		"\x2\x2\x170\x172\x5\x16\f\x2\x171\x170\x3\x2\x2\x2\x171\x172\x3\x2\x2"+
		"\x2\x172\x176\x3\x2\x2\x2\x173\x175\a\xDD\x2\x2\x174\x173\x3\x2\x2\x2"+
		"\x175\x178\x3\x2\x2\x2\x176\x174\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177"+
		"\x17A\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x179\x17B\x5\x1A\xE\x2\x17A\x179"+
		"\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17F\x3\x2\x2\x2\x17C\x17E\a\xDD"+
		"\x2\x2\x17D\x17C\x3\x2\x2\x2\x17E\x181\x3\x2\x2\x2\x17F\x17D\x3\x2\x2"+
		"\x2\x17F\x180\x3\x2\x2\x2\x180\x183\x3\x2\x2\x2\x181\x17F\x3\x2\x2\x2"+
		"\x182\x184\a\xDF\x2\x2\x183\x182\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184"+
		"\x5\x3\x2\x2\x2\x185\x187\x5\b\x5\x2\x186\x185\x3\x2\x2\x2\x187\x188\x3"+
		"\x2\x2\x2\x188\x186\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189\a\x3\x2\x2"+
		"\x2\x18A\x18C\ap\x2\x2\x18B\x18D\a\xDF\x2\x2\x18C\x18B\x3\x2\x2\x2\x18C"+
		"\x18D\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18E\x190\a\xBC\x2\x2\x18F\x191"+
		"\a\xDF\x2\x2\x190\x18F\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191\x192\x3"+
		"\x2\x2\x2\x192\x193\x5\n\x6\x2\x193\x195\a\xCF\x2\x2\x194\x196\a\xDF\x2"+
		"\x2\x195\x194\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2"+
		"\x197\x19B\x5\f\a\x2\x198\x19A\a\xDD\x2\x2\x199\x198\x3\x2\x2\x2\x19A"+
		"\x19D\x3\x2\x2\x2\x19B\x199\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19C\t\x3"+
		"\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19E\x19F\a\xD2\x2\x2\x19F\v\x3\x2\x2"+
		"\x2\x1A0\x1A1\a\xD2\x2\x2\x1A1\r\x3\x2\x2\x2\x1A2\x1A3\a\xAC\x2\x2\x1A3"+
		"\x1A4\a\xDF\x2\x2\x1A4\x1A7\a\xD6\x2\x2\x1A5\x1A6\a\xDF\x2\x2\x1A6\x1A8"+
		"\a\x17\x2\x2\x1A7\x1A5\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\xF\x3\x2"+
		"\x2\x2\x1A9\x1AB\a\f\x2\x2\x1AA\x1AC\a\xDD\x2\x2\x1AB\x1AA\x3\x2\x2\x2"+
		"\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AB\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE"+
		"\x1B0\x3\x2\x2\x2\x1AF\x1B1\x5\x12\n\x2\x1B0\x1AF\x3\x2\x2\x2\x1B1\x1B2"+
		"\x3\x2\x2\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x1B4\x3"+
		"\x2\x2\x2\x1B4\x1B6\a\x38\x2\x2\x1B5\x1B7\a\xDD\x2\x2\x1B6\x1B5\x3\x2"+
		"\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8\x1B6\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2"+
		"\x2\x1B9\x11\x3\x2\x2\x2\x1BA\x1BC\x5\x118\x8D\x2\x1BB\x1BD\a\xDF\x2\x2"+
		"\x1BC\x1BB\x3\x2\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE"+
		"\x1C0\a\xBC\x2\x2\x1BF\x1C1\a\xDF\x2\x2\x1C0\x1BF\x3\x2\x2\x2\x1C0\x1C1"+
		"\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C3\x5\x12A\x96\x2\x1C3\x1C4"+
		"\a\xDD\x2\x2\x1C4\x13\x3\x2\x2\x2\x1C5\x1C7\x5\x30\x19\x2\x1C6\x1C8\a"+
		"\xDD\x2\x2\x1C7\x1C6\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1C7\x3\x2"+
		"\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CC\x3\x2\x2\x2\x1CB\x1C5\x3\x2\x2"+
		"\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CB\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2"+
		"\x1CE\x15\x3\x2\x2\x2\x1CF\x1D1\x5\x18\r\x2\x1D0\x1D2\a\xDD\x2\x2\x1D1"+
		"\x1D0\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D3\x1D4"+
		"\x3\x2\x2\x2\x1D4\x1D6\x3\x2\x2\x2\x1D5\x1CF\x3\x2\x2\x2\x1D6\x1D7\x3"+
		"\x2\x2\x2\x1D7\x1D5\x3\x2\x2\x2\x1D7\x1D8\x3\x2\x2\x2\x1D8\x17\x3\x2\x2"+
		"\x2\x1D9\x1DA\av\x2\x2\x1DA\x1DB\a\xDF\x2\x2\x1DB\x1E2\a\xD5\x2\x2\x1DC"+
		"\x1DD\ax\x2\x2\x1DD\x1DE\a\xDF\x2\x2\x1DE\x1E2\t\x2\x2\x2\x1DF\x1E2\a"+
		"w\x2\x2\x1E0\x1E2\ay\x2\x2\x1E1\x1D9\x3\x2\x2\x2\x1E1\x1DC\x3\x2\x2\x2"+
		"\x1E1\x1DF\x3\x2\x2\x2\x1E1\x1E0\x3\x2\x2\x2\x1E2\x19\x3\x2\x2\x2\x1E3"+
		"\x1EC\x5\x1C\xF\x2\x1E4\x1E6\a\xDD\x2\x2\x1E5\x1E4\x3\x2\x2\x2\x1E6\x1E7"+
		"\x3\x2\x2\x2\x1E7\x1E5\x3\x2\x2\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1E9\x3"+
		"\x2\x2\x2\x1E9\x1EB\x5\x1C\xF\x2\x1EA\x1E5\x3\x2\x2\x2\x1EB\x1EE\x3\x2"+
		"\x2\x2\x1EC\x1EA\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1B\x3\x2\x2\x2"+
		"\x1EE\x1EC\x3\x2\x2\x2\x1EF\x1FC\x5.\x18\x2\x1F0\x1FC\x5\x18\r\x2\x1F1"+
		"\x1FC\x5\x46$\x2\x1F2\x1FC\x5P)\x2\x1F3\x1FC\x5X-\x2\x1F4\x1FC\x5\x62"+
		"\x32\x2\x1F5\x1FC\x5\x84\x43\x2\x1F6\x1FC\x5\xA0Q\x2\x1F7\x1FC\x5\xA2"+
		"R\x2\x1F8\x1FC\x5\xA4S\x2\x1F9\x1FC\x5\xD0i\x2\x1FA\x1FC\x5\xD4k\x2\x1FB"+
		"\x1EF\x3\x2\x2\x2\x1FB\x1F0\x3\x2\x2\x2\x1FB\x1F1\x3\x2\x2\x2\x1FB\x1F2"+
		"\x3\x2\x2\x2\x1FB\x1F3\x3\x2\x2\x2\x1FB\x1F4\x3\x2\x2\x2\x1FB\x1F5\x3"+
		"\x2\x2\x2\x1FB\x1F6\x3\x2\x2\x2\x1FB\x1F7\x3\x2\x2\x2\x1FB\x1F8\x3\x2"+
		"\x2\x2\x1FB\x1F9\x3\x2\x2\x2\x1FB\x1FA\x3\x2\x2\x2\x1FC\x1D\x3\x2\x2\x2"+
		"\x1FD\x1FF\a\xDF\x2\x2\x1FE\x1FD\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF"+
		"\x200\x3\x2\x2\x2\x200\x201\a\f\x2\x2\x201\x202\a\xDF\x2\x2\x202\x203"+
		"\x5*\x16\x2\x203\x204\a\xDF\x2\x2\x204\x206\x5,\x17\x2\x205\x207\a\xDF"+
		"\x2\x2\x206\x205\x3\x2\x2\x2\x206\x207\x3\x2\x2\x2\x207\x209\x3\x2\x2"+
		"\x2\x208\x20A\a\xDD\x2\x2\x209\x208\x3\x2\x2\x2\x20A\x20B\x3\x2\x2\x2"+
		"\x20B\x209\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20E\x3\x2\x2\x2\x20D"+
		"\x20F\x5 \x11\x2\x20E\x20D\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x20E"+
		"\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x212\x3\x2\x2\x2\x212\x216\a\x38"+
		"\x2\x2\x213\x215\a\xDD\x2\x2\x214\x213\x3\x2\x2\x2\x215\x218\x3\x2\x2"+
		"\x2\x216\x214\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2\x217\x1F\x3\x2\x2\x2\x218"+
		"\x216\x3\x2\x2\x2\x219\x21D\x5\"\x12\x2\x21A\x21D\x5(\x15\x2\x21B\x21D"+
		"\x5\x1E\x10\x2\x21C\x219\x3\x2\x2\x2\x21C\x21A\x3\x2\x2\x2\x21C\x21B\x3"+
		"\x2\x2\x2\x21D!\x3\x2\x2\x2\x21E\x220\a\xDF\x2\x2\x21F\x21E\x3\x2\x2\x2"+
		"\x21F\x220\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2\x221\x223\x5$\x13\x2\x222"+
		"\x224\a\xDF\x2\x2\x223\x222\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224\x225"+
		"\x3\x2\x2\x2\x225\x227\a\xBC\x2\x2\x226\x228\a\xDF\x2\x2\x227\x226\x3"+
		"\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228\x229\x3\x2\x2\x2\x229\x22B\x5&\x14"+
		"\x2\x22A\x22C\a\xD9\x2\x2\x22B\x22A\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2"+
		"\x22C\x22E\x3\x2\x2\x2\x22D\x22F\a\xDD\x2\x2\x22E\x22D\x3\x2\x2\x2\x22F"+
		"\x230\x3\x2\x2\x2\x230\x22E\x3\x2\x2\x2\x230\x231\x3\x2\x2\x2\x231#\x3"+
		"\x2\x2\x2\x232\x233\ap\x2\x2\x233\x235\a\xBB\x2\x2\x234\x232\x3\x2\x2"+
		"\x2\x234\x235\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2\x236\x237\x5\x122\x92"+
		"\x2\x237%\x3\x2\x2\x2\x238\x23A\a\xBA\x2\x2\x239\x238\x3\x2\x2\x2\x239"+
		"\x23A\x3\x2\x2\x2\x23A\x242\x3\x2\x2\x2\x23B\x243\x5\x12A\x96\x2\x23C"+
		"\x23D\a\xC2\x2\x2\x23D\x23E\x5\x118\x8D\x2\x23E\x23F\a\xCD\x2\x2\x23F"+
		"\x243\x3\x2\x2\x2\x240\x241\a\xCC\x2\x2\x241\x243\x5\x118\x8D\x2\x242"+
		"\x23B\x3\x2\x2\x2\x242\x23C\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2\x243\'\x3"+
		"\x2\x2\x2\x244\x246\a\xDF\x2\x2\x245\x244\x3\x2\x2\x2\x245\x246\x3\x2"+
		"\x2\x2\x246\x247\x3\x2\x2\x2\x247\x248\a\r\x2\x2\x248\x249\a\xDF\x2\x2"+
		"\x249\x24D\x5\x118\x8D\x2\x24A\x24B\a\xC3\x2\x2\x24B\x24C\a\xD5\x2\x2"+
		"\x24C\x24E\a\xCE\x2\x2\x24D\x24A\x3\x2\x2\x2\x24D\x24E\x3\x2\x2\x2\x24E"+
		"\x251\x3\x2\x2\x2\x24F\x250\a\xDF\x2\x2\x250\x252\a\xDA\x2\x2\x251\x24F"+
		"\x3\x2\x2\x2\x251\x252\x3\x2\x2\x2\x252\x254\x3\x2\x2\x2\x253\x255\a\xDD"+
		"\x2\x2\x254\x253\x3\x2\x2\x2\x255\x256\x3\x2\x2\x2\x256\x254\x3\x2\x2"+
		"\x2\x256\x257\x3\x2\x2\x2\x257\x25D\x3\x2\x2\x2\x258\x25A\x5 \x11\x2\x259"+
		"\x258\x3\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B\x259\x3\x2\x2\x2\x25B\x25C"+
		"\x3\x2\x2\x2\x25C\x25E\x3\x2\x2\x2\x25D\x259\x3\x2\x2\x2\x25D\x25E\x3"+
		"\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x261\a\x39\x2\x2\x260\x262\a\xDD"+
		"\x2\x2\x261\x260\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x261\x3\x2\x2"+
		"\x2\x263\x264\x3\x2\x2\x2\x264)\x3\x2\x2\x2\x265\x266\x5\x122\x92\x2\x266"+
		"+\x3\x2\x2\x2\x267\x268\x5\x118\x8D\x2\x268-\x3\x2\x2\x2\x269\x26A\x5"+
		"\x32\x1A\x2\x26A/\x3\x2\x2\x2\x26B\x26C\a\a\x2\x2\x26C\x26D\a\xDF\x2\x2"+
		"\x26D\x26F\x5\xFA~\x2\x26E\x270\a\xDF\x2\x2\x26F\x26E\x3\x2\x2\x2\x26F"+
		"\x270\x3\x2\x2\x2\x270\x271\x3\x2\x2\x2\x271\x273\a\xBC\x2\x2\x272\x274"+
		"\a\xDF\x2\x2\x273\x272\x3\x2\x2\x2\x273\x274\x3\x2\x2\x2\x274\x275\x3"+
		"\x2\x2\x2\x275\x280\x5\x12A\x96\x2\x276\x278\a\xDF\x2\x2\x277\x276\x3"+
		"\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x27B\a\xB8"+
		"\x2\x2\x27A\x27C\a\xDF\x2\x2\x27B\x27A\x3\x2\x2\x2\x27B\x27C\x3\x2\x2"+
		"\x2\x27C\x27D\x3\x2\x2\x2\x27D\x27F\x5\x12A\x96\x2\x27E\x277\x3\x2\x2"+
		"\x2\x27F\x282\x3\x2\x2\x2\x280\x27E\x3\x2\x2\x2\x280\x281\x3\x2\x2\x2"+
		"\x281\x31\x3\x2\x2\x2\x282\x280\x3\x2\x2\x2\x283\x28F\x5\x34\x1B\x2\x284"+
		"\x286\a\xDD\x2\x2\x285\x284\x3\x2\x2\x2\x286\x287\x3\x2\x2\x2\x287\x285"+
		"\x3\x2\x2\x2\x287\x288\x3\x2\x2\x2\x288\x28A\x3\x2\x2\x2\x289\x28B\a\xDF"+
		"\x2\x2\x28A\x289\x3\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28B\x28C\x3\x2\x2"+
		"\x2\x28C\x28E\x5\x34\x1B\x2\x28D\x285\x3\x2\x2\x2\x28E\x291\x3\x2\x2\x2"+
		"\x28F\x28D\x3\x2\x2\x2\x28F\x290\x3\x2\x2\x2\x290\x33\x3\x2\x2\x2\x291"+
		"\x28F\x3\x2\x2\x2\x292\x2D6\x5\x36\x1C\x2\x293\x2D6\x5\x30\x19\x2\x294"+
		"\x2D6\x5\x38\x1D\x2\x295\x2D6\x5:\x1E\x2\x296\x2D6\x5<\x1F\x2\x297\x2D6"+
		"\x5> \x2\x298\x2D6\x5@!\x2\x299\x2D6\x5\x44#\x2\x29A\x2D6\x5J&\x2\x29B"+
		"\x2D6\x5H%\x2\x29C\x2D6\x5L\'\x2\x29D\x2D6\x5N(\x2\x29E\x2D6\x5T+\x2\x29F"+
		"\x2D6\x5V,\x2\x2A0\x2D6\x5Z.\x2\x2A1\x2D6\x5\xEEx\x2\x2A2\x2D6\x5\\/\x2"+
		"\x2A3\x2D6\x5^\x30\x2\x2A4\x2D6\x5`\x31\x2\x2A5\x2D6\x5\x64\x33\x2\x2A6"+
		"\x2D6\x5\x66\x34\x2\x2A7\x2D6\x5h\x35\x2\x2A8\x2D6\x5j\x36\x2\x2A9\x2D6"+
		"\x5t;\x2\x2AA\x2D6\x5v<\x2\x2AB\x2D6\x5x=\x2\x2AC\x2D6\x5z>\x2\x2AD\x2D6"+
		"\x5|?\x2\x2AE\x2D6\x5\x128\x95\x2\x2AF\x2D6\x5~@\x2\x2B0\x2D6\x5\x80\x41"+
		"\x2\x2B1\x2D6\x5\x82\x42\x2\x2B2\x2D6\x5\x84\x43\x2\x2B3\x2D6\x5\x8CG"+
		"\x2\x2B4\x2D6\x5\x8EH\x2\x2B5\x2D6\x5\x90I\x2\x2B6\x2D6\x5\x92J\x2\x2B7"+
		"\x2D6\x5\x94K\x2\x2B8\x2D6\x5\x96L\x2\x2B9\x2D6\x5\x98M\x2\x2BA\x2D6\x5"+
		"\x9EP\x2\x2BB\x2D6\x5\xA6T\x2\x2BC\x2D6\x5\xA8U\x2\x2BD\x2D6\x5\xAAV\x2"+
		"\x2BE\x2D6\x5\xACW\x2\x2BF\x2D6\x5\xB0Y\x2\x2C0\x2D6\x5\xB2Z\x2\x2C1\x2D6"+
		"\x5\xB4[\x2\x2C2\x2D6\x5\xB6\\\x2\x2C3\x2D6\x5\xB8]\x2\x2C4\x2D6\x5\xBA"+
		"^\x2\x2C5\x2D6\x5\xBC_\x2\x2C6\x2D6\x5\xBE`\x2\x2C7\x2D6\x5\xC0\x61\x2"+
		"\x2C8\x2D6\x5\xC8\x65\x2\x2C9\x2D6\x5\xCA\x66\x2\x2CA\x2D6\x5\xCCg\x2"+
		"\x2CB\x2D6\x5\xCEh\x2\x2CC\x2D6\x5\xD2j\x2\x2CD\x2D6\x5\xDAn\x2\x2CE\x2D6"+
		"\x5\xDCo\x2\x2CF\x2D6\x5\xE0q\x2\x2D0\x2D6\x5\xE6t\x2\x2D1\x2D6\x5\xE8"+
		"u\x2\x2D2\x2D6\x5\xEAv\x2\x2D3\x2D6\x5\xECw\x2\x2D4\x2D6\x5\xF4{\x2\x2D5"+
		"\x292\x3\x2\x2\x2\x2D5\x293\x3\x2\x2\x2\x2D5\x294\x3\x2\x2\x2\x2D5\x295"+
		"\x3\x2\x2\x2\x2D5\x296\x3\x2\x2\x2\x2D5\x297\x3\x2\x2\x2\x2D5\x298\x3"+
		"\x2\x2\x2\x2D5\x299\x3\x2\x2\x2\x2D5\x29A\x3\x2\x2\x2\x2D5\x29B\x3\x2"+
		"\x2\x2\x2D5\x29C\x3\x2\x2\x2\x2D5\x29D\x3\x2\x2\x2\x2D5\x29E\x3\x2\x2"+
		"\x2\x2D5\x29F\x3\x2\x2\x2\x2D5\x2A0\x3\x2\x2\x2\x2D5\x2A1\x3\x2\x2\x2"+
		"\x2D5\x2A2\x3\x2\x2\x2\x2D5\x2A3\x3\x2\x2\x2\x2D5\x2A4\x3\x2\x2\x2\x2D5"+
		"\x2A5\x3\x2\x2\x2\x2D5\x2A6\x3\x2\x2\x2\x2D5\x2A7\x3\x2\x2\x2\x2D5\x2A8"+
		"\x3\x2\x2\x2\x2D5\x2A9\x3\x2\x2\x2\x2D5\x2AA\x3\x2\x2\x2\x2D5\x2AB\x3"+
		"\x2\x2\x2\x2D5\x2AC\x3\x2\x2\x2\x2D5\x2AD\x3\x2\x2\x2\x2D5\x2AE\x3\x2"+
		"\x2\x2\x2D5\x2AF\x3\x2\x2\x2\x2D5\x2B0\x3\x2\x2\x2\x2D5\x2B1\x3\x2\x2"+
		"\x2\x2D5\x2B2\x3\x2\x2\x2\x2D5\x2B3\x3\x2\x2\x2\x2D5\x2B4\x3\x2\x2\x2"+
		"\x2D5\x2B5\x3\x2\x2\x2\x2D5\x2B6\x3\x2\x2\x2\x2D5\x2B7\x3\x2\x2\x2\x2D5"+
		"\x2B8\x3\x2\x2\x2\x2D5\x2B9\x3\x2\x2\x2\x2D5\x2BA\x3\x2\x2\x2\x2D5\x2BB"+
		"\x3\x2\x2\x2\x2D5\x2BC\x3\x2\x2\x2\x2D5\x2BD\x3\x2\x2\x2\x2D5\x2BE\x3"+
		"\x2\x2\x2\x2D5\x2BF\x3\x2\x2\x2\x2D5\x2C0\x3\x2\x2\x2\x2D5\x2C1\x3\x2"+
		"\x2\x2\x2D5\x2C2\x3\x2\x2\x2\x2D5\x2C3\x3\x2\x2\x2\x2D5\x2C4\x3\x2\x2"+
		"\x2\x2D5\x2C5\x3\x2\x2\x2\x2D5\x2C6\x3\x2\x2\x2\x2D5\x2C7\x3\x2\x2\x2"+
		"\x2D5\x2C8\x3\x2\x2\x2\x2D5\x2C9\x3\x2\x2\x2\x2D5\x2CA\x3\x2\x2\x2\x2D5"+
		"\x2CB\x3\x2\x2\x2\x2D5\x2CC\x3\x2\x2\x2\x2D5\x2CD\x3\x2\x2\x2\x2D5\x2CE"+
		"\x3\x2\x2\x2\x2D5\x2CF\x3\x2\x2\x2\x2D5\x2D0\x3\x2\x2\x2\x2D5\x2D1\x3"+
		"\x2\x2\x2\x2D5\x2D2\x3\x2\x2\x2\x2D5\x2D3\x3\x2\x2\x2\x2D5\x2D4\x3\x2"+
		"\x2\x2\x2D6\x35\x3\x2\x2\x2\x2D7\x2D8\a\b\x2\x2\x2D8\x2D9\a\xDF\x2\x2"+
		"\x2D9\x2E2\x5\xDEp\x2\x2DA\x2DC\a\xDF\x2\x2\x2DB\x2DA\x3\x2\x2\x2\x2DB"+
		"\x2DC\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD\x2DF\a\xB8\x2\x2\x2DE\x2E0"+
		"\a\xDF\x2\x2\x2DF\x2DE\x3\x2\x2\x2\x2DF\x2E0\x3\x2\x2\x2\x2E0\x2E1\x3"+
		"\x2\x2\x2\x2E1\x2E3\x5\xDEp\x2\x2E2\x2DB\x3\x2\x2\x2\x2E2\x2E3\x3\x2\x2"+
		"\x2\x2E3\x37\x3\x2\x2\x2\x2E4\x2E5\a\v\x2\x2\x2E5\x39\x3\x2\x2\x2\x2E6"+
		"\x2E7\a\x15\x2\x2\x2E7\x2E8\a\xDF\x2\x2\x2E8\x2E9\x5\xDEp\x2\x2E9;\x3"+
		"\x2\x2\x2\x2EA\x2EB\a\x16\x2\x2\x2EB\x2EC\a\xDF\x2\x2\x2EC\x2ED\x5\xDE"+
		"p\x2\x2ED=\x3\x2\x2\x2\x2EE\x2FE\a\x18\x2\x2\x2EF\x2F0\a\xDF\x2\x2\x2F0"+
		"\x2FB\x5\xDEp\x2\x2F1\x2F3\a\xDF\x2\x2\x2F2\x2F1\x3\x2\x2\x2\x2F2\x2F3"+
		"\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2\x2\x2F4\x2F6\a\xB8\x2\x2\x2F5\x2F7\a\xDF"+
		"\x2\x2\x2F6\x2F5\x3\x2\x2\x2\x2F6\x2F7\x3\x2\x2\x2\x2F7\x2F8\x3\x2\x2"+
		"\x2\x2F8\x2FA\x5\xDEp\x2\x2F9\x2F2\x3\x2\x2\x2\x2FA\x2FD\x3\x2\x2\x2\x2FB"+
		"\x2F9\x3\x2\x2\x2\x2FB\x2FC\x3\x2\x2\x2\x2FC\x2FF\x3\x2\x2\x2\x2FD\x2FB"+
		"\x3\x2\x2\x2\x2FE\x2EF\x3\x2\x2\x2\x2FE\x2FF\x3\x2\x2\x2\x2FF?\x3\x2\x2"+
		"\x2\x300\x301\x5\x12E\x98\x2\x301\x302\a\xDF\x2\x2\x302\x304\x3\x2\x2"+
		"\x2\x303\x300\x3\x2\x2\x2\x303\x304\x3\x2\x2\x2\x304\x305\x3\x2\x2\x2"+
		"\x305\x306\a\x1A\x2\x2\x306\x307\a\xDF\x2\x2\x307\x312\x5\x42\"\x2\x308"+
		"\x30A\a\xDF\x2\x2\x309\x308\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A\x30B"+
		"\x3\x2\x2\x2\x30B\x30D\a\xB8\x2\x2\x30C\x30E\a\xDF\x2\x2\x30D\x30C\x3"+
		"\x2\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x30F\x3\x2\x2\x2\x30F\x311\x5\x42"+
		"\"\x2\x310\x309\x3\x2\x2\x2\x311\x314\x3\x2\x2\x2\x312\x310\x3\x2\x2\x2"+
		"\x312\x313\x3\x2\x2\x2\x313\x41\x3\x2\x2\x2\x314\x312\x3\x2\x2\x2\x315"+
		"\x317\x5\x118\x8D\x2\x316\x318\x5\x132\x9A\x2\x317\x316\x3\x2\x2\x2\x317"+
		"\x318\x3\x2\x2\x2\x318\x31B\x3\x2\x2\x2\x319\x31A\a\xDF\x2\x2\x31A\x31C"+
		"\x5\x11A\x8E\x2\x31B\x319\x3\x2\x2\x2\x31B\x31C\x3\x2\x2\x2\x31C\x31E"+
		"\x3\x2\x2\x2\x31D\x31F\a\xDF\x2\x2\x31E\x31D\x3\x2\x2\x2\x31E\x31F\x3"+
		"\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x322\a\xBC\x2\x2\x321\x323\a\xDF"+
		"\x2\x2\x322\x321\x3\x2\x2\x2\x322\x323\x3\x2\x2\x2\x323\x324\x3\x2\x2"+
		"\x2\x324\x325\x5\xDEp\x2\x325\x43\x3\x2\x2\x2\x326\x328\a\x1B\x2\x2\x327"+
		"\x329\a\xDF\x2\x2\x328\x327\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329\x32A"+
		"\x3\x2\x2\x2\x32A\x32C\a\xBC\x2\x2\x32B\x32D\a\xDF\x2\x2\x32C\x32B\x3"+
		"\x2\x2\x2\x32C\x32D\x3\x2\x2\x2\x32D\x32E\x3\x2\x2\x2\x32E\x32F\x5\xDE"+
		"p\x2\x32F\x45\x3\x2\x2\x2\x330\x331\x5\x134\x9B\x2\x331\x332\a\xDF\x2"+
		"\x2\x332\x334\x3\x2\x2\x2\x333\x330\x3\x2\x2\x2\x333\x334\x3\x2\x2\x2"+
		"\x334\x335\x3\x2\x2\x2\x335\x336\a\x1C\x2\x2\x336\x33C\a\xDF\x2\x2\x337"+
		"\x339\aH\x2\x2\x338\x33A\x5\x132\x9A\x2\x339\x338\x3\x2\x2\x2\x339\x33A"+
		"\x3\x2\x2\x2\x33A\x33D\x3\x2\x2\x2\x33B\x33D\a\x9F\x2\x2\x33C\x337\x3"+
		"\x2\x2\x2\x33C\x33B\x3\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x33F\a\xDF"+
		"\x2\x2\x33F\x341\x5\x118\x8D\x2\x340\x342\x5\x132\x9A\x2\x341\x340\x3"+
		"\x2\x2\x2\x341\x342\x3\x2\x2\x2\x342\x343\x3\x2\x2\x2\x343\x344\a\xDF"+
		"\x2\x2\x344\x345\a[\x2\x2\x345\x346\a\xDF\x2\x2\x346\x34B\a\xD2\x2\x2"+
		"\x347\x348\a\xDF\x2\x2\x348\x349\a\x5\x2\x2\x349\x34A\a\xDF\x2\x2\x34A"+
		"\x34C\a\xD2\x2\x2\x34B\x347\x3\x2\x2\x2\x34B\x34C\x3\x2\x2\x2\x34C\x351"+
		"\x3\x2\x2\x2\x34D\x34F\a\xDF\x2\x2\x34E\x34D\x3\x2\x2\x2\x34E\x34F\x3"+
		"\x2\x2\x2\x34F\x350\x3\x2\x2\x2\x350\x352\x5\x10E\x88\x2\x351\x34E\x3"+
		"\x2\x2\x2\x351\x352\x3\x2\x2\x2\x352\x355\x3\x2\x2\x2\x353\x354\a\xDF"+
		"\x2\x2\x354\x356\x5\x11A\x8E\x2\x355\x353\x3\x2\x2\x2\x355\x356\x3\x2"+
		"\x2\x2\x356G\x3\x2\x2\x2\x357\x358\t\x3\x2\x2\x358\x359\a\xDF\x2\x2\x359"+
		"\x364\x5\x126\x94\x2\x35A\x35C\a\xDF\x2\x2\x35B\x35A\x3\x2\x2\x2\x35B"+
		"\x35C\x3\x2\x2\x2\x35C\x35D\x3\x2\x2\x2\x35D\x35F\a\xB8\x2\x2\x35E\x360"+
		"\a\xDF\x2\x2\x35F\x35E\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360\x361\x3"+
		"\x2\x2\x2\x361\x363\x5\x126\x94\x2\x362\x35B\x3\x2\x2\x2\x363\x366\x3"+
		"\x2\x2\x2\x364\x362\x3\x2\x2\x2\x364\x365\x3\x2\x2\x2\x365I\x3\x2\x2\x2"+
		"\x366\x364\x3\x2\x2\x2\x367\x368\a)\x2\x2\x368\x369\a\xDF\x2\x2\x369\x36B"+
		"\x5\xDEp\x2\x36A\x36C\a\xDF\x2\x2\x36B\x36A\x3\x2\x2\x2\x36B\x36C\x3\x2"+
		"\x2\x2\x36C\x36D\x3\x2\x2\x2\x36D\x36F\a\xB8\x2\x2\x36E\x370\a\xDF\x2"+
		"\x2\x36F\x36E\x3\x2\x2\x2\x36F\x370\x3\x2\x2\x2\x370\x371\x3\x2\x2\x2"+
		"\x371\x37A\x5\xDEp\x2\x372\x374\a\xDF\x2\x2\x373\x372\x3\x2\x2\x2\x373"+
		"\x374\x3\x2\x2\x2\x374\x375\x3\x2\x2\x2\x375\x377\a\xB8\x2\x2\x376\x378"+
		"\a\xDF\x2\x2\x377\x376\x3\x2\x2\x2\x377\x378\x3\x2\x2\x2\x378\x379\x3"+
		"\x2\x2\x2\x379\x37B\x5\xDEp\x2\x37A\x373\x3\x2\x2\x2\x37A\x37B\x3\x2\x2"+
		"\x2\x37BK\x3\x2\x2\x2\x37C\x37E\a+\x2\x2\x37D\x37F\a\xDD\x2\x2\x37E\x37D"+
		"\x3\x2\x2\x2\x37F\x380\x3\x2\x2\x2\x380\x37E\x3\x2\x2\x2\x380\x381\x3"+
		"\x2\x2\x2\x381\x388\x3\x2\x2\x2\x382\x384\x5\x32\x1A\x2\x383\x385\a\xDD"+
		"\x2\x2\x384\x383\x3\x2\x2\x2\x385\x386\x3\x2\x2\x2\x386\x384\x3\x2\x2"+
		"\x2\x386\x387\x3\x2\x2\x2\x387\x389\x3\x2\x2\x2\x388\x382\x3\x2\x2\x2"+
		"\x388\x389\x3\x2\x2\x2\x389\x38A\x3\x2\x2\x2\x38A\x3B2\aX\x2\x2\x38B\x38C"+
		"\a+\x2\x2\x38C\x38D\a\xDF\x2\x2\x38D\x38E\t\x4\x2\x2\x38E\x38F\a\xDF\x2"+
		"\x2\x38F\x391\x5\xDEp\x2\x390\x392\a\xDD\x2\x2\x391\x390\x3\x2\x2\x2\x392"+
		"\x393\x3\x2\x2\x2\x393\x391\x3\x2\x2\x2\x393\x394\x3\x2\x2\x2\x394\x39B"+
		"\x3\x2\x2\x2\x395\x397\x5\x32\x1A\x2\x396\x398\a\xDD\x2\x2\x397\x396\x3"+
		"\x2\x2\x2\x398\x399\x3\x2\x2\x2\x399\x397\x3\x2\x2\x2\x399\x39A\x3\x2"+
		"\x2\x2\x39A\x39C\x3\x2\x2\x2\x39B\x395\x3\x2\x2\x2\x39B\x39C\x3\x2\x2"+
		"\x2\x39C\x39D\x3\x2\x2\x2\x39D\x39E\aX\x2\x2\x39E\x3B2\x3\x2\x2\x2\x39F"+
		"\x3A1\a+\x2\x2\x3A0\x3A2\a\xDD\x2\x2\x3A1\x3A0\x3\x2\x2\x2\x3A2\x3A3\x3"+
		"\x2\x2\x2\x3A3\x3A1\x3\x2\x2\x2\x3A3\x3A4\x3\x2\x2\x2\x3A4\x3A5\x3\x2"+
		"\x2\x2\x3A5\x3A7\x5\x32\x1A\x2\x3A6\x3A8\a\xDD\x2\x2\x3A7\x3A6\x3\x2\x2"+
		"\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9\x3A7\x3\x2\x2\x2\x3A9\x3AA\x3\x2\x2\x2"+
		"\x3AA\x3AB\x3\x2\x2\x2\x3AB\x3AC\aX\x2\x2\x3AC\x3AD\a\xDF\x2\x2\x3AD\x3AE"+
		"\t\x4\x2\x2\x3AE\x3AF\a\xDF\x2\x2\x3AF\x3B0\x5\xDEp\x2\x3B0\x3B2\x3\x2"+
		"\x2\x2\x3B1\x37C\x3\x2\x2\x2\x3B1\x38B\x3\x2\x2\x2\x3B1\x39F\x3\x2\x2"+
		"\x2\x3B2M\x3\x2\x2\x2\x3B3\x3B4\a\x38\x2\x2\x3B4O\x3\x2\x2\x2\x3B5\x3B6"+
		"\x5\x12C\x97\x2\x3B6\x3B7\a\xDF\x2\x2\x3B7\x3B9\x3\x2\x2\x2\x3B8\x3B5"+
		"\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BB\a:"+
		"\x2\x2\x3BB\x3BC\a\xDF\x2\x2\x3BC\x3BE\x5\x118\x8D\x2\x3BD\x3BF\a\xDD"+
		"\x2\x2\x3BE\x3BD\x3\x2\x2\x2\x3BF\x3C0\x3\x2\x2\x2\x3C0\x3BE\x3\x2\x2"+
		"\x2\x3C0\x3C1\x3\x2\x2\x2\x3C1\x3C5\x3\x2\x2\x2\x3C2\x3C4\x5R*\x2\x3C3"+
		"\x3C2\x3\x2\x2\x2\x3C4\x3C7\x3\x2\x2\x2\x3C5\x3C3\x3\x2\x2\x2\x3C5\x3C6"+
		"\x3\x2\x2\x2\x3C6\x3C8\x3\x2\x2\x2\x3C7\x3C5\x3\x2\x2\x2\x3C8\x3C9\a\x30"+
		"\x2\x2\x3C9Q\x3\x2\x2\x2\x3CA\x3D3\x5\x118\x8D\x2\x3CB\x3CD\a\xDF\x2\x2"+
		"\x3CC\x3CB\x3\x2\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD\x3CE\x3\x2\x2\x2\x3CE"+
		"\x3D0\a\xBC\x2\x2\x3CF\x3D1\a\xDF\x2\x2\x3D0\x3CF\x3\x2\x2\x2\x3D0\x3D1"+
		"\x3\x2\x2\x2\x3D1\x3D2\x3\x2\x2\x2\x3D2\x3D4\x5\xDEp\x2\x3D3\x3CC\x3\x2"+
		"\x2\x2\x3D3\x3D4\x3\x2\x2\x2\x3D4\x3D6\x3\x2\x2\x2\x3D5\x3D7\a\xDD\x2"+
		"\x2\x3D6\x3D5\x3\x2\x2\x2\x3D7\x3D8\x3\x2\x2\x2\x3D8\x3D6\x3\x2\x2\x2"+
		"\x3D8\x3D9\x3\x2\x2\x2\x3D9S\x3\x2\x2\x2\x3DA\x3DB\a<\x2\x2\x3DB\x3DC"+
		"\a\xDF\x2\x2\x3DC\x3E7\x5\xDEp\x2\x3DD\x3DF\a\xDF\x2\x2\x3DE\x3DD\x3\x2"+
		"\x2\x2\x3DE\x3DF\x3\x2\x2\x2\x3DF\x3E0\x3\x2\x2\x2\x3E0\x3E2\a\xB8\x2"+
		"\x2\x3E1\x3E3\a\xDF\x2\x2\x3E2\x3E1\x3\x2\x2\x2\x3E2\x3E3\x3\x2\x2\x2"+
		"\x3E3\x3E4\x3\x2\x2\x2\x3E4\x3E6\x5\xDEp\x2\x3E5\x3DE\x3\x2\x2\x2\x3E6"+
		"\x3E9\x3\x2\x2\x2\x3E7\x3E5\x3\x2\x2\x2\x3E7\x3E8\x3\x2\x2\x2\x3E8U\x3"+
		"\x2\x2\x2\x3E9\x3E7\x3\x2\x2\x2\x3EA\x3EB\a=\x2\x2\x3EB\x3EC\a\xDF\x2"+
		"\x2\x3EC\x3ED\x5\xDEp\x2\x3EDW\x3\x2\x2\x2\x3EE\x3EF\x5\x134\x9B\x2\x3EF"+
		"\x3F0\a\xDF\x2\x2\x3F0\x3F2\x3\x2\x2\x2\x3F1\x3EE\x3\x2\x2\x2\x3F1\x3F2"+
		"\x3\x2\x2\x2\x3F2\x3F3\x3\x2\x2\x2\x3F3\x3F4\a>\x2\x2\x3F4\x3F5\a\xDF"+
		"\x2\x2\x3F5\x3F7\x5\x118\x8D\x2\x3F6\x3F8\a\xDF\x2\x2\x3F7\x3F6\x3\x2"+
		"\x2\x2\x3F7\x3F8\x3\x2\x2\x2\x3F8\x3F9\x3\x2\x2\x2\x3F9\x3FA\x5\x10E\x88"+
		"\x2\x3FAY\x3\x2\x2\x2\x3FB\x3FC\t\x5\x2\x2\x3FC[\x3\x2\x2\x2\x3FD\x3FE"+
		"\a\x45\x2\x2\x3FE\x3FF\a\xDF\x2\x2\x3FF\x401\x5\xDEp\x2\x400\x402\a\xDF"+
		"\x2\x2\x401\x400\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x403\x3\x2\x2"+
		"\x2\x403\x405\a\xB8\x2\x2\x404\x406\a\xDF\x2\x2\x405\x404\x3\x2\x2\x2"+
		"\x405\x406\x3\x2\x2\x2\x406\x407\x3\x2\x2\x2\x407\x408\x5\xDEp\x2\x408"+
		"]\x3\x2\x2\x2\x409\x40A\aG\x2\x2\x40A\x40B\a\xDF\x2\x2\x40B\x40C\a-\x2"+
		"\x2\x40C\x40D\a\xDF\x2\x2\x40D\x40F\x5\x118\x8D\x2\x40E\x410\x5\x132\x9A"+
		"\x2\x40F\x40E\x3\x2\x2\x2\x40F\x410\x3\x2\x2\x2\x410\x411\x3\x2\x2\x2"+
		"\x411\x412\a\xDF\x2\x2\x412\x413\aP\x2\x2\x413\x414\a\xDF\x2\x2\x414\x416"+
		"\x5\xDEp\x2\x415\x417\a\xDD\x2\x2\x416\x415\x3\x2\x2\x2\x417\x418\x3\x2"+
		"\x2\x2\x418\x416\x3\x2\x2\x2\x418\x419\x3\x2\x2\x2\x419\x420\x3\x2\x2"+
		"\x2\x41A\x41C\x5\x32\x1A\x2\x41B\x41D\a\xDD\x2\x2\x41C\x41B\x3\x2\x2\x2"+
		"\x41D\x41E\x3\x2\x2\x2\x41E\x41C\x3\x2\x2\x2\x41E\x41F\x3\x2\x2\x2\x41F"+
		"\x421\x3\x2\x2\x2\x420\x41A\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421\x422"+
		"\x3\x2\x2\x2\x422\x425\ak\x2\x2\x423\x424\a\xDF\x2\x2\x424\x426\x5\x118"+
		"\x8D\x2\x425\x423\x3\x2\x2\x2\x425\x426\x3\x2\x2\x2\x426_\x3\x2\x2\x2"+
		"\x427\x428\aG\x2\x2\x428\x429\a\xDF\x2\x2\x429\x42B\x5\x118\x8D\x2\x42A"+
		"\x42C\x5\x132\x9A\x2\x42B\x42A\x3\x2\x2\x2\x42B\x42C\x3\x2\x2\x2\x42C"+
		"\x42F\x3\x2\x2\x2\x42D\x42E\a\xDF\x2\x2\x42E\x430\x5\x11A\x8E\x2\x42F"+
		"\x42D\x3\x2\x2\x2\x42F\x430\x3\x2\x2\x2\x430\x432\x3\x2\x2\x2\x431\x433"+
		"\a\xDF\x2\x2\x432\x431\x3\x2\x2\x2\x432\x433\x3\x2\x2\x2\x433\x434\x3"+
		"\x2\x2\x2\x434\x436\a\xBC\x2\x2\x435\x437\a\xDF\x2\x2\x436\x435\x3\x2"+
		"\x2\x2\x436\x437\x3\x2\x2\x2\x437\x438\x3\x2\x2\x2\x438\x439\x5\xDEp\x2"+
		"\x439\x43A\a\xDF\x2\x2\x43A\x43B\a\xA4\x2\x2\x43B\x43C\a\xDF\x2\x2\x43C"+
		"\x441\x5\xDEp\x2\x43D\x43E\a\xDF\x2\x2\x43E\x43F\a\x9C\x2\x2\x43F\x440"+
		"\a\xDF\x2\x2\x440\x442\x5\xDEp\x2\x441\x43D\x3\x2\x2\x2\x441\x442\x3\x2"+
		"\x2\x2\x442\x444\x3\x2\x2\x2\x443\x445\a\xDD\x2\x2\x444\x443\x3\x2\x2"+
		"\x2\x445\x446\x3\x2\x2\x2\x446\x444\x3\x2\x2\x2\x446\x447\x3\x2\x2\x2"+
		"\x447\x44E\x3\x2\x2\x2\x448\x44A\x5\x32\x1A\x2\x449\x44B\a\xDD\x2\x2\x44A"+
		"\x449\x3\x2\x2\x2\x44B\x44C\x3\x2\x2\x2\x44C\x44A\x3\x2\x2\x2\x44C\x44D"+
		"\x3\x2\x2\x2\x44D\x44F\x3\x2\x2\x2\x44E\x448\x3\x2\x2\x2\x44E\x44F\x3"+
		"\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450\x456\ak\x2\x2\x451\x452\a\xDF\x2"+
		"\x2\x452\x454\x5\x118\x8D\x2\x453\x455\x5\x132\x9A\x2\x454\x453\x3\x2"+
		"\x2\x2\x454\x455\x3\x2\x2\x2\x455\x457\x3\x2\x2\x2\x456\x451\x3\x2\x2"+
		"\x2\x456\x457\x3\x2\x2\x2\x457\x61\x3\x2\x2\x2\x458\x459\x5\x134\x9B\x2"+
		"\x459\x45A\a\xDF\x2\x2\x45A\x45C\x3\x2\x2\x2\x45B\x458\x3\x2\x2\x2\x45B"+
		"\x45C\x3\x2\x2\x2\x45C\x45F\x3\x2\x2\x2\x45D\x45E\a\x9B\x2\x2\x45E\x460"+
		"\a\xDF\x2\x2\x45F\x45D\x3\x2\x2\x2\x45F\x460\x3\x2\x2\x2\x460\x461\x3"+
		"\x2\x2\x2\x461\x462\aH\x2\x2\x462\x463\a\xDF\x2\x2\x463\x468\x5\x118\x8D"+
		"\x2\x464\x466\a\xDF\x2\x2\x465\x464\x3\x2\x2\x2\x465\x466\x3\x2\x2\x2"+
		"\x466\x467\x3\x2\x2\x2\x467\x469\x5\x10E\x88\x2\x468\x465\x3\x2\x2\x2"+
		"\x468\x469\x3\x2\x2\x2\x469\x46C\x3\x2\x2\x2\x46A\x46B\a\xDF\x2\x2\x46B"+
		"\x46D\x5\x11A\x8E\x2\x46C\x46A\x3\x2\x2\x2\x46C\x46D\x3\x2\x2\x2\x46D"+
		"\x46F\x3\x2\x2\x2\x46E\x470\a\xDD\x2\x2\x46F\x46E\x3\x2\x2\x2\x470\x471"+
		"\x3\x2\x2\x2\x471\x46F\x3\x2\x2\x2\x471\x472\x3\x2\x2\x2\x472\x479\x3"+
		"\x2\x2\x2\x473\x475\x5\x32\x1A\x2\x474\x476\a\xDD\x2\x2\x475\x474\x3\x2"+
		"\x2\x2\x476\x477\x3\x2\x2\x2\x477\x475\x3\x2\x2\x2\x477\x478\x3\x2\x2"+
		"\x2\x478\x47A\x3\x2\x2\x2\x479\x473\x3\x2\x2\x2\x479\x47A\x3\x2\x2\x2"+
		"\x47A\x47B\x3\x2\x2\x2\x47B\x47C\a\x31\x2\x2\x47C\x63\x3\x2\x2\x2\x47D"+
		"\x47E\aI\x2\x2\x47E\x47F\a\xDF\x2\x2\x47F\x481\x5\xDEp\x2\x480\x482\a"+
		"\xDF\x2\x2\x481\x480\x3\x2\x2\x2\x481\x482\x3\x2\x2\x2\x482\x483\x3\x2"+
		"\x2\x2\x483\x485\a\xB8\x2\x2\x484\x486\a\xDF\x2\x2\x485\x484\x3\x2\x2"+
		"\x2\x485\x486\x3\x2\x2\x2\x486\x488\x3\x2\x2\x2\x487\x489\x5\xDEp\x2\x488"+
		"\x487\x3\x2\x2\x2\x488\x489\x3\x2\x2\x2\x489\x48B\x3\x2\x2\x2\x48A\x48C"+
		"\a\xDF\x2\x2\x48B\x48A\x3\x2\x2\x2\x48B\x48C\x3\x2\x2\x2\x48C\x48D\x3"+
		"\x2\x2\x2\x48D\x48F\a\xB8\x2\x2\x48E\x490\a\xDF\x2\x2\x48F\x48E\x3\x2"+
		"\x2\x2\x48F\x490\x3\x2\x2\x2\x490\x491\x3\x2\x2\x2\x491\x492\x5\xDEp\x2"+
		"\x492\x65\x3\x2\x2\x2\x493\x494\aK\x2\x2\x494\x495\a\xDF\x2\x2\x495\x496"+
		"\x5\xDEp\x2\x496g\x3\x2\x2\x2\x497\x498\aL\x2\x2\x498\x499\a\xDF\x2\x2"+
		"\x499\x49A\x5\xDEp\x2\x49Ai\x3\x2\x2\x2\x49B\x49C\aM\x2\x2\x49C\x49D\a"+
		"\xDF\x2\x2\x49D\x49E\x5n\x38\x2\x49E\x49F\a\xDF\x2\x2\x49F\x4A0\a\xA2"+
		"\x2\x2\x4A0\x4A1\a\xDF\x2\x2\x4A1\x4A6\x5\x34\x1B\x2\x4A2\x4A3\a\xDF\x2"+
		"\x2\x4A3\x4A4\a.\x2\x2\x4A4\x4A5\a\xDF\x2\x2\x4A5\x4A7\x5\x34\x1B\x2\x4A6"+
		"\x4A2\x3\x2\x2\x2\x4A6\x4A7\x3\x2\x2\x2\x4A7\x4B5\x3\x2\x2\x2\x4A8\x4AC"+
		"\x5l\x37\x2\x4A9\x4AB\x5p\x39\x2\x4AA\x4A9\x3\x2\x2\x2\x4AB\x4AE\x3\x2"+
		"\x2\x2\x4AC\x4AA\x3\x2\x2\x2\x4AC\x4AD\x3\x2\x2\x2\x4AD\x4B0\x3\x2\x2"+
		"\x2\x4AE\x4AC\x3\x2\x2\x2\x4AF\x4B1\x5r:\x2\x4B0\x4AF\x3\x2\x2\x2\x4B0"+
		"\x4B1\x3\x2\x2\x2\x4B1\x4B2\x3\x2\x2\x2\x4B2\x4B3\a\x32\x2\x2\x4B3\x4B5"+
		"\x3\x2\x2\x2\x4B4\x49B\x3\x2\x2\x2\x4B4\x4A8\x3\x2\x2\x2\x4B5k\x3\x2\x2"+
		"\x2\x4B6\x4B7\aM\x2\x2\x4B7\x4B8\a\xDF\x2\x2\x4B8\x4B9\x5n\x38\x2\x4B9"+
		"\x4BA\a\xDF\x2\x2\x4BA\x4BC\a\xA2\x2\x2\x4BB\x4BD\a\xDD\x2\x2\x4BC\x4BB"+
		"\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2\x4BE\x4BC\x3\x2\x2\x2\x4BE\x4BF\x3"+
		"\x2\x2\x2\x4BF\x4C6\x3\x2\x2\x2\x4C0\x4C2\x5\x32\x1A\x2\x4C1\x4C3\a\xDD"+
		"\x2\x2\x4C2\x4C1\x3\x2\x2\x2\x4C3\x4C4\x3\x2\x2\x2\x4C4\x4C2\x3\x2\x2"+
		"\x2\x4C4\x4C5\x3\x2\x2\x2\x4C5\x4C7\x3\x2\x2\x2\x4C6\x4C0\x3\x2\x2\x2"+
		"\x4C6\x4C7\x3\x2\x2\x2\x4C7m\x3\x2\x2\x2\x4C8\x4C9\x5\xDEp\x2\x4C9o\x3"+
		"\x2\x2\x2\x4CA\x4CB\a/\x2\x2\x4CB\x4CC\a\xDF\x2\x2\x4CC\x4CD\x5n\x38\x2"+
		"\x4CD\x4CE\a\xDF\x2\x2\x4CE\x4D0\a\xA2\x2\x2\x4CF\x4D1\a\xDD\x2\x2\x4D0"+
		"\x4CF\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2\x2\x4D2\x4D0\x3\x2\x2\x2\x4D2\x4D3"+
		"\x3\x2\x2\x2\x4D3\x4DA\x3\x2\x2\x2\x4D4\x4D6\x5\x32\x1A\x2\x4D5\x4D7\a"+
		"\xDD\x2\x2\x4D6\x4D5\x3\x2\x2\x2\x4D7\x4D8\x3\x2\x2\x2\x4D8\x4D6\x3\x2"+
		"\x2\x2\x4D8\x4D9\x3\x2\x2\x2\x4D9\x4DB\x3\x2\x2\x2\x4DA\x4D4\x3\x2\x2"+
		"\x2\x4DA\x4DB\x3\x2\x2\x2\x4DBq\x3\x2\x2\x2\x4DC\x4DE\a.\x2\x2\x4DD\x4DF"+
		"\a\xDD\x2\x2\x4DE\x4DD\x3\x2\x2\x2\x4DF\x4E0\x3\x2\x2\x2\x4E0\x4DE\x3"+
		"\x2\x2\x2\x4E0\x4E1\x3\x2\x2\x2\x4E1\x4E8\x3\x2\x2\x2\x4E2\x4E4\x5\x32"+
		"\x1A\x2\x4E3\x4E5\a\xDD\x2\x2\x4E4\x4E3\x3\x2\x2\x2\x4E5\x4E6\x3\x2\x2"+
		"\x2\x4E6\x4E4\x3\x2\x2\x2\x4E6\x4E7\x3\x2\x2\x2\x4E7\x4E9\x3\x2\x2\x2"+
		"\x4E8\x4E2\x3\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9s\x3\x2\x2\x2\x4EA\x4EB"+
		"\aO\x2\x2\x4EB\x4EC\a\xDF\x2\x2\x4EC\x4ED\x5\x118\x8D\x2\x4EDu\x3\x2\x2"+
		"\x2\x4EE\x4EF\aQ\x2\x2\x4EF\x4F0\a\xDF\x2\x2\x4F0\x4F9\x5\xDEp\x2\x4F1"+
		"\x4F3\a\xDF\x2\x2\x4F2\x4F1\x3\x2\x2\x2\x4F2\x4F3\x3\x2\x2\x2\x4F3\x4F4"+
		"\x3\x2\x2\x2\x4F4\x4F6\a\xB8\x2\x2\x4F5\x4F7\a\xDF\x2\x2\x4F6\x4F5\x3"+
		"\x2\x2\x2\x4F6\x4F7\x3\x2\x2\x2\x4F7\x4F8\x3\x2\x2\x2\x4F8\x4FA\x5\xDE"+
		"p\x2\x4F9\x4F2\x3\x2\x2\x2\x4FA\x4FB\x3\x2\x2\x2\x4FB\x4F9\x3\x2\x2\x2"+
		"\x4FB\x4FC\x3\x2\x2\x2\x4FCw\x3\x2\x2\x2\x4FD\x4FE\aT\x2\x2\x4FE\x4FF"+
		"\a\xDF\x2\x2\x4FF\x500\x5\xDEp\x2\x500y\x3\x2\x2\x2\x501\x502\aZ\x2\x2"+
		"\x502\x504\a\xDF\x2\x2\x503\x501\x3\x2\x2\x2\x503\x504\x3\x2\x2\x2\x504"+
		"\x505\x3\x2\x2\x2\x505\x507\x5\xFA~\x2\x506\x508\a\xDF\x2\x2\x507\x506"+
		"\x3\x2\x2\x2\x507\x508\x3\x2\x2\x2\x508\x509\x3\x2\x2\x2\x509\x50B\t\x6"+
		"\x2\x2\x50A\x50C\a\xDF\x2\x2\x50B\x50A\x3\x2\x2\x2\x50B\x50C\x3\x2\x2"+
		"\x2\x50C\x50D\x3\x2\x2\x2\x50D\x50E\x5\xDEp\x2\x50E{\x3\x2\x2\x2\x50F"+
		"\x510\a]\x2\x2\x510\x511\a\xDF\x2\x2\x511\x513\x5\xDEp\x2\x512\x514\a"+
		"\xDF\x2\x2\x513\x512\x3\x2\x2\x2\x513\x514\x3\x2\x2\x2\x514\x515\x3\x2"+
		"\x2\x2\x515\x517\a\xB8\x2\x2\x516\x518\a\xDF\x2\x2\x517\x516\x3\x2\x2"+
		"\x2\x517\x518\x3\x2\x2\x2\x518\x519\x3\x2\x2\x2\x519\x51A\x5\xDEp\x2\x51A"+
		"}\x3\x2\x2\x2\x51B\x51C\aU\x2\x2\x51C\x51D\a\xDF\x2\x2\x51D\x51E\x5\xDE"+
		"p\x2\x51E\x7F\x3\x2\x2\x2\x51F\x520\aV\x2\x2\x520\x521\a\xDF\x2\x2\x521"+
		"\x530\x5\xDEp\x2\x522\x524\a\xDF\x2\x2\x523\x522\x3\x2\x2\x2\x523\x524"+
		"\x3\x2\x2\x2\x524\x525\x3\x2\x2\x2\x525\x527\a\xB8\x2\x2\x526\x528\a\xDF"+
		"\x2\x2\x527\x526\x3\x2\x2\x2\x527\x528\x3\x2\x2\x2\x528\x529\x3\x2\x2"+
		"\x2\x529\x52E\x5\xDEp\x2\x52A\x52B\a\xDF\x2\x2\x52B\x52C\a\xA4\x2\x2\x52C"+
		"\x52D\a\xDF\x2\x2\x52D\x52F\x5\xDEp\x2\x52E\x52A\x3\x2\x2\x2\x52E\x52F"+
		"\x3\x2\x2\x2\x52F\x531\x3\x2\x2\x2\x530\x523\x3\x2\x2\x2\x530\x531\x3"+
		"\x2\x2\x2\x531\x81\x3\x2\x2\x2\x532\x533\a\x61\x2\x2\x533\x534\a\xDF\x2"+
		"\x2\x534\x536\x5\xFA~\x2\x535\x537\a\xDF\x2\x2\x536\x535\x3\x2\x2\x2\x536"+
		"\x537\x3\x2\x2\x2\x537\x538\x3\x2\x2\x2\x538\x53A\a\xBC\x2\x2\x539\x53B"+
		"\a\xDF\x2\x2\x53A\x539\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B\x53C\x3"+
		"\x2\x2\x2\x53C\x53D\x5\xDEp\x2\x53D\x83\x3\x2\x2\x2\x53E\x542\x5\x86\x44"+
		"\x2\x53F\x541\x5\x88\x45\x2\x540\x53F\x3\x2\x2\x2\x541\x544\x3\x2\x2\x2"+
		"\x542\x540\x3\x2\x2\x2\x542\x543\x3\x2\x2\x2\x543\x546\x3\x2\x2\x2\x544"+
		"\x542\x3\x2\x2\x2\x545\x547\x5\x8A\x46\x2\x546\x545\x3\x2\x2\x2\x546\x547"+
		"\x3\x2\x2\x2\x547\x548\x3\x2\x2\x2\x548\x549\a\x65\x2\x2\x549\x85\x3\x2"+
		"\x2\x2\x54A\x54B\a\x62\x2\x2\x54B\x54C\a\xDF\x2\x2\x54C\x54D\x5n\x38\x2"+
		"\x54D\x54E\a\xDF\x2\x2\x54E\x550\a\xA2\x2\x2\x54F\x551\a\xDD\x2\x2\x550"+
		"\x54F\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552\x550\x3\x2\x2\x2\x552\x553"+
		"\x3\x2\x2\x2\x553\x55A\x3\x2\x2\x2\x554\x556\x5\x1A\xE\x2\x555\x557\a"+
		"\xDD\x2\x2\x556\x555\x3\x2\x2\x2\x557\x558\x3\x2\x2\x2\x558\x556\x3\x2"+
		"\x2\x2\x558\x559\x3\x2\x2\x2\x559\x55B\x3\x2\x2\x2\x55A\x554\x3\x2\x2"+
		"\x2\x55A\x55B\x3\x2\x2\x2\x55B\x87\x3\x2\x2\x2\x55C\x55D\a\x63\x2\x2\x55D"+
		"\x55E\a\xDF\x2\x2\x55E\x55F\x5n\x38\x2\x55F\x560\a\xDF\x2\x2\x560\x562"+
		"\a\xA2\x2\x2\x561\x563\a\xDD\x2\x2\x562\x561\x3\x2\x2\x2\x563\x564\x3"+
		"\x2\x2\x2\x564\x562\x3\x2\x2\x2\x564\x565\x3\x2\x2\x2\x565\x56C\x3\x2"+
		"\x2\x2\x566\x568\x5\x1A\xE\x2\x567\x569\a\xDD\x2\x2\x568\x567\x3\x2\x2"+
		"\x2\x569\x56A\x3\x2\x2\x2\x56A\x568\x3\x2\x2\x2\x56A\x56B\x3\x2\x2\x2"+
		"\x56B\x56D\x3\x2\x2\x2\x56C\x566\x3\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D"+
		"\x89\x3\x2\x2\x2\x56E\x570\a\x64\x2\x2\x56F\x571\a\xDD\x2\x2\x570\x56F"+
		"\x3\x2\x2\x2\x571\x572\x3\x2\x2\x2\x572\x570\x3\x2\x2\x2\x572\x573\x3"+
		"\x2\x2\x2\x573\x57A\x3\x2\x2\x2\x574\x576\x5\x1A\xE\x2\x575\x577\a\xDD"+
		"\x2\x2\x576\x575\x3\x2\x2\x2\x577\x578\x3\x2\x2\x2\x578\x576\x3\x2\x2"+
		"\x2\x578\x579\x3\x2\x2\x2\x579\x57B\x3\x2\x2\x2\x57A\x574\x3\x2\x2\x2"+
		"\x57A\x57B\x3\x2\x2\x2\x57B\x8B\x3\x2\x2\x2\x57C\x57E\ag\x2\x2\x57D\x57F"+
		"\a\xDF\x2\x2\x57E\x57D\x3\x2\x2\x2\x57E\x57F\x3\x2\x2\x2\x57F\x580\x3"+
		"\x2\x2\x2\x580\x582\a\xC3\x2\x2\x581\x583\a\xDF\x2\x2\x582\x581\x3\x2"+
		"\x2\x2\x582\x583\x3\x2\x2\x2\x583\x584\x3\x2\x2\x2\x584\x586\x5\x108\x85"+
		"\x2\x585\x587\a\xDF\x2\x2\x586\x585\x3\x2\x2\x2\x586\x587\x3\x2\x2\x2"+
		"\x587\x588\x3\x2\x2\x2\x588\x589\a\xCE\x2\x2\x589\x8D\x3\x2\x2\x2\x58A"+
		"\x58B\ah\x2\x2\x58B\x58C\a\xDF\x2\x2\x58C\x58D\x5\xDEp\x2\x58D\x8F\x3"+
		"\x2\x2\x2\x58E\x58F\aj\x2\x2\x58F\x590\a\xDF\x2\x2\x590\x591\x5\xDEp\x2"+
		"\x591\x592\a\xDF\x2\x2\x592\x593\a\n\x2\x2\x593\x594\a\xDF\x2\x2\x594"+
		"\x595\x5\xDEp\x2\x595\x91\x3\x2\x2\x2\x596\x597\t\a\x2\x2\x597\x5A1\a"+
		"\xDF\x2\x2\x598\x599\aL\x2\x2\x599\x59A\a\xDF\x2\x2\x59A\x59C\x5\xDEp"+
		"\x2\x59B\x59D\a\xB7\x2\x2\x59C\x59B\x3\x2\x2\x2\x59C\x59D\x3\x2\x2\x2"+
		"\x59D\x5A2\x3\x2\x2\x2\x59E\x59F\a\x8D\x2\x2\x59F\x5A0\a\xDF\x2\x2\x5A0"+
		"\x5A2\ak\x2\x2\x5A1\x598\x3\x2\x2\x2\x5A1\x59E\x3\x2\x2\x2\x5A2\x93\x3"+
		"\x2\x2\x2\x5A3\x5A4\aq\x2\x2\x5A4\x5A5\a\xDF\x2\x2\x5A5\x5A6\x5\xDEp\x2"+
		"\x5A6\x5A7\a\xDF\x2\x2\x5A7\x5A8\aL\x2\x2\x5A8\x5A9\a\xDF\x2\x2\x5A9\x5B4"+
		"\x5\xDEp\x2\x5AA\x5AC\a\xDF\x2\x2\x5AB\x5AA\x3\x2\x2\x2\x5AB\x5AC\x3\x2"+
		"\x2\x2\x5AC\x5AD\x3\x2\x2\x2\x5AD\x5AF\a\xB8\x2\x2\x5AE\x5B0\a\xDF\x2"+
		"\x2\x5AF\x5AE\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0\x5B1\x3\x2\x2\x2"+
		"\x5B1\x5B3\x5\xDEp\x2\x5B2\x5AB\x3\x2\x2\x2\x5B3\x5B6\x3\x2\x2\x2\x5B4"+
		"\x5B2\x3\x2\x2\x2\x5B4\x5B5\x3\x2\x2\x2\x5B5\x95\x3\x2\x2\x2\x5B6\x5B4"+
		"\x3\x2\x2\x2\x5B7\x5B8\aq\x2\x2\x5B8\x5B9\a\xDF\x2\x2\x5B9\x5BA\x5\xDE"+
		"p\x2\x5BA\x5BB\a\xDF\x2\x2\x5BB\x5BC\aK\x2\x2\x5BC\x5BD\a\xDF\x2\x2\x5BD"+
		"\x5C8\x5\xDEp\x2\x5BE\x5C0\a\xDF\x2\x2\x5BF\x5BE\x3\x2\x2\x2\x5BF\x5C0"+
		"\x3\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2\x5C1\x5C3\a\xB8\x2\x2\x5C2\x5C4\a\xDF"+
		"\x2\x2\x5C3\x5C2\x3\x2\x2\x2\x5C3\x5C4\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2"+
		"\x2\x5C5\x5C7\x5\xDEp\x2\x5C6\x5BF\x3\x2\x2\x2\x5C7\x5CA\x3\x2\x2\x2\x5C8"+
		"\x5C6\x3\x2\x2\x2\x5C8\x5C9\x3\x2\x2\x2\x5C9\x97\x3\x2\x2\x2\x5CA\x5C8"+
		"\x3\x2\x2\x2\x5CB\x5CC\at\x2\x2\x5CC\x5CD\a\xDF\x2\x2\x5CD\x5CE\x5\xDE"+
		"p\x2\x5CE\x5CF\a\xDF\x2\x2\x5CF\x5D0\aG\x2\x2\x5D0\x5D1\a\xDF\x2\x2\x5D1"+
		"\x5D6\t\b\x2\x2\x5D2\x5D3\a\xDF\x2\x2\x5D3\x5D4\a\x3\x2\x2\x5D4\x5D5\a"+
		"\xDF\x2\x2\x5D5\x5D7\t\t\x2\x2\x5D6\x5D2\x3\x2\x2\x2\x5D6\x5D7\x3\x2\x2"+
		"\x2\x5D7\x5DA\x3\x2\x2\x2\x5D8\x5D9\a\xDF\x2\x2\x5D9\x5DB\t\n\x2\x2\x5DA"+
		"\x5D8\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5DC\x3\x2\x2\x2\x5DC\x5DD"+
		"\a\xDF\x2\x2\x5DD\x5DE\a\n\x2\x2\x5DE\x5DF\a\xDF\x2\x2\x5DF\x5EA\x5\xDE"+
		"p\x2\x5E0\x5E1\a\xDF\x2\x2\x5E1\x5E3\aY\x2\x2\x5E2\x5E4\a\xDF\x2\x2\x5E3"+
		"\x5E2\x3\x2\x2\x2\x5E3\x5E4\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5\x5E7"+
		"\a\xBC\x2\x2\x5E6\x5E8\a\xDF\x2\x2\x5E7\x5E6\x3\x2\x2\x2\x5E7\x5E8\x3"+
		"\x2\x2\x2\x5E8\x5E9\x3\x2\x2\x2\x5E9\x5EB\x5\xDEp\x2\x5EA\x5E0\x3\x2\x2"+
		"\x2\x5EA\x5EB\x3\x2\x2\x2\x5EB\x99\x3\x2\x2\x2\x5EC\x5F9\x5\x9CO\x2\x5ED"+
		"\x5EF\a\xDF\x2\x2\x5EE\x5ED\x3\x2\x2\x2\x5EE\x5EF\x3\x2\x2\x2\x5EF\x5F0"+
		"\x3\x2\x2\x2\x5F0\x5F2\t\v\x2\x2\x5F1\x5F3\a\xDF\x2\x2\x5F2\x5F1\x3\x2"+
		"\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x5F5\x3\x2\x2\x2\x5F4\x5F6\x5\x9CO\x2"+
		"\x5F5\x5F4\x3\x2\x2\x2\x5F5\x5F6\x3\x2\x2\x2\x5F6\x5F8\x3\x2\x2\x2\x5F7"+
		"\x5EE\x3\x2\x2\x2\x5F8\x5FB\x3\x2\x2\x2\x5F9\x5F7\x3\x2\x2\x2\x5F9\x5FA"+
		"\x3\x2\x2\x2\x5FA\x60E\x3\x2\x2\x2\x5FB\x5F9\x3\x2\x2\x2\x5FC\x5FE\x5"+
		"\x9CO\x2\x5FD\x5FC\x3\x2\x2\x2\x5FD\x5FE\x3\x2\x2\x2\x5FE\x609\x3\x2\x2"+
		"\x2\x5FF\x601\a\xDF\x2\x2\x600\x5FF\x3\x2\x2\x2\x600\x601\x3\x2\x2\x2"+
		"\x601\x602\x3\x2\x2\x2\x602\x604\t\v\x2\x2\x603\x605\a\xDF\x2\x2\x604"+
		"\x603\x3\x2\x2\x2\x604\x605\x3\x2\x2\x2\x605\x607\x3\x2\x2\x2\x606\x608"+
		"\x5\x9CO\x2\x607\x606\x3\x2\x2\x2\x607\x608\x3\x2\x2\x2\x608\x60A\x3\x2"+
		"\x2\x2\x609\x600\x3\x2\x2\x2\x60A\x60B\x3\x2\x2\x2\x60B\x609\x3\x2\x2"+
		"\x2\x60B\x60C\x3\x2\x2\x2\x60C\x60E\x3\x2\x2\x2\x60D\x5EC\x3\x2\x2\x2"+
		"\x60D\x5FD\x3\x2\x2\x2\x60E\x9B\x3\x2\x2\x2\x60F\x621\x5\xDEp\x2\x610"+
		"\x61E\t\f\x2\x2\x611\x613\a\xDF\x2\x2\x612\x611\x3\x2\x2\x2\x612\x613"+
		"\x3\x2\x2\x2\x613\x614\x3\x2\x2\x2\x614\x616\a\xC3\x2\x2\x615\x617\a\xDF"+
		"\x2\x2\x616\x615\x3\x2\x2\x2\x616\x617\x3\x2\x2\x2\x617\x618\x3\x2\x2"+
		"\x2\x618\x61A\x5\x108\x85\x2\x619\x61B\a\xDF\x2\x2\x61A\x619\x3\x2\x2"+
		"\x2\x61A\x61B\x3\x2\x2\x2\x61B\x61C\x3\x2\x2\x2\x61C\x61D\a\xCE\x2\x2"+
		"\x61D\x61F\x3\x2\x2\x2\x61E\x612\x3\x2\x2\x2\x61E\x61F\x3\x2\x2\x2\x61F"+
		"\x621\x3\x2\x2\x2\x620\x60F\x3\x2\x2\x2\x620\x610\x3\x2\x2\x2\x621\x9D"+
		"\x3\x2\x2\x2\x622\x623\a~\x2\x2\x623\x624\a\xDF\x2\x2\x624\x626\x5\xDE"+
		"p\x2\x625\x627\a\xDF\x2\x2\x626\x625\x3\x2\x2\x2\x626\x627\x3\x2\x2\x2"+
		"\x627\x628\x3\x2\x2\x2\x628\x62D\a\xB8\x2\x2\x629\x62B\a\xDF\x2\x2\x62A"+
		"\x629\x3\x2\x2\x2\x62A\x62B\x3\x2\x2\x2\x62B\x62C\x3\x2\x2\x2\x62C\x62E"+
		"\x5\x9AN\x2\x62D\x62A\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E\x9F\x3\x2"+
		"\x2\x2\x62F\x630\x5\x134\x9B\x2\x630\x631\a\xDF\x2\x2\x631\x633\x3\x2"+
		"\x2\x2\x632\x62F\x3\x2\x2\x2\x632\x633\x3\x2\x2\x2\x633\x636\x3\x2\x2"+
		"\x2\x634\x635\a\x9B\x2\x2\x635\x637\a\xDF\x2\x2\x636\x634\x3\x2\x2\x2"+
		"\x636\x637\x3\x2\x2\x2\x637\x638\x3\x2\x2\x2\x638\x639\a\x80\x2\x2\x639"+
		"\x63A\a\xDF\x2\x2\x63A\x63C\x5\x118\x8D\x2\x63B\x63D\x5\x132\x9A\x2\x63C"+
		"\x63B\x3\x2\x2\x2\x63C\x63D\x3\x2\x2\x2\x63D\x642\x3\x2\x2\x2\x63E\x640"+
		"\a\xDF\x2\x2\x63F\x63E\x3\x2\x2\x2\x63F\x640\x3\x2\x2\x2\x640\x641\x3"+
		"\x2\x2\x2\x641\x643\x5\x10E\x88\x2\x642\x63F\x3\x2\x2\x2\x642\x643\x3"+
		"\x2\x2\x2\x643\x646\x3\x2\x2\x2\x644\x645\a\xDF\x2\x2\x645\x647\x5\x11A"+
		"\x8E\x2\x646\x644\x3\x2\x2\x2\x646\x647\x3\x2\x2\x2\x647\x649\x3\x2\x2"+
		"\x2\x648\x64A\a\xDD\x2\x2\x649\x648\x3\x2\x2\x2\x64A\x64B\x3\x2\x2\x2"+
		"\x64B\x649\x3\x2\x2\x2\x64B\x64C\x3\x2\x2\x2\x64C\x653\x3\x2\x2\x2\x64D"+
		"\x64F\x5\x32\x1A\x2\x64E\x650\a\xDD\x2\x2\x64F\x64E\x3\x2\x2\x2\x650\x651"+
		"\x3\x2\x2\x2\x651\x64F\x3\x2\x2\x2\x651\x652\x3\x2\x2\x2\x652\x654\x3"+
		"\x2\x2\x2\x653\x64D\x3\x2\x2\x2\x653\x654\x3\x2\x2\x2\x654\x655\x3\x2"+
		"\x2\x2\x655\x656\a\x33\x2\x2\x656\xA1\x3\x2\x2\x2\x657\x658\x5\x134\x9B"+
		"\x2\x658\x659\a\xDF\x2\x2\x659\x65B\x3\x2\x2\x2\x65A\x657\x3\x2\x2\x2"+
		"\x65A\x65B\x3\x2\x2\x2\x65B\x65E\x3\x2\x2\x2\x65C\x65D\a\x9B\x2\x2\x65D"+
		"\x65F\a\xDF\x2\x2\x65E\x65C\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2\x65F\x660"+
		"\x3\x2\x2\x2\x660\x661\a\x82\x2\x2\x661\x662\a\xDF\x2\x2\x662\x667\x5"+
		"\x118\x8D\x2\x663\x665\a\xDF\x2\x2\x664\x663\x3\x2\x2\x2\x664\x665\x3"+
		"\x2\x2\x2\x665\x666\x3\x2\x2\x2\x666\x668\x5\x10E\x88\x2\x667\x664\x3"+
		"\x2\x2\x2\x667\x668\x3\x2\x2\x2\x668\x66A\x3\x2\x2\x2\x669\x66B\a\xDD"+
		"\x2\x2\x66A\x669\x3\x2\x2\x2\x66B\x66C\x3\x2\x2\x2\x66C\x66A\x3\x2\x2"+
		"\x2\x66C\x66D\x3\x2\x2\x2\x66D\x674\x3\x2\x2\x2\x66E\x670\x5\x32\x1A\x2"+
		"\x66F\x671\a\xDD\x2\x2\x670\x66F\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672"+
		"\x670\x3\x2\x2\x2\x672\x673\x3\x2\x2\x2\x673\x675\x3\x2\x2\x2\x674\x66E"+
		"\x3\x2\x2\x2\x674\x675\x3\x2\x2\x2\x675\x676\x3\x2\x2\x2\x676\x677\a\x33"+
		"\x2\x2\x677\xA3\x3\x2\x2\x2\x678\x679\x5\x134\x9B\x2\x679\x67A\a\xDF\x2"+
		"\x2\x67A\x67C\x3\x2\x2\x2\x67B\x678\x3\x2\x2\x2\x67B\x67C\x3\x2\x2\x2"+
		"\x67C\x67F\x3\x2\x2\x2\x67D\x67E\a\x9B\x2\x2\x67E\x680\a\xDF\x2\x2\x67F"+
		"\x67D\x3\x2\x2\x2\x67F\x680\x3\x2\x2\x2\x680\x681\x3\x2\x2\x2\x681\x682"+
		"\a\x81\x2\x2\x682\x683\a\xDF\x2\x2\x683\x688\x5\x118\x8D\x2\x684\x686"+
		"\a\xDF\x2\x2\x685\x684\x3\x2\x2\x2\x685\x686\x3\x2\x2\x2\x686\x687\x3"+
		"\x2\x2\x2\x687\x689\x5\x10E\x88\x2\x688\x685\x3\x2\x2\x2\x688\x689\x3"+
		"\x2\x2\x2\x689\x68B\x3\x2\x2\x2\x68A\x68C\a\xDD\x2\x2\x68B\x68A\x3\x2"+
		"\x2\x2\x68C\x68D\x3\x2\x2\x2\x68D\x68B\x3\x2\x2\x2\x68D\x68E\x3\x2\x2"+
		"\x2\x68E\x695\x3\x2\x2\x2\x68F\x691\x5\x32\x1A\x2\x690\x692\a\xDD\x2\x2"+
		"\x691\x690\x3\x2\x2\x2\x692\x693\x3\x2\x2\x2\x693\x691\x3\x2\x2\x2\x693"+
		"\x694\x3\x2\x2\x2\x694\x696\x3\x2\x2\x2\x695\x68F\x3\x2\x2\x2\x695\x696"+
		"\x3\x2\x2\x2\x696\x697\x3\x2\x2\x2\x697\x698\a\x33\x2\x2\x698\xA5\x3\x2"+
		"\x2\x2\x699\x69A\a\x84\x2\x2\x69A\x69B\a\xDF\x2\x2\x69B\x69D\x5\xDEp\x2"+
		"\x69C\x69E\a\xDF\x2\x2\x69D\x69C\x3\x2\x2\x2\x69D\x69E\x3\x2\x2\x2\x69E"+
		"\x69F\x3\x2\x2\x2\x69F\x6A1\a\xB8\x2\x2\x6A0\x6A2\a\xDF\x2\x2\x6A1\x6A0"+
		"\x3\x2\x2\x2\x6A1\x6A2\x3\x2\x2\x2\x6A2\x6A4\x3\x2\x2\x2\x6A3\x6A5\x5"+
		"\xDEp\x2\x6A4\x6A3\x3\x2\x2\x2\x6A4\x6A5\x3\x2\x2\x2\x6A5\x6A7\x3\x2\x2"+
		"\x2\x6A6\x6A8\a\xDF\x2\x2\x6A7\x6A6\x3\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2"+
		"\x6A8\x6A9\x3\x2\x2\x2\x6A9\x6AB\a\xB8\x2\x2\x6AA\x6AC\a\xDF\x2\x2\x6AB"+
		"\x6AA\x3\x2\x2\x2\x6AB\x6AC\x3\x2\x2\x2\x6AC\x6AD\x3\x2\x2\x2\x6AD\x6AE"+
		"\x5\xDEp\x2\x6AE\xA7\x3\x2\x2\x2\x6AF\x6B0\a\x87\x2\x2\x6B0\x6B1\a\xDF"+
		"\x2\x2\x6B1\x6C0\x5\x118\x8D\x2\x6B2\x6B4\a\xDF\x2\x2\x6B3\x6B2\x3\x2"+
		"\x2\x2\x6B3\x6B4\x3\x2\x2\x2\x6B4\x6B5\x3\x2\x2\x2\x6B5\x6B7\a\xC3\x2"+
		"\x2\x6B6\x6B8\a\xDF\x2\x2\x6B7\x6B6\x3\x2\x2\x2\x6B7\x6B8\x3\x2\x2\x2"+
		"\x6B8\x6BD\x3\x2\x2\x2\x6B9\x6BB\x5\x108\x85\x2\x6BA\x6BC\a\xDF\x2\x2"+
		"\x6BB\x6BA\x3\x2\x2\x2\x6BB\x6BC\x3\x2\x2\x2\x6BC\x6BE\x3\x2\x2\x2\x6BD"+
		"\x6B9\x3\x2\x2\x2\x6BD\x6BE\x3\x2\x2\x2\x6BE\x6BF\x3\x2\x2\x2\x6BF\x6C1"+
		"\a\xCE\x2\x2\x6C0\x6B3\x3\x2\x2\x2\x6C0\x6C1\x3\x2\x2\x2\x6C1\xA9\x3\x2"+
		"\x2\x2\x6C2\x6C5\a\x86\x2\x2\x6C3\x6C4\a\xDF\x2\x2\x6C4\x6C6\x5\xDEp\x2"+
		"\x6C5\x6C3\x3\x2\x2\x2\x6C5\x6C6\x3\x2\x2\x2\x6C6\xAB\x3\x2\x2\x2\x6C7"+
		"\x6C8\a\x8A\x2\x2\x6C8\x6CB\a\xDF\x2\x2\x6C9\x6CA\a}\x2\x2\x6CA\x6CC\a"+
		"\xDF\x2\x2\x6CB\x6C9\x3\x2\x2\x2\x6CB\x6CC\x3\x2\x2\x2\x6CC\x6CD\x3\x2"+
		"\x2\x2\x6CD\x6D8\x5\xAEX\x2\x6CE\x6D0\a\xDF\x2\x2\x6CF\x6CE\x3\x2\x2\x2"+
		"\x6CF\x6D0\x3\x2\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D3\a\xB8\x2\x2\x6D2"+
		"\x6D4\a\xDF\x2\x2\x6D3\x6D2\x3\x2\x2\x2\x6D3\x6D4\x3\x2\x2\x2\x6D4\x6D5"+
		"\x3\x2\x2\x2\x6D5\x6D7\x5\xAEX\x2\x6D6\x6CF\x3\x2\x2\x2\x6D7\x6DA\x3\x2"+
		"\x2\x2\x6D8\x6D6\x3\x2\x2\x2\x6D8\x6D9\x3\x2\x2\x2\x6D9\xAD\x3\x2\x2\x2"+
		"\x6DA\x6D8\x3\x2\x2\x2\x6DB\x6DD\x5\xFA~\x2\x6DC\x6DE\a\xDF\x2\x2\x6DD"+
		"\x6DC\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6DF\x3\x2\x2\x2\x6DF\x6E1"+
		"\a\xC3\x2\x2\x6E0\x6E2\a\xDF\x2\x2\x6E1\x6E0\x3\x2\x2\x2\x6E1\x6E2\x3"+
		"\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E5\x5\x114\x8B\x2\x6E4\x6E6\a\xDF"+
		"\x2\x2\x6E5\x6E4\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2\x2\x6E6\x6E7\x3\x2\x2"+
		"\x2\x6E7\x6EA\a\xCE\x2\x2\x6E8\x6E9\a\xDF\x2\x2\x6E9\x6EB\x5\x11A\x8E"+
		"\x2\x6EA\x6E8\x3\x2\x2\x2\x6EA\x6EB\x3\x2\x2\x2\x6EB\xAF\x3\x2\x2\x2\x6EC"+
		"\x6ED\a\x8C\x2\x2\x6ED\xB1\x3\x2\x2\x2\x6EE\x6F4\a\x8D\x2\x2\x6EF\x6F2"+
		"\a\xDF\x2\x2\x6F0\x6F3\ak\x2\x2\x6F1\x6F3\x5\x118\x8D\x2\x6F2\x6F0\x3"+
		"\x2\x2\x2\x6F2\x6F1\x3\x2\x2\x2\x6F3\x6F5\x3\x2\x2\x2\x6F4\x6EF\x3\x2"+
		"\x2\x2\x6F4\x6F5\x3\x2\x2\x2\x6F5\xB3\x3\x2\x2\x2\x6F6\x6F7\a\x8E\x2\x2"+
		"\x6F7\xB5\x3\x2\x2\x2\x6F8\x6F9\a\x8F\x2\x2\x6F9\x6FA\a\xDF\x2\x2\x6FA"+
		"\x6FB\x5\xDEp\x2\x6FB\xB7\x3\x2\x2\x2\x6FC\x6FD\a\x90\x2\x2\x6FD\x6FE"+
		"\a\xDF\x2\x2\x6FE\x700\x5\xFA~\x2\x6FF\x701\a\xDF\x2\x2\x700\x6FF\x3\x2"+
		"\x2\x2\x700\x701\x3\x2\x2\x2\x701\x702\x3\x2\x2\x2\x702\x704\a\xBC\x2"+
		"\x2\x703\x705\a\xDF\x2\x2\x704\x703\x3\x2\x2\x2\x704\x705\x3\x2\x2\x2"+
		"\x705\x706\x3\x2\x2\x2\x706\x707\x5\xDEp\x2\x707\xB9\x3\x2\x2\x2\x708"+
		"\x709\a\x91\x2\x2\x709\x70A\a\xDF\x2\x2\x70A\x70C\x5\xDEp\x2\x70B\x70D"+
		"\a\xDF\x2\x2\x70C\x70B\x3\x2\x2\x2\x70C\x70D\x3\x2\x2\x2\x70D\x70E\x3"+
		"\x2\x2\x2\x70E\x710\a\xB8\x2\x2\x70F\x711\a\xDF\x2\x2\x710\x70F\x3\x2"+
		"\x2\x2\x710\x711\x3\x2\x2\x2\x711\x712\x3\x2\x2\x2\x712\x713\x5\xDEp\x2"+
		"\x713\xBB\x3\x2\x2\x2\x714\x715\a\x92\x2\x2\x715\x716\a\xDF\x2\x2\x716"+
		"\x718\x5\xDEp\x2\x717\x719\a\xDF\x2\x2\x718\x717\x3\x2\x2\x2\x718\x719"+
		"\x3\x2\x2\x2\x719\x71A\x3\x2\x2\x2\x71A\x71C\a\xB8\x2\x2\x71B\x71D\a\xDF"+
		"\x2\x2\x71C\x71B\x3\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D\x71E\x3\x2\x2"+
		"\x2\x71E\x720\x5\xDEp\x2\x71F\x721\a\xDF\x2\x2\x720\x71F\x3\x2\x2\x2\x720"+
		"\x721\x3\x2\x2\x2\x721\x722\x3\x2\x2\x2\x722\x724\a\xB8\x2\x2\x723\x725"+
		"\a\xDF\x2\x2\x724\x723\x3\x2\x2\x2\x724\x725\x3\x2\x2\x2\x725\x726\x3"+
		"\x2\x2\x2\x726\x728\x5\xDEp\x2\x727\x729\a\xDF\x2\x2\x728\x727\x3\x2\x2"+
		"\x2\x728\x729\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2\x72A\x72C\a\xB8\x2\x2"+
		"\x72B\x72D\a\xDF\x2\x2\x72C\x72B\x3\x2\x2\x2\x72C\x72D\x3\x2\x2\x2\x72D"+
		"\x72E\x3\x2\x2\x2\x72E\x72F\x5\xDEp\x2\x72F\xBD\x3\x2\x2\x2\x730\x731"+
		"\a\x93\x2\x2\x731\x732\a\xDF\x2\x2\x732\x734\x5\xDEp\x2\x733\x735\a\xDF"+
		"\x2\x2\x734\x733\x3\x2\x2\x2\x734\x735\x3\x2\x2\x2\x735\x736\x3\x2\x2"+
		"\x2\x736\x738\a\xB8\x2\x2\x737\x739\a\xDF\x2\x2\x738\x737\x3\x2\x2\x2"+
		"\x738\x739\x3\x2\x2\x2\x739\x73A\x3\x2\x2\x2\x73A\x73B\x5\xDEp\x2\x73B"+
		"\xBF\x3\x2\x2\x2\x73C\x73D\a\x94\x2\x2\x73D\x73E\a\xDF\x2\x2\x73E\x73F"+
		"\a\x14\x2\x2\x73F\x740\a\xDF\x2\x2\x740\x742\x5\xDEp\x2\x741\x743\a\xDD"+
		"\x2\x2\x742\x741\x3\x2\x2\x2\x743\x744\x3\x2\x2\x2\x744\x742\x3\x2\x2"+
		"\x2\x744\x745\x3\x2\x2\x2\x745\x749\x3\x2\x2\x2\x746\x748\x5\xC2\x62\x2"+
		"\x747\x746\x3\x2\x2\x2\x748\x74B\x3\x2\x2\x2\x749\x747\x3\x2\x2\x2\x749"+
		"\x74A\x3\x2\x2\x2\x74A\x74D\x3\x2\x2\x2\x74B\x749\x3\x2\x2\x2\x74C\x74E"+
		"\a\xDF\x2\x2\x74D\x74C\x3\x2\x2\x2\x74D\x74E\x3\x2\x2\x2\x74E\x74F\x3"+
		"\x2\x2\x2\x74F\x750\a\x34\x2\x2\x750\xC1\x3\x2\x2\x2\x751\x752\a\x14\x2"+
		"\x2\x752\x753\a\xDF\x2\x2\x753\x755\x5\xC4\x63\x2\x754\x756\a\xDF\x2\x2"+
		"\x755\x754\x3\x2\x2\x2\x755\x756\x3\x2\x2\x2\x756\x765\x3\x2\x2\x2\x757"+
		"\x759\a\xB7\x2\x2\x758\x757\x3\x2\x2\x2\x758\x759\x3\x2\x2\x2\x759\x75D"+
		"\x3\x2\x2\x2\x75A\x75C\a\xDD\x2\x2\x75B\x75A\x3\x2\x2\x2\x75C\x75F\x3"+
		"\x2\x2\x2\x75D\x75B\x3\x2\x2\x2\x75D\x75E\x3\x2\x2\x2\x75E\x766\x3\x2"+
		"\x2\x2\x75F\x75D\x3\x2\x2\x2\x760\x762\a\xDD\x2\x2\x761\x760\x3\x2\x2"+
		"\x2\x762\x763\x3\x2\x2\x2\x763\x761\x3\x2\x2\x2\x763\x764\x3\x2\x2\x2"+
		"\x764\x766\x3\x2\x2\x2\x765\x758\x3\x2\x2\x2\x765\x761\x3\x2\x2\x2\x766"+
		"\x76D\x3\x2\x2\x2\x767\x769\x5\x32\x1A\x2\x768\x76A\a\xDD\x2\x2\x769\x768"+
		"\x3\x2\x2\x2\x76A\x76B\x3\x2\x2\x2\x76B\x769\x3\x2\x2\x2\x76B\x76C\x3"+
		"\x2\x2\x2\x76C\x76E\x3\x2\x2\x2\x76D\x767\x3\x2\x2\x2\x76D\x76E\x3\x2"+
		"\x2\x2\x76E\xC3\x3\x2\x2\x2\x76F\x77F\a.\x2\x2\x770\x77B\x5\xC6\x64\x2"+
		"\x771\x773\a\xDF\x2\x2\x772\x771\x3\x2\x2\x2\x772\x773\x3\x2\x2\x2\x773"+
		"\x774\x3\x2\x2\x2\x774\x776\a\xB8\x2\x2\x775\x777\a\xDF\x2\x2\x776\x775"+
		"\x3\x2\x2\x2\x776\x777\x3\x2\x2\x2\x777\x778\x3\x2\x2\x2\x778\x77A\x5"+
		"\xC6\x64\x2\x779\x772\x3\x2\x2\x2\x77A\x77D\x3\x2\x2\x2\x77B\x779\x3\x2"+
		"\x2\x2\x77B\x77C\x3\x2\x2\x2\x77C\x77F\x3\x2\x2\x2\x77D\x77B\x3\x2\x2"+
		"\x2\x77E\x76F\x3\x2\x2\x2\x77E\x770\x3\x2\x2\x2\x77F\xC5\x3\x2\x2\x2\x780"+
		"\x782\aR\x2\x2\x781\x783\a\xDF\x2\x2\x782\x781\x3\x2\x2\x2\x782\x783\x3"+
		"\x2\x2\x2\x783\x784\x3\x2\x2\x2\x784\x786\x5\x120\x91\x2\x785\x787\a\xDF"+
		"\x2\x2\x786\x785\x3\x2\x2\x2\x786\x787\x3\x2\x2\x2\x787\x788\x3\x2\x2"+
		"\x2\x788\x789\x5\xDEp\x2\x789\x792\x3\x2\x2\x2\x78A\x792\x5\xDEp\x2\x78B"+
		"\x78C\x5\xDEp\x2\x78C\x78D\a\xDF\x2\x2\x78D\x78E\a\xA4\x2\x2\x78E\x78F"+
		"\a\xDF\x2\x2\x78F\x790\x5\xDEp\x2\x790\x792\x3\x2\x2\x2\x791\x780\x3\x2"+
		"\x2\x2\x791\x78A\x3\x2\x2\x2\x791\x78B\x3\x2\x2\x2\x792\xC7\x3\x2\x2\x2"+
		"\x793\x794\a\x95\x2\x2\x794\x795\a\xDF\x2\x2\x795\x79E\x5\xDEp\x2\x796"+
		"\x798\a\xDF\x2\x2\x797\x796\x3\x2\x2\x2\x797\x798\x3\x2\x2\x2\x798\x799"+
		"\x3\x2\x2\x2\x799\x79B\a\xB8\x2\x2\x79A\x79C\a\xDF\x2\x2\x79B\x79A\x3"+
		"\x2\x2\x2\x79B\x79C\x3\x2\x2\x2\x79C\x79D\x3\x2\x2\x2\x79D\x79F\x5\xDE"+
		"p\x2\x79E\x797\x3\x2\x2\x2\x79E\x79F\x3\x2\x2\x2\x79F\xC9\x3\x2\x2\x2"+
		"\x7A0\x7A1\a\x97\x2\x2\x7A1\x7A2\a\xDF\x2\x2\x7A2\x7A4\x5\xDEp\x2\x7A3"+
		"\x7A5\a\xDF\x2\x2\x7A4\x7A3\x3\x2\x2\x2\x7A4\x7A5\x3\x2\x2\x2\x7A5\x7A6"+
		"\x3\x2\x2\x2\x7A6\x7A8\a\xB8\x2\x2\x7A7\x7A9\a\xDF\x2\x2\x7A8\x7A7\x3"+
		"\x2\x2\x2\x7A8\x7A9\x3\x2\x2\x2\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7AB\x5\xDE"+
		"p\x2\x7AB\xCB\x3\x2\x2\x2\x7AC\x7AD\a\x96\x2\x2\x7AD\x7AE\a\xDF\x2\x2"+
		"\x7AE\x7B0\x5\xFA~\x2\x7AF\x7B1\a\xDF\x2\x2\x7B0\x7AF\x3\x2\x2\x2\x7B0"+
		"\x7B1\x3\x2\x2\x2\x7B1\x7B2\x3\x2\x2\x2\x7B2\x7B4\a\xBC\x2\x2\x7B3\x7B5"+
		"\a\xDF\x2\x2\x7B4\x7B3\x3\x2\x2\x2\x7B4\x7B5\x3\x2\x2\x2\x7B5\x7B6\x3"+
		"\x2\x2\x2\x7B6\x7B7\x5\xDEp\x2\x7B7\xCD\x3\x2\x2\x2\x7B8\x7B9\a\x9D\x2"+
		"\x2\x7B9\xCF\x3\x2\x2\x2\x7BA\x7BB\x5\x134\x9B\x2\x7BB\x7BC\a\xDF\x2\x2"+
		"\x7BC\x7BE\x3\x2\x2\x2\x7BD\x7BA\x3\x2\x2\x2\x7BD\x7BE\x3\x2\x2\x2\x7BE"+
		"\x7C1\x3\x2\x2\x2\x7BF\x7C0\a\x9B\x2\x2\x7C0\x7C2\a\xDF\x2\x2\x7C1\x7BF"+
		"\x3\x2\x2\x2\x7C1\x7C2\x3\x2\x2\x2\x7C2\x7C3\x3\x2\x2\x2\x7C3\x7C4\a\x9F"+
		"\x2\x2\x7C4\x7C5\a\xDF\x2\x2\x7C5\x7CA\x5\x118\x8D\x2\x7C6\x7C8\a\xDF"+
		"\x2\x2\x7C7\x7C6\x3\x2\x2\x2\x7C7\x7C8\x3\x2\x2\x2\x7C8\x7C9\x3\x2\x2"+
		"\x2\x7C9\x7CB\x5\x10E\x88\x2\x7CA\x7C7\x3\x2\x2\x2\x7CA\x7CB\x3\x2\x2"+
		"\x2\x7CB\x7CD\x3\x2\x2\x2\x7CC\x7CE\a\xDD\x2\x2\x7CD\x7CC\x3\x2\x2\x2"+
		"\x7CE\x7CF\x3\x2\x2\x2\x7CF\x7CD\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2\x7D0"+
		"\x7D7\x3\x2\x2\x2\x7D1\x7D3\x5\x32\x1A\x2\x7D2\x7D4\a\xDD\x2\x2\x7D3\x7D2"+
		"\x3\x2\x2\x2\x7D4\x7D5\x3\x2\x2\x2\x7D5\x7D3\x3\x2\x2\x2\x7D5\x7D6\x3"+
		"\x2\x2\x2\x7D6\x7D8\x3\x2\x2\x2\x7D7\x7D1\x3\x2\x2\x2\x7D7\x7D8\x3\x2"+
		"\x2\x2\x7D8\x7D9\x3\x2\x2\x2\x7D9\x7DA\a\x35\x2\x2\x7DA\xD1\x3\x2\x2\x2"+
		"\x7DB\x7DD\a\xA3\x2\x2\x7DC\x7DE\a\xDF\x2\x2\x7DD\x7DC\x3\x2\x2\x2\x7DD"+
		"\x7DE\x3\x2\x2\x2\x7DE\x7DF\x3\x2\x2\x2\x7DF\x7E1\a\xBC\x2\x2\x7E0\x7E2"+
		"\a\xDF\x2\x2\x7E1\x7E0\x3\x2\x2\x2\x7E1\x7E2\x3\x2\x2\x2\x7E2\x7E3\x3"+
		"\x2\x2\x2\x7E3\x7E4\x5\xDEp\x2\x7E4\xD3\x3\x2\x2\x2\x7E5\x7E6\x5\x134"+
		"\x9B\x2\x7E6\x7E7\a\xDF\x2\x2\x7E7\x7E9\x3\x2\x2\x2\x7E8\x7E5\x3\x2\x2"+
		"\x2\x7E8\x7E9\x3\x2\x2\x2\x7E9\x7EA\x3\x2\x2\x2\x7EA\x7EB\a\xA6\x2\x2"+
		"\x7EB\x7EC\a\xDF\x2\x2\x7EC\x7EE\x5\x118\x8D\x2\x7ED\x7EF\a\xDD\x2\x2"+
		"\x7EE\x7ED\x3\x2\x2\x2\x7EF\x7F0\x3\x2\x2\x2\x7F0\x7EE\x3\x2\x2\x2\x7F0"+
		"\x7F1\x3\x2\x2\x2\x7F1\x7F5\x3\x2\x2\x2\x7F2\x7F4\x5\xD6l\x2\x7F3\x7F2"+
		"\x3\x2\x2\x2\x7F4\x7F7\x3\x2\x2\x2\x7F5\x7F3\x3\x2\x2\x2\x7F5\x7F6\x3"+
		"\x2\x2\x2\x7F6\x7F8\x3\x2\x2\x2\x7F7\x7F5\x3\x2\x2\x2\x7F8\x7F9\a\x36"+
		"\x2\x2\x7F9\xD5\x3\x2\x2\x2\x7FA\x809\x5\x118\x8D\x2\x7FB\x7FD\a\xDF\x2"+
		"\x2\x7FC\x7FB\x3\x2\x2\x2\x7FC\x7FD\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2\x2"+
		"\x7FE\x803\a\xC3\x2\x2\x7FF\x801\a\xDF\x2\x2\x800\x7FF\x3\x2\x2\x2\x800"+
		"\x801\x3\x2\x2\x2\x801\x802\x3\x2\x2\x2\x802\x804\x5\x114\x8B\x2\x803"+
		"\x800\x3\x2\x2\x2\x803\x804\x3\x2\x2\x2\x804\x806\x3\x2\x2\x2\x805\x807"+
		"\a\xDF\x2\x2\x806\x805\x3\x2\x2\x2\x806\x807\x3\x2\x2\x2\x807\x808\x3"+
		"\x2\x2\x2\x808\x80A\a\xCE\x2\x2\x809\x7FC\x3\x2\x2\x2\x809\x80A\x3\x2"+
		"\x2\x2\x80A\x80D\x3\x2\x2\x2\x80B\x80C\a\xDF\x2\x2\x80C\x80E\x5\x11A\x8E"+
		"\x2\x80D\x80B\x3\x2\x2\x2\x80D\x80E\x3\x2\x2\x2\x80E\x810\x3\x2\x2\x2"+
		"\x80F\x811\a\xDD\x2\x2\x810\x80F\x3\x2\x2\x2\x811\x812\x3\x2\x2\x2\x812"+
		"\x810\x3\x2\x2\x2\x812\x813\x3\x2\x2\x2\x813\xD7\x3\x2\x2\x2\x814\x815"+
		"\a\xA7\x2\x2\x815\x816\a\xDF\x2\x2\x816\x81B\x5\xDEp\x2\x817\x818\a\xDF"+
		"\x2\x2\x818\x819\aR\x2\x2\x819\x81A\a\xDF\x2\x2\x81A\x81C\x5\x130\x99"+
		"\x2\x81B\x817\x3\x2\x2\x2\x81B\x81C\x3\x2\x2\x2\x81C\xD9\x3\x2\x2\x2\x81D"+
		"\x81E\a\xA8\x2\x2\x81E\x81F\a\xDF\x2\x2\x81F\x820\x5\xDEp\x2\x820\xDB"+
		"\x3\x2\x2\x2\x821\x822\a\xA9\x2\x2\x822\x823\a\xDF\x2\x2\x823\x832\x5"+
		"\xDEp\x2\x824\x826\a\xDF\x2\x2\x825\x824\x3\x2\x2\x2\x825\x826\x3\x2\x2"+
		"\x2\x826\x827\x3\x2\x2\x2\x827\x829\a\xB8\x2\x2\x828\x82A\a\xDF\x2\x2"+
		"\x829\x828\x3\x2\x2\x2\x829\x82A\x3\x2\x2\x2\x82A\x82B\x3\x2\x2\x2\x82B"+
		"\x830\x5\xDEp\x2\x82C\x82D\a\xDF\x2\x2\x82D\x82E\a\xA4\x2\x2\x82E\x82F"+
		"\a\xDF\x2\x2\x82F\x831\x5\xDEp\x2\x830\x82C\x3\x2\x2\x2\x830\x831\x3\x2"+
		"\x2\x2\x831\x833\x3\x2\x2\x2\x832\x825\x3\x2\x2\x2\x832\x833\x3\x2\x2"+
		"\x2\x833\xDD\x3\x2\x2\x2\x834\x835\bp\x1\x2\x835\x86E\x5\x12A\x96\x2\x836"+
		"\x86E\x5\xFA~\x2\x837\x839\a\xC3\x2\x2\x838\x83A\a\xDF\x2\x2\x839\x838"+
		"\x3\x2\x2\x2\x839\x83A\x3\x2\x2\x2\x83A\x83B\x3\x2\x2\x2\x83B\x846\x5"+
		"\xDEp\x2\x83C\x83E\a\xDF\x2\x2\x83D\x83C\x3\x2\x2\x2\x83D\x83E\x3\x2\x2"+
		"\x2\x83E\x83F\x3\x2\x2\x2\x83F\x841\a\xB8\x2\x2\x840\x842\a\xDF\x2\x2"+
		"\x841\x840\x3\x2\x2\x2\x841\x842\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843"+
		"\x845\x5\xDEp\x2\x844\x83D\x3\x2\x2\x2\x845\x848\x3\x2\x2\x2\x846\x844"+
		"\x3\x2\x2\x2\x846\x847\x3\x2\x2\x2\x847\x84A\x3\x2\x2\x2\x848\x846\x3"+
		"\x2\x2\x2\x849\x84B\a\xDF\x2\x2\x84A\x849\x3\x2\x2\x2\x84A\x84B\x3\x2"+
		"\x2\x2\x84B\x84C\x3\x2\x2\x2\x84C\x84D\a\xCE\x2\x2\x84D\x86E\x3\x2\x2"+
		"\x2\x84E\x84F\al\x2\x2\x84F\x850\a\xDF\x2\x2\x850\x86E\x5\xDEp\x1E\x851"+
		"\x86E\x5\xD8m\x2\x852\x86E\x5\x8CG\x2\x853\x854\a\x4\x2\x2\x854\x855\a"+
		"\xDF\x2\x2\x855\x86E\x5\xDEp\x1B\x856\x858\x5\xFA~\x2\x857\x859\a\xDF"+
		"\x2\x2\x858\x857\x3\x2\x2\x2\x858\x859\x3\x2\x2\x2\x859\x85A\x3\x2\x2"+
		"\x2\x85A\x85C\a\xB5\x2\x2\x85B\x85D\a\xDF\x2\x2\x85C\x85B\x3\x2\x2\x2"+
		"\x85C\x85D\x3\x2\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E\x85F\x5\xDEp\x1A\x85F"+
		"\x86E\x3\x2\x2\x2\x860\x862\a\xC5\x2\x2\x861\x863\a\xDF\x2\x2\x862\x861"+
		"\x3\x2\x2\x2\x862\x863\x3\x2\x2\x2\x863\x864\x3\x2\x2\x2\x864\x86E\x5"+
		"\xDEp\x10\x865\x867\a\xCA\x2\x2\x866\x868\a\xDF\x2\x2\x867\x866\x3\x2"+
		"\x2\x2\x867\x868\x3\x2\x2\x2\x868\x869\x3\x2\x2\x2\x869\x86E\x5\xDEp\xF"+
		"\x86A\x86B\am\x2\x2\x86B\x86C\a\xDF\x2\x2\x86C\x86E\x5\xDEp\x3\x86D\x834"+
		"\x3\x2\x2\x2\x86D\x836\x3\x2\x2\x2\x86D\x837\x3\x2\x2\x2\x86D\x84E\x3"+
		"\x2\x2\x2\x86D\x851\x3\x2\x2\x2\x86D\x852\x3\x2\x2\x2\x86D\x853\x3\x2"+
		"\x2\x2\x86D\x856\x3\x2\x2\x2\x86D\x860\x3\x2\x2\x2\x86D\x865\x3\x2\x2"+
		"\x2\x86D\x86A\x3\x2\x2\x2\x86E\x90D\x3\x2\x2\x2\x86F\x870\f\x19\x2\x2"+
		"\x870\x871\a\xDF\x2\x2\x871\x872\aR\x2\x2\x872\x873\a\xDF\x2\x2\x873\x90C"+
		"\x5\xDEp\x1A\x874\x875\f\x18\x2\x2\x875\x876\a\xDF\x2\x2\x876\x877\a\\"+
		"\x2\x2\x877\x878\a\xDF\x2\x2\x878\x90C\x5\xDEp\x19\x879\x87B\f\x17\x2"+
		"\x2\x87A\x87C\a\xDF\x2\x2\x87B\x87A\x3\x2\x2\x2\x87B\x87C\x3\x2\x2\x2"+
		"\x87C\x87D\x3\x2\x2\x2\x87D\x87F\a\xBE\x2\x2\x87E\x880\a\xDF\x2\x2\x87F"+
		"\x87E\x3\x2\x2\x2\x87F\x880\x3\x2\x2\x2\x880\x881\x3\x2\x2\x2\x881\x90C"+
		"\x5\xDEp\x18\x882\x884\f\x16\x2\x2\x883\x885\a\xDF\x2\x2\x884\x883\x3"+
		"\x2\x2\x2\x884\x885\x3\x2\x2\x2\x885\x886\x3\x2\x2\x2\x886\x888\a\xC1"+
		"\x2\x2\x887\x889\a\xDF\x2\x2\x888\x887\x3\x2\x2\x2\x888\x889\x3\x2\x2"+
		"\x2\x889\x88A\x3\x2\x2\x2\x88A\x90C\x5\xDEp\x17\x88B\x88D\f\x15\x2\x2"+
		"\x88C\x88E\a\xDF\x2\x2\x88D\x88C\x3\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E"+
		"\x88F\x3\x2\x2\x2\x88F\x891\a\xBF\x2\x2\x890\x892\a\xDF\x2\x2\x891\x890"+
		"\x3\x2\x2\x2\x891\x892\x3\x2\x2\x2\x892\x893\x3\x2\x2\x2\x893\x90C\x5"+
		"\xDEp\x16\x894\x896\f\x14\x2\x2\x895\x897\a\xDF\x2\x2\x896\x895\x3\x2"+
		"\x2\x2\x896\x897\x3\x2\x2\x2\x897\x898\x3\x2\x2\x2\x898\x89A\a\xC4\x2"+
		"\x2\x899\x89B\a\xDF\x2\x2\x89A\x899\x3\x2\x2\x2\x89A\x89B\x3\x2\x2\x2"+
		"\x89B\x89C\x3\x2\x2\x2\x89C\x90C\x5\xDEp\x15\x89D\x89F\f\x13\x2\x2\x89E"+
		"\x8A0\a\xDF\x2\x2\x89F\x89E\x3\x2\x2\x2\x89F\x8A0\x3\x2\x2\x2\x8A0\x8A1"+
		"\x3\x2\x2\x2\x8A1\x8A3\a\xC8\x2\x2\x8A2\x8A4\a\xDF\x2\x2\x8A3\x8A2\x3"+
		"\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A5\x3\x2\x2\x2\x8A5\x90C\x5\xDE"+
		"p\x14\x8A6\x8A8\f\x12\x2\x2\x8A7\x8A9\a\xDF\x2\x2\x8A8\x8A7\x3\x2\x2\x2"+
		"\x8A8\x8A9\x3\x2\x2\x2\x8A9\x8AA\x3\x2\x2\x2\x8AA\x8AC\a\xBC\x2\x2\x8AB"+
		"\x8AD\a\xDF\x2\x2\x8AC\x8AB\x3\x2\x2\x2\x8AC\x8AD\x3\x2\x2\x2\x8AD\x8AE"+
		"\x3\x2\x2\x2\x8AE\x90C\x5\xDEp\x13\x8AF\x8B0\f\x11\x2\x2\x8B0\x8B1\a\xDF"+
		"\x2\x2\x8B1\x8B2\a\xB4\x2\x2\x8B2\x8B3\a\xDF\x2\x2\x8B3\x90C\x5\xDEp\x12"+
		"\x8B4\x8B6\f\xE\x2\x2\x8B5\x8B7\a\xDF\x2\x2\x8B6\x8B5\x3\x2\x2\x2\x8B6"+
		"\x8B7\x3\x2\x2\x2\x8B7\x8B8\x3\x2\x2\x2\x8B8\x8BA\a\xCA\x2\x2\x8B9\x8BB"+
		"\a\xDF\x2\x2\x8BA\x8B9\x3\x2\x2\x2\x8BA\x8BB\x3\x2\x2\x2\x8BB\x8BC\x3"+
		"\x2\x2\x2\x8BC\x90C\x5\xDEp\xF\x8BD\x8BF\f\r\x2\x2\x8BE\x8C0\a\xDF\x2"+
		"\x2\x8BF\x8BE\x3\x2\x2\x2\x8BF\x8C0\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2"+
		"\x8C1\x8C3\ai\x2\x2\x8C2\x8C4\a\xDF\x2\x2\x8C3\x8C2\x3\x2\x2\x2\x8C3\x8C4"+
		"\x3\x2\x2\x2\x8C4\x8C5\x3\x2\x2\x2\x8C5\x90C\x5\xDEp\xE\x8C6\x8C8\f\f"+
		"\x2\x2\x8C7\x8C9\a\xDF\x2\x2\x8C8\x8C7\x3\x2\x2\x2\x8C8\x8C9\x3\x2\x2"+
		"\x2\x8C9\x8CA\x3\x2\x2\x2\x8CA\x8CC\a\xB9\x2\x2\x8CB\x8CD\a\xDF\x2\x2"+
		"\x8CC\x8CB\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE"+
		"\x90C\x5\xDEp\r\x8CF\x8D1\f\v\x2\x2\x8D0\x8D2\a\xDF\x2\x2\x8D1\x8D0\x3"+
		"\x2\x2\x2\x8D1\x8D2\x3\x2\x2\x2\x8D2\x8D3\x3\x2\x2\x2\x8D3\x8D5\a\xC7"+
		"\x2\x2\x8D4\x8D6\a\xDF\x2\x2\x8D5\x8D4\x3\x2\x2\x2\x8D5\x8D6\x3\x2\x2"+
		"\x2\x8D6\x8D7\x3\x2\x2\x2\x8D7\x90C\x5\xDEp\f\x8D8\x8DA\f\n\x2\x2\x8D9"+
		"\x8DB\a\xDF\x2\x2\x8DA\x8D9\x3\x2\x2\x2\x8DA\x8DB\x3\x2\x2\x2\x8DB\x8DC"+
		"\x3\x2\x2\x2\x8DC\x8DE\a\xC5\x2\x2\x8DD\x8DF\a\xDF\x2\x2\x8DE\x8DD\x3"+
		"\x2\x2\x2\x8DE\x8DF\x3\x2\x2\x2\x8DF\x8E0\x3\x2\x2\x2\x8E0\x90C\x5\xDE"+
		"p\v\x8E1\x8E3\f\t\x2\x2\x8E2\x8E4\a\xDF\x2\x2\x8E3\x8E2\x3\x2\x2\x2\x8E3"+
		"\x8E4\x3\x2\x2\x2\x8E4\x8E5\x3\x2\x2\x2\x8E5\x8E7\a\xCC\x2\x2\x8E6\x8E8"+
		"\a\xDF\x2\x2\x8E7\x8E6\x3\x2\x2\x2\x8E7\x8E8\x3\x2\x2\x2\x8E8\x8E9\x3"+
		"\x2\x2\x2\x8E9\x90C\x5\xDEp\n\x8EA\x8EB\f\b\x2\x2\x8EB\x8EC\a\xDF\x2\x2"+
		"\x8EC\x8ED\aN\x2\x2\x8ED\x8EE\a\xDF\x2\x2\x8EE\x90C\x5\xDEp\t\x8EF\x8F0"+
		"\f\a\x2\x2\x8F0\x8F1\a\xDF\x2\x2\x8F1\x8F2\a;\x2\x2\x8F2\x8F3\a\xDF\x2"+
		"\x2\x8F3\x90C\x5\xDEp\b\x8F4\x8F6\f\x6\x2\x2\x8F5\x8F7\a\xDF\x2\x2\x8F6"+
		"\x8F5\x3\x2\x2\x2\x8F6\x8F7\x3\x2\x2\x2\x8F7\x8F8\x3\x2\x2\x2\x8F8\x8FA"+
		"\a\xB3\x2\x2\x8F9\x8FB\a\xDF\x2\x2\x8FA\x8F9\x3\x2\x2\x2\x8FA\x8FB\x3"+
		"\x2\x2\x2\x8FB\x8FC\x3\x2\x2\x2\x8FC\x90C\x5\xDEp\a\x8FD\x8FF\f\x5\x2"+
		"\x2\x8FE\x900\a\xDF\x2\x2\x8FF\x8FE\x3\x2\x2\x2\x8FF\x900\x3\x2\x2\x2"+
		"\x900\x901\x3\x2\x2\x2\x901\x903\az\x2\x2\x902\x904\a\xDF\x2\x2\x903\x902"+
		"\x3\x2\x2\x2\x903\x904\x3\x2\x2\x2\x904\x905\x3\x2\x2\x2\x905\x90C\x5"+
		"\xDEp\x6\x906\x907\f\x4\x2\x2\x907\x908\a\xDF\x2\x2\x908\x909\a\x6\x2"+
		"\x2\x909\x90A\a\xDF\x2\x2\x90A\x90C\x5\xDEp\x5\x90B\x86F\x3\x2\x2\x2\x90B"+
		"\x874\x3\x2\x2\x2\x90B\x879\x3\x2\x2\x2\x90B\x882\x3\x2\x2\x2\x90B\x88B"+
		"\x3\x2\x2\x2\x90B\x894\x3\x2\x2\x2\x90B\x89D\x3\x2\x2\x2\x90B\x8A6\x3"+
		"\x2\x2\x2\x90B\x8AF\x3\x2\x2\x2\x90B\x8B4\x3\x2\x2\x2\x90B\x8BD\x3\x2"+
		"\x2\x2\x90B\x8C6\x3\x2\x2\x2\x90B\x8CF\x3\x2\x2\x2\x90B\x8D8\x3\x2\x2"+
		"\x2\x90B\x8E1\x3\x2\x2\x2\x90B\x8EA\x3\x2\x2\x2\x90B\x8EF\x3\x2\x2\x2"+
		"\x90B\x8F4\x3\x2\x2\x2\x90B\x8FD\x3\x2\x2\x2\x90B\x906\x3\x2\x2\x2\x90C"+
		"\x90F\x3\x2\x2\x2\x90D\x90B\x3\x2\x2\x2\x90D\x90E\x3\x2\x2\x2\x90E\xDF"+
		"\x3\x2\x2\x2\x90F\x90D\x3\x2\x2\x2\x910\x914\a*\x2\x2\x911\x914\a\x9B"+
		"\x2\x2\x912\x914\x5\x134\x9B\x2\x913\x910\x3\x2\x2\x2\x913\x911\x3\x2"+
		"\x2\x2\x913\x912\x3\x2\x2\x2\x914\x915\x3\x2\x2\x2\x915\x918\a\xDF\x2"+
		"\x2\x916\x917\a\xB1\x2\x2\x917\x919\a\xDF\x2\x2\x918\x916\x3\x2\x2\x2"+
		"\x918\x919\x3\x2\x2\x2\x919\x91A\x3\x2\x2\x2\x91A\x91B\x5\xE2r\x2\x91B"+
		"\xE1\x3\x2\x2\x2\x91C\x927\x5\xE4s\x2\x91D\x91F\a\xDF\x2\x2\x91E\x91D"+
		"\x3\x2\x2\x2\x91E\x91F\x3\x2\x2\x2\x91F\x920\x3\x2\x2\x2\x920\x922\a\xB8"+
		"\x2\x2\x921\x923\a\xDF\x2\x2\x922\x921\x3\x2\x2\x2\x922\x923\x3\x2\x2"+
		"\x2\x923\x924\x3\x2\x2\x2\x924\x926\x5\xE4s\x2\x925\x91E\x3\x2\x2\x2\x926"+
		"\x929\x3\x2\x2\x2\x927\x925\x3\x2\x2\x2\x927\x928\x3\x2\x2\x2\x928\xE3"+
		"\x3\x2\x2\x2\x929\x927\x3\x2\x2\x2\x92A\x93C\x5\x118\x8D\x2\x92B\x92D"+
		"\a\xDF\x2\x2\x92C\x92B\x3\x2\x2\x2\x92C\x92D\x3\x2\x2\x2\x92D\x92E\x3"+
		"\x2\x2\x2\x92E\x930\a\xC3\x2\x2\x92F\x931\a\xDF\x2\x2\x930\x92F\x3\x2"+
		"\x2\x2\x930\x931\x3\x2\x2\x2\x931\x936\x3\x2\x2\x2\x932\x934\x5\x114\x8B"+
		"\x2\x933\x935\a\xDF\x2\x2\x934\x933\x3\x2\x2\x2\x934\x935\x3\x2\x2\x2"+
		"\x935\x937\x3\x2\x2\x2\x936\x932\x3\x2\x2\x2\x936\x937\x3\x2\x2\x2\x937"+
		"\x938\x3\x2\x2\x2\x938\x93A\a\xCE\x2\x2\x939\x93B\a\xDF\x2\x2\x93A\x939"+
		"\x3\x2\x2\x2\x93A\x93B\x3\x2\x2\x2\x93B\x93D\x3\x2\x2\x2\x93C\x92C\x3"+
		"\x2\x2\x2\x93C\x93D\x3\x2\x2\x2\x93D\x93F\x3\x2\x2\x2\x93E\x940\x5\x132"+
		"\x9A\x2\x93F\x93E\x3\x2\x2\x2\x93F\x940\x3\x2\x2\x2\x940\x943\x3\x2\x2"+
		"\x2\x941\x942\a\xDF\x2\x2\x942\x944\x5\x11A\x8E\x2\x943\x941\x3\x2\x2"+
		"\x2\x943\x944\x3\x2\x2\x2\x944\xE5\x3\x2\x2\x2\x945\x946\a\xAE\x2\x2\x946"+
		"\x947\a\xDF\x2\x2\x947\x949\x5\xDEp\x2\x948\x94A\a\xDD\x2\x2\x949\x948"+
		"\x3\x2\x2\x2\x94A\x94B\x3\x2\x2\x2\x94B\x949\x3\x2\x2\x2\x94B\x94C\x3"+
		"\x2\x2\x2\x94C\x950\x3\x2\x2\x2\x94D\x94F\x5\x32\x1A\x2\x94E\x94D\x3\x2"+
		"\x2\x2\x94F\x952\x3\x2\x2\x2\x950\x94E\x3\x2\x2\x2\x950\x951\x3\x2\x2"+
		"\x2\x951\x956\x3\x2\x2\x2\x952\x950\x3\x2\x2\x2\x953\x955\a\xDD\x2\x2"+
		"\x954\x953\x3\x2\x2\x2\x955\x958\x3\x2\x2\x2\x956\x954\x3\x2\x2\x2\x956"+
		"\x957\x3\x2\x2\x2\x957\x959\x3\x2\x2\x2\x958\x956\x3\x2\x2\x2\x959\x95A"+
		"\a\xAD\x2\x2\x95A\xE7\x3\x2\x2\x2\x95B\x95C\a\xAF\x2\x2\x95C\x95D\a\xDF"+
		"\x2\x2\x95D\x95F\x5\xDEp\x2\x95E\x960\a\xDF\x2\x2\x95F\x95E\x3\x2\x2\x2"+
		"\x95F\x960\x3\x2\x2\x2\x960\x961\x3\x2\x2\x2\x961\x963\a\xB8\x2\x2\x962"+
		"\x964\a\xDF\x2\x2\x963\x962\x3\x2\x2\x2\x963\x964\x3\x2\x2\x2\x964\x965"+
		"\x3\x2\x2\x2\x965\x966\x5\xDEp\x2\x966\xE9\x3\x2\x2\x2\x967\x968\a\xB0"+
		"\x2\x2\x968\x969\a\xDF\x2\x2\x969\x96B\x5\xFA~\x2\x96A\x96C\a\xDD\x2\x2"+
		"\x96B\x96A\x3\x2\x2\x2\x96C\x96D\x3\x2\x2\x2\x96D\x96B\x3\x2\x2\x2\x96D"+
		"\x96E\x3\x2\x2\x2\x96E\x975\x3\x2\x2\x2\x96F\x971\x5\x32\x1A\x2\x970\x972"+
		"\a\xDD\x2\x2\x971\x970\x3\x2\x2\x2\x972\x973\x3\x2\x2\x2\x973\x971\x3"+
		"\x2\x2\x2\x973\x974\x3\x2\x2\x2\x974\x976\x3\x2\x2\x2\x975\x96F\x3\x2"+
		"\x2\x2\x975\x976\x3\x2\x2\x2\x976\x977\x3\x2\x2\x2\x977\x978\a\x37\x2"+
		"\x2\x978\xEB\x3\x2\x2\x2\x979\x97A\a\xB2\x2\x2\x97A\x97B\a\xDF\x2\x2\x97B"+
		"\x97D\x5\xDEp\x2\x97C\x97E\a\xDF\x2\x2\x97D\x97C\x3\x2\x2\x2\x97D\x97E"+
		"\x3\x2\x2\x2\x97E\x97F\x3\x2\x2\x2\x97F\x984\a\xB8\x2\x2\x980\x982\a\xDF"+
		"\x2\x2\x981\x980\x3\x2\x2\x2\x981\x982\x3\x2\x2\x2\x982\x983\x3\x2\x2"+
		"\x2\x983\x985\x5\x9AN\x2\x984\x981\x3\x2\x2\x2\x984\x985\x3\x2\x2\x2\x985"+
		"\xED\x3\x2\x2\x2\x986\x989\x5\xF0y\x2\x987\x989\x5\xF2z\x2\x988\x986\x3"+
		"\x2\x2\x2\x988\x987\x3\x2\x2\x2\x989\xEF\x3\x2\x2\x2\x98A\x98B\a\x13\x2"+
		"\x2\x98B\x98C\a\xDF\x2\x2\x98C\x98E\x5\x118\x8D\x2\x98D\x98F\x5\x132\x9A"+
		"\x2\x98E\x98D\x3\x2\x2\x2\x98E\x98F\x3\x2\x2\x2\x98F\x99D\x3\x2\x2\x2"+
		"\x990\x992\a\xDF\x2\x2\x991\x990\x3\x2\x2\x2\x991\x992\x3\x2\x2\x2\x992"+
		"\x993\x3\x2\x2\x2\x993\x995\a\xC3\x2\x2\x994\x996\a\xDF\x2\x2\x995\x994"+
		"\x3\x2\x2\x2\x995\x996\x3\x2\x2\x2\x996\x997\x3\x2\x2\x2\x997\x999\x5"+
		"\x108\x85\x2\x998\x99A\a\xDF\x2\x2\x999\x998\x3\x2\x2\x2\x999\x99A\x3"+
		"\x2\x2\x2\x99A\x99B\x3\x2\x2\x2\x99B\x99C\a\xCE\x2\x2\x99C\x99E\x3\x2"+
		"\x2\x2\x99D\x991\x3\x2\x2\x2\x99D\x99E\x3\x2\x2\x2\x99E\xF1\x3\x2\x2\x2"+
		"\x99F\x9A0\a\x13\x2\x2\x9A0\x9A2\a\xDF\x2\x2\x9A1\x9A3\x5\xFA~\x2\x9A2"+
		"\x9A1\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2\x2\x9A3\x9A4\x3\x2\x2\x2\x9A4\x9A6"+
		"\a\xBB\x2\x2\x9A5\x9A7\a\xDF\x2\x2\x9A6\x9A5\x3\x2\x2\x2\x9A6\x9A7\x3"+
		"\x2\x2\x2\x9A7\x9A8\x3\x2\x2\x2\x9A8\x9AA\x5\x118\x8D\x2\x9A9\x9AB\x5"+
		"\x132\x9A\x2\x9AA\x9A9\x3\x2\x2\x2\x9AA\x9AB\x3\x2\x2\x2\x9AB\x9B9\x3"+
		"\x2\x2\x2\x9AC\x9AE\a\xDF\x2\x2\x9AD\x9AC\x3\x2\x2\x2\x9AD\x9AE\x3\x2"+
		"\x2\x2\x9AE\x9AF\x3\x2\x2\x2\x9AF\x9B1\a\xC3\x2\x2\x9B0\x9B2\a\xDF\x2"+
		"\x2\x9B1\x9B0\x3\x2\x2\x2\x9B1\x9B2\x3\x2\x2\x2\x9B2\x9B3\x3\x2\x2\x2"+
		"\x9B3\x9B5\x5\x108\x85\x2\x9B4\x9B6\a\xDF\x2\x2\x9B5\x9B4\x3\x2\x2\x2"+
		"\x9B5\x9B6\x3\x2\x2\x2\x9B6\x9B7\x3\x2\x2\x2\x9B7\x9B8\a\xCE\x2\x2\x9B8"+
		"\x9BA\x3\x2\x2\x2\x9B9\x9AD\x3\x2\x2\x2\x9B9\x9BA\x3\x2\x2\x2\x9BA\xF3"+
		"\x3\x2\x2\x2\x9BB\x9BE\x5\xF6|\x2\x9BC\x9BE\x5\xF8}\x2\x9BD\x9BB\x3\x2"+
		"\x2\x2\x9BD\x9BC\x3\x2\x2\x2\x9BE\xF5\x3\x2\x2\x2\x9BF\x9C2\x5\x11E\x90"+
		"\x2\x9C0\x9C1\a\xDF\x2\x2\x9C1\x9C3\x5\x108\x85\x2\x9C2\x9C0\x3\x2\x2"+
		"\x2\x9C2\x9C3\x3\x2\x2\x2\x9C3\xF7\x3\x2\x2\x2\x9C4\x9C6\x5\xFA~\x2\x9C5"+
		"\x9C4\x3\x2\x2\x2\x9C5\x9C6\x3\x2\x2\x2\x9C6\x9C7\x3\x2\x2\x2\x9C7\x9C8"+
		"\a\xBB\x2\x2\x9C8\x9CA\x5\x118\x8D\x2\x9C9\x9CB\x5\x132\x9A\x2\x9CA\x9C9"+
		"\x3\x2\x2\x2\x9CA\x9CB\x3\x2\x2\x2\x9CB\x9CE\x3\x2\x2\x2\x9CC\x9CD\a\xDF"+
		"\x2\x2\x9CD\x9CF\x5\x108\x85\x2\x9CE\x9CC\x3\x2\x2\x2\x9CE\x9CF\x3\x2"+
		"\x2\x2\x9CF\x9D1\x3\x2\x2\x2\x9D0\x9D2\x5\x10C\x87\x2\x9D1\x9D0\x3\x2"+
		"\x2\x2\x9D1\x9D2\x3\x2\x2\x2\x9D2\xF9\x3\x2\x2\x2\x9D3\x9D8\x5\x102\x82"+
		"\x2\x9D4\x9D8\x5\xFC\x7F\x2\x9D5\x9D8\x5\xFE\x80\x2\x9D6\x9D8\x5\x106"+
		"\x84\x2\x9D7\x9D3\x3\x2\x2\x2\x9D7\x9D4\x3\x2\x2\x2\x9D7\x9D5\x3\x2\x2"+
		"\x2\x9D7\x9D6\x3\x2\x2\x2\x9D8\xFB\x3\x2\x2\x2\x9D9\x9DB\x5\x118\x8D\x2"+
		"\x9DA\x9DC\x5\x132\x9A\x2\x9DB\x9DA\x3\x2\x2\x2\x9DB\x9DC\x3\x2\x2\x2"+
		"\x9DC\x9DE\x3\x2\x2\x2\x9DD\x9DF\x5\x10C\x87\x2\x9DE\x9DD\x3\x2\x2\x2"+
		"\x9DE\x9DF\x3\x2\x2\x2\x9DF\xFD\x3\x2\x2\x2\x9E0\x9E4\x5\x118\x8D\x2\x9E1"+
		"\x9E4\x5\x11C\x8F\x2\x9E2\x9E4\x5\x100\x81\x2\x9E3\x9E0\x3\x2\x2\x2\x9E3"+
		"\x9E1\x3\x2\x2\x2\x9E3\x9E2\x3\x2\x2\x2\x9E4\x9E6\x3\x2\x2\x2\x9E5\x9E7"+
		"\x5\x132\x9A\x2\x9E6\x9E5\x3\x2\x2\x2\x9E6\x9E7\x3\x2\x2\x2\x9E7\x9E9"+
		"\x3\x2\x2\x2\x9E8\x9EA\a\xDF\x2\x2\x9E9\x9E8\x3\x2\x2\x2\x9E9\x9EA\x3"+
		"\x2\x2\x2\x9EA\x9EB\x3\x2\x2\x2\x9EB\x9ED\a\xC3\x2\x2\x9EC\x9EE\a\xDF"+
		"\x2\x2\x9ED\x9EC\x3\x2\x2\x2\x9ED\x9EE\x3\x2\x2\x2\x9EE\x9F3\x3\x2\x2"+
		"\x2\x9EF\x9F1\x5\x108\x85\x2\x9F0\x9F2\a\xDF\x2\x2\x9F1\x9F0\x3\x2\x2"+
		"\x2\x9F1\x9F2\x3\x2\x2\x2\x9F2\x9F4\x3\x2\x2\x2\x9F3\x9EF\x3\x2\x2\x2"+
		"\x9F3\x9F4\x3\x2\x2\x2\x9F4\x9F5\x3\x2\x2\x2\x9F5\x9F7\a\xCE\x2\x2\x9F6"+
		"\x9F8\x5\x10C\x87\x2\x9F7\x9F6\x3\x2\x2\x2\x9F7\x9F8\x3\x2\x2\x2\x9F8"+
		"\xFF\x3\x2\x2\x2\x9F9\x9FB\x5\x118\x8D\x2\x9FA\x9FC\x5\x132\x9A\x2\x9FB"+
		"\x9FA\x3\x2\x2\x2\x9FB\x9FC\x3\x2\x2\x2\x9FC\x9FE\x3\x2\x2\x2\x9FD\x9FF"+
		"\a\xDF\x2\x2\x9FE\x9FD\x3\x2\x2\x2\x9FE\x9FF\x3\x2\x2\x2\x9FF\xA00\x3"+
		"\x2\x2\x2\xA00\xA02\a\xC3\x2\x2\xA01\xA03\a\xDF\x2\x2\xA02\xA01\x3\x2"+
		"\x2\x2\xA02\xA03\x3\x2\x2\x2\xA03\xA08\x3\x2\x2\x2\xA04\xA06\x5\x108\x85"+
		"\x2\xA05\xA07\a\xDF\x2\x2\xA06\xA05\x3\x2\x2\x2\xA06\xA07\x3\x2\x2\x2"+
		"\xA07\xA09\x3\x2\x2\x2\xA08\xA04\x3\x2\x2\x2\xA08\xA09\x3\x2\x2\x2\xA09"+
		"\xA0A\x3\x2\x2\x2\xA0A\xA0B\a\xCE\x2\x2\xA0B\x101\x3\x2\x2\x2\xA0C\xA0F"+
		"\x5\xFC\x7F\x2\xA0D\xA0F\x5\xFE\x80\x2\xA0E\xA0C\x3\x2\x2\x2\xA0E\xA0D"+
		"\x3\x2\x2\x2\xA0E\xA0F\x3\x2\x2\x2\xA0F\xA11\x3\x2\x2\x2\xA10\xA12\x5"+
		"\x104\x83\x2\xA11\xA10\x3\x2\x2\x2\xA12\xA13\x3\x2\x2\x2\xA13\xA11\x3"+
		"\x2\x2\x2\xA13\xA14\x3\x2\x2\x2\xA14\xA16\x3\x2\x2\x2\xA15\xA17\x5\x10C"+
		"\x87\x2\xA16\xA15\x3\x2\x2\x2\xA16\xA17\x3\x2\x2\x2\xA17\x103\x3\x2\x2"+
		"\x2\xA18\xA1A\a\xDF\x2\x2\xA19\xA18\x3\x2\x2\x2\xA19\xA1A\x3\x2\x2\x2"+
		"\xA1A\xA1B\x3\x2\x2\x2\xA1B\xA1E\a\xBB\x2\x2\xA1C\xA1F\x5\xFC\x7F\x2\xA1D"+
		"\xA1F\x5\xFE\x80\x2\xA1E\xA1C\x3\x2\x2\x2\xA1E\xA1D\x3\x2\x2\x2\xA1F\x105"+
		"\x3\x2\x2\x2\xA20\xA21\x5\x10C\x87\x2\xA21\x107\x3\x2\x2\x2\xA22\xA24"+
		"\x5\x10A\x86\x2\xA23\xA22\x3\x2\x2\x2\xA23\xA24\x3\x2\x2\x2\xA24\xA26"+
		"\x3\x2\x2\x2\xA25\xA27\a\xDF\x2\x2\xA26\xA25\x3\x2\x2\x2\xA26\xA27\x3"+
		"\x2\x2\x2\xA27\xA28\x3\x2\x2\x2\xA28\xA2A\t\v\x2\x2\xA29\xA2B\a\xDF\x2"+
		"\x2\xA2A\xA29\x3\x2\x2\x2\xA2A\xA2B\x3\x2\x2\x2\xA2B\xA2D\x3\x2\x2\x2"+
		"\xA2C\xA23\x3\x2\x2\x2\xA2D\xA30\x3\x2\x2\x2\xA2E\xA2C\x3\x2\x2\x2\xA2E"+
		"\xA2F\x3\x2\x2\x2\xA2F\xA31\x3\x2\x2\x2\xA30\xA2E\x3\x2\x2\x2\xA31\xA3E"+
		"\x5\x10A\x86\x2\xA32\xA34\a\xDF\x2\x2\xA33\xA32\x3\x2\x2\x2\xA33\xA34"+
		"\x3\x2\x2\x2\xA34\xA35\x3\x2\x2\x2\xA35\xA37\t\v\x2\x2\xA36\xA38\a\xDF"+
		"\x2\x2\xA37\xA36\x3\x2\x2\x2\xA37\xA38\x3\x2\x2\x2\xA38\xA3A\x3\x2\x2"+
		"\x2\xA39\xA3B\x5\x10A\x86\x2\xA3A\xA39\x3\x2\x2\x2\xA3A\xA3B\x3\x2\x2"+
		"\x2\xA3B\xA3D\x3\x2\x2\x2\xA3C\xA33\x3\x2\x2\x2\xA3D\xA40\x3\x2\x2\x2"+
		"\xA3E\xA3C\x3\x2\x2\x2\xA3E\xA3F\x3\x2\x2\x2\xA3F\x109\x3\x2\x2\x2\xA40"+
		"\xA3E\x3\x2\x2\x2\xA41\xA42\t\r\x2\x2\xA42\xA44\a\xDF\x2\x2\xA43\xA41"+
		"\x3\x2\x2\x2\xA43\xA44\x3\x2\x2\x2\xA44\xA45\x3\x2\x2\x2\xA45\xA46\x5"+
		"\xDEp\x2\xA46\x10B\x3\x2\x2\x2\xA47\xA48\a\xBD\x2\x2\xA48\xA4A\x5\x118"+
		"\x8D\x2\xA49\xA4B\x5\x132\x9A\x2\xA4A\xA49\x3\x2\x2\x2\xA4A\xA4B\x3\x2"+
		"\x2\x2\xA4B\x10D\x3\x2\x2\x2\xA4C\xA5E\a\xC3\x2\x2\xA4D\xA4F\a\xDF\x2"+
		"\x2\xA4E\xA4D\x3\x2\x2\x2\xA4E\xA4F\x3\x2\x2\x2\xA4F\xA50\x3\x2\x2\x2"+
		"\xA50\xA5B\x5\x110\x89\x2\xA51\xA53\a\xDF\x2\x2\xA52\xA51\x3\x2\x2\x2"+
		"\xA52\xA53\x3\x2\x2\x2\xA53\xA54\x3\x2\x2\x2\xA54\xA56\a\xB8\x2\x2\xA55"+
		"\xA57\a\xDF\x2\x2\xA56\xA55\x3\x2\x2\x2\xA56\xA57\x3\x2\x2\x2\xA57\xA58"+
		"\x3\x2\x2\x2\xA58\xA5A\x5\x110\x89\x2\xA59\xA52\x3\x2\x2\x2\xA5A\xA5D"+
		"\x3\x2\x2\x2\xA5B\xA59\x3\x2\x2\x2\xA5B\xA5C\x3\x2\x2\x2\xA5C\xA5F\x3"+
		"\x2\x2\x2\xA5D\xA5B\x3\x2\x2\x2\xA5E\xA4E\x3\x2\x2\x2\xA5E\xA5F\x3\x2"+
		"\x2\x2\xA5F\xA61\x3\x2\x2\x2\xA60\xA62\a\xDF\x2\x2\xA61\xA60\x3\x2\x2"+
		"\x2\xA61\xA62\x3\x2\x2\x2\xA62\xA63\x3\x2\x2\x2\xA63\xA64\a\xCE\x2\x2"+
		"\xA64\x10F\x3\x2\x2\x2\xA65\xA66\au\x2\x2\xA66\xA68\a\xDF\x2\x2\xA67\xA65"+
		"\x3\x2\x2\x2\xA67\xA68\x3\x2\x2\x2\xA68\xA6B\x3\x2\x2\x2\xA69\xA6A\t\xE"+
		"\x2\x2\xA6A\xA6C\a\xDF\x2\x2\xA6B\xA69\x3\x2\x2\x2\xA6B\xA6C\x3\x2\x2"+
		"\x2\xA6C\xA6F\x3\x2\x2\x2\xA6D\xA6E\a|\x2\x2\xA6E\xA70\a\xDF\x2\x2\xA6F"+
		"\xA6D\x3\x2\x2\x2\xA6F\xA70\x3\x2\x2\x2\xA70\xA71\x3\x2\x2\x2\xA71\xA73"+
		"\x5\x118\x8D\x2\xA72\xA74\x5\x132\x9A\x2\xA73\xA72\x3\x2\x2\x2\xA73\xA74"+
		"\x3\x2\x2\x2\xA74\xA7D\x3\x2\x2\x2\xA75\xA77\a\xDF\x2\x2\xA76\xA75\x3"+
		"\x2\x2\x2\xA76\xA77\x3\x2\x2\x2\xA77\xA78\x3\x2\x2\x2\xA78\xA7A\a\xC3"+
		"\x2\x2\xA79\xA7B\a\xDF\x2\x2\xA7A\xA79\x3\x2\x2\x2\xA7A\xA7B\x3\x2\x2"+
		"\x2\xA7B\xA7C\x3\x2\x2\x2\xA7C\xA7E\a\xCE\x2\x2\xA7D\xA76\x3\x2\x2\x2"+
		"\xA7D\xA7E\x3\x2\x2\x2\xA7E\xA81\x3\x2\x2\x2\xA7F\xA80\a\xDF\x2\x2\xA80"+
		"\xA82\x5\x11A\x8E\x2\xA81\xA7F\x3\x2\x2\x2\xA81\xA82\x3\x2\x2\x2\xA82"+
		"\xA87\x3\x2\x2\x2\xA83\xA85\a\xDF\x2\x2\xA84\xA83\x3\x2\x2\x2\xA84\xA85"+
		"\x3\x2\x2\x2\xA85\xA86\x3\x2\x2\x2\xA86\xA88\x5\x112\x8A\x2\xA87\xA84"+
		"\x3\x2\x2\x2\xA87\xA88\x3\x2\x2\x2\xA88\x111\x3\x2\x2\x2\xA89\xA8B\a\xBC"+
		"\x2\x2\xA8A\xA8C\a\xDF\x2\x2\xA8B\xA8A\x3\x2\x2\x2\xA8B\xA8C\x3\x2\x2"+
		"\x2\xA8C\xA8F\x3\x2\x2\x2\xA8D\xA90\x5\x12A\x96\x2\xA8E\xA90\x5\x118\x8D"+
		"\x2\xA8F\xA8D\x3\x2\x2\x2\xA8F\xA8E\x3\x2\x2\x2\xA90\x113\x3\x2\x2\x2"+
		"\xA91\xA9C\x5\x116\x8C\x2\xA92\xA94\a\xDF\x2\x2\xA93\xA92\x3\x2\x2\x2"+
		"\xA93\xA94\x3\x2\x2\x2\xA94\xA95\x3\x2\x2\x2\xA95\xA97\a\xB8\x2\x2\xA96"+
		"\xA98\a\xDF\x2\x2\xA97\xA96\x3\x2\x2\x2\xA97\xA98\x3\x2\x2\x2\xA98\xA99"+
		"\x3\x2\x2\x2\xA99\xA9B\x5\x116\x8C\x2\xA9A\xA93\x3\x2\x2\x2\xA9B\xA9E"+
		"\x3\x2\x2\x2\xA9C\xA9A\x3\x2\x2\x2\xA9C\xA9D\x3\x2\x2\x2\xA9D\x115\x3"+
		"\x2\x2\x2\xA9E\xA9C\x3\x2\x2\x2\xA9F\xAA0\x5\xDEp\x2\xAA0\xAA1\a\xDF\x2"+
		"\x2\xAA1\xAA2\a\xA4\x2\x2\xAA2\xAA3\a\xDF\x2\x2\xAA3\xAA5\x3\x2\x2\x2"+
		"\xAA4\xA9F\x3\x2\x2\x2\xAA4\xAA5\x3\x2\x2\x2\xAA5\xAA6\x3\x2\x2\x2\xAA6"+
		"\xAA7\x5\xDEp\x2\xAA7\x117\x3\x2\x2\x2\xAA8\xAAB\a\xDB\x2\x2\xAA9\xAAB"+
		"\x5\x136\x9C\x2\xAAA\xAA8\x3\x2\x2\x2\xAAA\xAA9\x3\x2\x2\x2\xAAB\xAAC"+
		"\x3\x2\x2\x2\xAAC\xAAA\x3\x2\x2\x2\xAAC\xAAD\x3\x2\x2\x2\xAAD\xAB7\x3"+
		"\x2\x2\x2\xAAE\xAB1\a\xD0\x2\x2\xAAF\xAB2\a\xDB\x2\x2\xAB0\xAB2\x5\x136"+
		"\x9C\x2\xAB1\xAAF\x3\x2\x2\x2\xAB1\xAB0\x3\x2\x2\x2\xAB2\xAB3\x3\x2\x2"+
		"\x2\xAB3\xAB1\x3\x2\x2\x2\xAB3\xAB4\x3\x2\x2\x2\xAB4\xAB5\x3\x2\x2\x2"+
		"\xAB5\xAB7\a\xD1\x2\x2\xAB6\xAAA\x3\x2\x2\x2\xAB6\xAAE\x3\x2\x2\x2\xAB7"+
		"\x119\x3\x2\x2\x2\xAB8\xAB9\a\n\x2\x2\xAB9\xABC\a\xDF\x2\x2\xABA\xABB"+
		"\al\x2\x2\xABB\xABD\a\xDF\x2\x2\xABC\xABA\x3\x2\x2\x2\xABC\xABD\x3\x2"+
		"\x2\x2\xABD\xABE\x3\x2\x2\x2\xABE\xAC1\x5\x130\x99\x2\xABF\xAC0\a\xDF"+
		"\x2\x2\xAC0\xAC2\x5\x124\x93\x2\xAC1\xABF\x3\x2\x2\x2\xAC1\xAC2\x3\x2"+
		"\x2\x2\xAC2\x11B\x3\x2\x2\x2\xAC3\xAC4\t\xF\x2\x2\xAC4\x11D\x3\x2\x2\x2"+
		"\xAC5\xACA\a\xDB\x2\x2\xAC6\xAC9\x5\x136\x9C\x2\xAC7\xAC9\a\xDB\x2\x2"+
		"\xAC8\xAC6\x3\x2\x2\x2\xAC8\xAC7\x3\x2\x2\x2\xAC9\xACC\x3\x2\x2\x2\xACA"+
		"\xAC8\x3\x2\x2\x2\xACA\xACB\x3\x2\x2\x2\xACB\xAD5\x3\x2\x2\x2\xACC\xACA"+
		"\x3\x2\x2\x2\xACD\xAD0\x5\x136\x9C\x2\xACE\xAD1\x5\x136\x9C\x2\xACF\xAD1"+
		"\a\xDB\x2\x2\xAD0\xACE\x3\x2\x2\x2\xAD0\xACF\x3\x2\x2\x2\xAD1\xAD2\x3"+
		"\x2\x2\x2\xAD2\xAD0\x3\x2\x2\x2\xAD2\xAD3\x3\x2\x2\x2\xAD3\xAD5\x3\x2"+
		"\x2\x2\xAD4\xAC5\x3\x2\x2\x2\xAD4\xACD\x3\x2\x2\x2\xAD5\x11F\x3\x2\x2"+
		"\x2\xAD6\xAD7\t\x10\x2\x2\xAD7\x121\x3\x2\x2\x2\xAD8\xADD\x5\x118\x8D"+
		"\x2\xAD9\xADA\a\xBB\x2\x2\xADA\xADC\x5\x118\x8D\x2\xADB\xAD9\x3\x2\x2"+
		"\x2\xADC\xADF\x3\x2\x2\x2\xADD\xADB\x3\x2\x2\x2\xADD\xADE\x3\x2\x2\x2"+
		"\xADE\x123\x3\x2\x2\x2\xADF\xADD\x3\x2\x2\x2\xAE0\xAE2\a\xC7\x2\x2\xAE1"+
		"\xAE3\a\xDF\x2\x2\xAE2\xAE1\x3\x2\x2\x2\xAE2\xAE3\x3\x2\x2\x2\xAE3\xAE6"+
		"\x3\x2\x2\x2\xAE4\xAE7\a\xD5\x2\x2\xAE5\xAE7\x5\x118\x8D\x2\xAE6\xAE4"+
		"\x3\x2\x2\x2\xAE6\xAE5\x3\x2\x2\x2\xAE7\x125\x3\x2\x2\x2\xAE8\xAF1\x5"+
		"\x11E\x90\x2\xAE9\xAEB\a\xDF\x2\x2\xAEA\xAE9\x3\x2\x2\x2\xAEA\xAEB\x3"+
		"\x2\x2\x2\xAEB\xAEC\x3\x2\x2\x2\xAEC\xAEE\a\xC5\x2\x2\xAED\xAEF\a\xDF"+
		"\x2\x2\xAEE\xAED\x3\x2\x2\x2\xAEE\xAEF\x3\x2\x2\x2\xAEF\xAF0\x3\x2\x2"+
		"\x2\xAF0\xAF2\x5\x11E\x90\x2\xAF1\xAEA\x3\x2\x2\x2\xAF1\xAF2\x3\x2\x2"+
		"\x2\xAF2\x127\x3\x2\x2\x2\xAF3\xAF4\x5\x118\x8D\x2\xAF4\xAF5\a\xB7\x2"+
		"\x2\xAF5\x129\x3\x2\x2\x2\xAF6\xAF7\t\x11\x2\x2\xAF7\x12B\x3\x2\x2\x2"+
		"\xAF8\xAF9\t\x12\x2\x2\xAF9\x12D\x3\x2\x2\x2\xAFA\xAFB\t\x13\x2\x2\xAFB"+
		"\x12F\x3\x2\x2\x2\xAFC\xAFF\x5\x11C\x8F\x2\xAFD\xAFF\x5\x122\x92\x2\xAFE"+
		"\xAFC\x3\x2\x2\x2\xAFE\xAFD\x3\x2\x2\x2\xAFF\xB08\x3\x2\x2\x2\xB00\xB02"+
		"\a\xDF\x2\x2\xB01\xB00\x3\x2\x2\x2\xB01\xB02\x3\x2\x2\x2\xB02\xB03\x3"+
		"\x2\x2\x2\xB03\xB05\a\xC3\x2\x2\xB04\xB06\a\xDF\x2\x2\xB05\xB04\x3\x2"+
		"\x2\x2\xB05\xB06\x3\x2\x2\x2\xB06\xB07\x3\x2\x2\x2\xB07\xB09\a\xCE\x2"+
		"\x2\xB08\xB01\x3\x2\x2\x2\xB08\xB09\x3\x2\x2\x2\xB09\x131\x3\x2\x2\x2"+
		"\xB0A\xB0B\t\x14\x2\x2\xB0B\x133\x3\x2\x2\x2\xB0C\xB0D\t\x15\x2\x2\xB0D"+
		"\x135\x3\x2\x2\x2\xB0E\xB0F\t\x16\x2\x2\xB0F\x137\x3\x2\x2\x2\x1E5\x13C"+
		"\x141\x148\x14A\x14D\x152\x156\x15B\x15F\x164\x168\x16D\x171\x176\x17A"+
		"\x17F\x183\x188\x18C\x190\x195\x19B\x1A7\x1AD\x1B2\x1B8\x1BC\x1C0\x1C9"+
		"\x1CD\x1D3\x1D7\x1E1\x1E7\x1EC\x1FB\x1FE\x206\x20B\x210\x216\x21C\x21F"+
		"\x223\x227\x22B\x230\x234\x239\x242\x245\x24D\x251\x256\x25B\x25D\x263"+
		"\x26F\x273\x277\x27B\x280\x287\x28A\x28F\x2D5\x2DB\x2DF\x2E2\x2F2\x2F6"+
		"\x2FB\x2FE\x303\x309\x30D\x312\x317\x31B\x31E\x322\x328\x32C\x333\x339"+
		"\x33C\x341\x34B\x34E\x351\x355\x35B\x35F\x364\x36B\x36F\x373\x377\x37A"+
		"\x380\x386\x388\x393\x399\x39B\x3A3\x3A9\x3B1\x3B8\x3C0\x3C5\x3CC\x3D0"+
		"\x3D3\x3D8\x3DE\x3E2\x3E7\x3F1\x3F7\x401\x405\x40F\x418\x41E\x420\x425"+
		"\x42B\x42F\x432\x436\x441\x446\x44C\x44E\x454\x456\x45B\x45F\x465\x468"+
		"\x46C\x471\x477\x479\x481\x485\x488\x48B\x48F\x4A6\x4AC\x4B0\x4B4\x4BE"+
		"\x4C4\x4C6\x4D2\x4D8\x4DA\x4E0\x4E6\x4E8\x4F2\x4F6\x4FB\x503\x507\x50B"+
		"\x513\x517\x523\x527\x52E\x530\x536\x53A\x542\x546\x552\x558\x55A\x564"+
		"\x56A\x56C\x572\x578\x57A\x57E\x582\x586\x59C\x5A1\x5AB\x5AF\x5B4\x5BF"+
		"\x5C3\x5C8\x5D6\x5DA\x5E3\x5E7\x5EA\x5EE\x5F2\x5F5\x5F9\x5FD\x600\x604"+
		"\x607\x60B\x60D\x612\x616\x61A\x61E\x620\x626\x62A\x62D\x632\x636\x63C"+
		"\x63F\x642\x646\x64B\x651\x653\x65A\x65E\x664\x667\x66C\x672\x674\x67B"+
		"\x67F\x685\x688\x68D\x693\x695\x69D\x6A1\x6A4\x6A7\x6AB\x6B3\x6B7\x6BB"+
		"\x6BD\x6C0\x6C5\x6CB\x6CF\x6D3\x6D8\x6DD\x6E1\x6E5\x6EA\x6F2\x6F4\x700"+
		"\x704\x70C\x710\x718\x71C\x720\x724\x728\x72C\x734\x738\x744\x749\x74D"+
		"\x755\x758\x75D\x763\x765\x76B\x76D\x772\x776\x77B\x77E\x782\x786\x791"+
		"\x797\x79B\x79E\x7A4\x7A8\x7B0\x7B4\x7BD\x7C1\x7C7\x7CA\x7CF\x7D5\x7D7"+
		"\x7DD\x7E1\x7E8\x7F0\x7F5\x7FC\x800\x803\x806\x809\x80D\x812\x81B\x825"+
		"\x829\x830\x832\x839\x83D\x841\x846\x84A\x858\x85C\x862\x867\x86D\x87B"+
		"\x87F\x884\x888\x88D\x891\x896\x89A\x89F\x8A3\x8A8\x8AC\x8B6\x8BA\x8BF"+
		"\x8C3\x8C8\x8CC\x8D1\x8D5\x8DA\x8DE\x8E3\x8E7\x8F6\x8FA\x8FF\x903\x90B"+
		"\x90D\x913\x918\x91E\x922\x927\x92C\x930\x934\x936\x93A\x93C\x93F\x943"+
		"\x94B\x950\x956\x95F\x963\x96D\x973\x975\x97D\x981\x984\x988\x98E\x991"+
		"\x995\x999\x99D\x9A2\x9A6\x9AA\x9AD\x9B1\x9B5\x9B9\x9BD\x9C2\x9C5\x9CA"+
		"\x9CE\x9D1\x9D7\x9DB\x9DE\x9E3\x9E6\x9E9\x9ED\x9F1\x9F3\x9F7\x9FB\x9FE"+
		"\xA02\xA06\xA08\xA0E\xA13\xA16\xA19\xA1E\xA23\xA26\xA2A\xA2E\xA33\xA37"+
		"\xA3A\xA3E\xA43\xA4A\xA4E\xA52\xA56\xA5B\xA5E\xA61\xA67\xA6B\xA6F\xA73"+
		"\xA76\xA7A\xA7D\xA81\xA84\xA87\xA8B\xA8F\xA93\xA97\xA9C\xAA4\xAAA\xAAC"+
		"\xAB1\xAB3\xAB6\xABC\xAC1\xAC8\xACA\xAD0\xAD2\xAD4\xADD\xAE2\xAE6\xAEA"+
		"\xAEE\xAF1\xAFE\xB01\xB05\xB08";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace VBTranspiler.Parser
